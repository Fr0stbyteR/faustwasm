{
  "version": 3,
  "sources": ["../../node_modules/tslib/tslib.js", "../../node_modules/@aws-crypto/sha256-js/src/constants.ts", "../../node_modules/@aws-crypto/sha256-js/src/RawSha256.ts", "../../node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js", "../../node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js", "../../node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js", "../../node_modules/@aws-crypto/util/src/convertToBuffer.ts", "../../node_modules/@aws-crypto/util/src/isEmptyData.ts", "../../node_modules/@aws-crypto/util/src/numToUint8.ts", "../../node_modules/@aws-crypto/util/src/uint32ArrayFrom.ts", "../../node_modules/@aws-crypto/util/src/index.ts", "../../node_modules/@aws-crypto/sha256-js/src/jsSha256.ts", "../../node_modules/@aws-crypto/sha256-js/src/index.ts", "../../src/instantiateFaustModuleFromFile.ts", "../../src/FaustAudioWorkletProcessor.ts", "../../src/FaustCompiler.ts", "../../src/FaustDspInstance.ts", "../../src/FaustWasmInstantiator.ts", "../../src/FaustWebAudioDsp.ts", "../../src/FaustOfflineProcessor.ts", "../../src/FaustSvgDiagrams.ts", "../../src/LibFaust.ts", "../../src/WavEncoder.ts", "../../src/WavDecoder.ts", "../../src/FaustAudioWorkletNode.ts", "../../src/FaustScriptProcessorNode.ts", "../../src/FaustDspGenerator.ts"],
  "sourcesContent": ["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __createBinding;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __createBinding = function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result[\"default\"] = mod;\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n});\r\n", "/**\n * @internal\n */\nexport const BLOCK_SIZE: number = 64;\n\n/**\n * @internal\n */\nexport const DIGEST_LENGTH: number = 32;\n\n/**\n * @internal\n */\nexport const KEY = new Uint32Array([\n  0x428a2f98,\n  0x71374491,\n  0xb5c0fbcf,\n  0xe9b5dba5,\n  0x3956c25b,\n  0x59f111f1,\n  0x923f82a4,\n  0xab1c5ed5,\n  0xd807aa98,\n  0x12835b01,\n  0x243185be,\n  0x550c7dc3,\n  0x72be5d74,\n  0x80deb1fe,\n  0x9bdc06a7,\n  0xc19bf174,\n  0xe49b69c1,\n  0xefbe4786,\n  0x0fc19dc6,\n  0x240ca1cc,\n  0x2de92c6f,\n  0x4a7484aa,\n  0x5cb0a9dc,\n  0x76f988da,\n  0x983e5152,\n  0xa831c66d,\n  0xb00327c8,\n  0xbf597fc7,\n  0xc6e00bf3,\n  0xd5a79147,\n  0x06ca6351,\n  0x14292967,\n  0x27b70a85,\n  0x2e1b2138,\n  0x4d2c6dfc,\n  0x53380d13,\n  0x650a7354,\n  0x766a0abb,\n  0x81c2c92e,\n  0x92722c85,\n  0xa2bfe8a1,\n  0xa81a664b,\n  0xc24b8b70,\n  0xc76c51a3,\n  0xd192e819,\n  0xd6990624,\n  0xf40e3585,\n  0x106aa070,\n  0x19a4c116,\n  0x1e376c08,\n  0x2748774c,\n  0x34b0bcb5,\n  0x391c0cb3,\n  0x4ed8aa4a,\n  0x5b9cca4f,\n  0x682e6ff3,\n  0x748f82ee,\n  0x78a5636f,\n  0x84c87814,\n  0x8cc70208,\n  0x90befffa,\n  0xa4506ceb,\n  0xbef9a3f7,\n  0xc67178f2\n]);\n\n/**\n * @internal\n */\nexport const INIT = [\n  0x6a09e667,\n  0xbb67ae85,\n  0x3c6ef372,\n  0xa54ff53a,\n  0x510e527f,\n  0x9b05688c,\n  0x1f83d9ab,\n  0x5be0cd19\n];\n\n/**\n * @internal\n */\nexport const MAX_HASHABLE_LENGTH = 2 ** 53 - 1;\n", "import {\n  BLOCK_SIZE,\n  DIGEST_LENGTH,\n  INIT,\n  KEY,\n  MAX_HASHABLE_LENGTH\n} from \"./constants\";\n\n/**\n * @internal\n */\nexport class RawSha256 {\n  private state: Int32Array = Int32Array.from(INIT);\n  private temp: Int32Array = new Int32Array(64);\n  private buffer: Uint8Array = new Uint8Array(64);\n  private bufferLength: number = 0;\n  private bytesHashed: number = 0;\n\n  /**\n   * @internal\n   */\n  finished: boolean = false;\n\n  update(data: Uint8Array): void {\n    if (this.finished) {\n      throw new Error(\"Attempted to update an already finished hash.\");\n    }\n\n    let position = 0;\n    let { byteLength } = data;\n    this.bytesHashed += byteLength;\n\n    if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {\n      throw new Error(\"Cannot hash more than 2^53 - 1 bits\");\n    }\n\n    while (byteLength > 0) {\n      this.buffer[this.bufferLength++] = data[position++];\n      byteLength--;\n\n      if (this.bufferLength === BLOCK_SIZE) {\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n    }\n  }\n\n  digest(): Uint8Array {\n    if (!this.finished) {\n      const bitsHashed = this.bytesHashed * 8;\n      const bufferView = new DataView(\n        this.buffer.buffer,\n        this.buffer.byteOffset,\n        this.buffer.byteLength\n      );\n\n      const undecoratedLength = this.bufferLength;\n      bufferView.setUint8(this.bufferLength++, 0x80);\n\n      // Ensure the final block has enough room for the hashed length\n      if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {\n        for (let i = this.bufferLength; i < BLOCK_SIZE; i++) {\n          bufferView.setUint8(i, 0);\n        }\n        this.hashBuffer();\n        this.bufferLength = 0;\n      }\n\n      for (let i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {\n        bufferView.setUint8(i, 0);\n      }\n      bufferView.setUint32(\n        BLOCK_SIZE - 8,\n        Math.floor(bitsHashed / 0x100000000),\n        true\n      );\n      bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);\n\n      this.hashBuffer();\n\n      this.finished = true;\n    }\n\n    // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n    const out = new Uint8Array(DIGEST_LENGTH);\n    for (let i = 0; i < 8; i++) {\n      out[i * 4] = (this.state[i] >>> 24) & 0xff;\n      out[i * 4 + 1] = (this.state[i] >>> 16) & 0xff;\n      out[i * 4 + 2] = (this.state[i] >>> 8) & 0xff;\n      out[i * 4 + 3] = (this.state[i] >>> 0) & 0xff;\n    }\n\n    return out;\n  }\n\n  private hashBuffer(): void {\n    const { buffer, state } = this;\n\n    let state0 = state[0],\n      state1 = state[1],\n      state2 = state[2],\n      state3 = state[3],\n      state4 = state[4],\n      state5 = state[5],\n      state6 = state[6],\n      state7 = state[7];\n\n    for (let i = 0; i < BLOCK_SIZE; i++) {\n      if (i < 16) {\n        this.temp[i] =\n          ((buffer[i * 4] & 0xff) << 24) |\n          ((buffer[i * 4 + 1] & 0xff) << 16) |\n          ((buffer[i * 4 + 2] & 0xff) << 8) |\n          (buffer[i * 4 + 3] & 0xff);\n      } else {\n        let u = this.temp[i - 2];\n        const t1 =\n          ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);\n\n        u = this.temp[i - 15];\n        const t2 =\n          ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);\n\n        this.temp[i] =\n          ((t1 + this.temp[i - 7]) | 0) + ((t2 + this.temp[i - 16]) | 0);\n      }\n\n      const t1 =\n        ((((((state4 >>> 6) | (state4 << 26)) ^\n          ((state4 >>> 11) | (state4 << 21)) ^\n          ((state4 >>> 25) | (state4 << 7))) +\n          ((state4 & state5) ^ (~state4 & state6))) |\n          0) +\n          ((state7 + ((KEY[i] + this.temp[i]) | 0)) | 0)) |\n        0;\n\n      const t2 =\n        ((((state0 >>> 2) | (state0 << 30)) ^\n          ((state0 >>> 13) | (state0 << 19)) ^\n          ((state0 >>> 22) | (state0 << 10))) +\n          ((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |\n        0;\n\n      state7 = state6;\n      state6 = state5;\n      state5 = state4;\n      state4 = (state3 + t1) | 0;\n      state3 = state2;\n      state2 = state1;\n      state1 = state0;\n      state0 = (t1 + t2) | 0;\n    }\n\n    state[0] += state0;\n    state[1] += state1;\n    state[2] += state2;\n    state[3] += state3;\n    state[4] += state4;\n    state[5] += state5;\n    state[6] += state6;\n    state[7] += state7;\n  }\n}\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUtf8 = exports.fromUtf8 = void 0;\nconst fromUtf8 = (input) => {\n    const bytes = [];\n    for (let i = 0, len = input.length; i < len; i++) {\n        const value = input.charCodeAt(i);\n        if (value < 0x80) {\n            bytes.push(value);\n        }\n        else if (value < 0x800) {\n            bytes.push((value >> 6) | 0b11000000, (value & 0b111111) | 0b10000000);\n        }\n        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);\n            bytes.push((surrogatePair >> 18) | 0b11110000, ((surrogatePair >> 12) & 0b111111) | 0b10000000, ((surrogatePair >> 6) & 0b111111) | 0b10000000, (surrogatePair & 0b111111) | 0b10000000);\n        }\n        else {\n            bytes.push((value >> 12) | 0b11100000, ((value >> 6) & 0b111111) | 0b10000000, (value & 0b111111) | 0b10000000);\n        }\n    }\n    return Uint8Array.from(bytes);\n};\nexports.fromUtf8 = fromUtf8;\nconst toUtf8 = (input) => {\n    let decoded = \"\";\n    for (let i = 0, len = input.length; i < len; i++) {\n        const byte = input[i];\n        if (byte < 0x80) {\n            decoded += String.fromCharCode(byte);\n        }\n        else if (0b11000000 <= byte && byte < 0b11100000) {\n            const nextByte = input[++i];\n            decoded += String.fromCharCode(((byte & 0b11111) << 6) | (nextByte & 0b111111));\n        }\n        else if (0b11110000 <= byte && byte < 0b101101101) {\n            const surrogatePair = [byte, input[++i], input[++i], input[++i]];\n            const encoded = \"%\" + surrogatePair.map((byteValue) => byteValue.toString(16)).join(\"%\");\n            decoded += decodeURIComponent(encoded);\n        }\n        else {\n            decoded += String.fromCharCode(((byte & 0b1111) << 12) | ((input[++i] & 0b111111) << 6) | (input[++i] & 0b111111));\n        }\n    }\n    return decoded;\n};\nexports.toUtf8 = toUtf8;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUtf8 = exports.fromUtf8 = void 0;\nfunction fromUtf8(input) {\n    return new TextEncoder().encode(input);\n}\nexports.fromUtf8 = fromUtf8;\nfunction toUtf8(input) {\n    return new TextDecoder(\"utf-8\").decode(input);\n}\nexports.toUtf8 = toUtf8;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toUtf8 = exports.fromUtf8 = void 0;\nconst pureJs_1 = require(\"./pureJs\");\nconst whatwgEncodingApi_1 = require(\"./whatwgEncodingApi\");\nconst fromUtf8 = (input) => typeof TextEncoder === \"function\" ? (0, whatwgEncodingApi_1.fromUtf8)(input) : (0, pureJs_1.fromUtf8)(input);\nexports.fromUtf8 = fromUtf8;\nconst toUtf8 = (input) => typeof TextDecoder === \"function\" ? (0, whatwgEncodingApi_1.toUtf8)(input) : (0, pureJs_1.toUtf8)(input);\nexports.toUtf8 = toUtf8;\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SourceData } from \"@aws-sdk/types\";\nimport { fromUtf8 as fromUtf8Browser } from \"@aws-sdk/util-utf8-browser\";\n\n// Quick polyfill\nconst fromUtf8 =\n  typeof Buffer !== \"undefined\" && Buffer.from\n    ? (input: string) => Buffer.from(input, \"utf8\")\n    : fromUtf8Browser;\n\nexport function convertToBuffer(data: SourceData): Uint8Array {\n  // Already a Uint8, do nothing\n  if (data instanceof Uint8Array) return data;\n\n  if (typeof data === \"string\") {\n    return fromUtf8(data);\n  }\n\n  if (ArrayBuffer.isView(data)) {\n    return new Uint8Array(\n      data.buffer,\n      data.byteOffset,\n      data.byteLength / Uint8Array.BYTES_PER_ELEMENT\n    );\n  }\n\n  return new Uint8Array(data);\n}\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SourceData } from \"@aws-sdk/types\";\n\nexport function isEmptyData(data: SourceData): boolean {\n  if (typeof data === \"string\") {\n    return data.length === 0;\n  }\n\n  return data.byteLength === 0;\n}\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport function numToUint8(num: number) {\n  return new Uint8Array([\n    (num & 0xff000000) >> 24,\n    (num & 0x00ff0000) >> 16,\n    (num & 0x0000ff00) >> 8,\n    num & 0x000000ff,\n  ]);\n}\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// IE 11 does not support Array.from, so we do it manually\nexport function uint32ArrayFrom(a_lookUpTable: Array<number>): Uint32Array {\n  if (!Uint32Array.from) {\n    const return_array = new Uint32Array(a_lookUpTable.length)\n    let a_index = 0\n    while (a_index < a_lookUpTable.length) {\n      return_array[a_index] = a_lookUpTable[a_index]\n      a_index += 1\n    }\n    return return_array\n  }\n  return Uint32Array.from(a_lookUpTable)\n}\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nexport { convertToBuffer } from \"./convertToBuffer\";\nexport { isEmptyData } from \"./isEmptyData\";\nexport { numToUint8 } from \"./numToUint8\";\nexport {uint32ArrayFrom} from './uint32ArrayFrom';\n", "import { BLOCK_SIZE } from \"./constants\";\nimport { RawSha256 } from \"./RawSha256\";\nimport { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\n\nexport class Sha256 implements Hash {\n  private readonly hash = new RawSha256();\n  private readonly outer?: RawSha256;\n  private error: any;\n\n  constructor(secret?: SourceData) {\n    if (secret) {\n      this.outer = new RawSha256();\n      const inner = bufferFromSecret(secret);\n      const outer = new Uint8Array(BLOCK_SIZE);\n      outer.set(inner);\n\n      for (let i = 0; i < BLOCK_SIZE; i++) {\n        inner[i] ^= 0x36;\n        outer[i] ^= 0x5c;\n      }\n\n      this.hash.update(inner);\n      this.outer.update(outer);\n\n      // overwrite the copied key in memory\n      for (let i = 0; i < inner.byteLength; i++) {\n        inner[i] = 0;\n      }\n    }\n  }\n\n  update(toHash: SourceData): void {\n    if (isEmptyData(toHash) || this.error) {\n      return;\n    }\n\n    try {\n      this.hash.update(convertToBuffer(toHash));\n    } catch (e) {\n      this.error = e;\n    }\n  }\n\n  /* This synchronous method keeps compatibility\n   * with the v2 aws-sdk.\n   */\n  digestSync(): Uint8Array {\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (this.outer) {\n      if (!this.outer.finished) {\n        this.outer.update(this.hash.digest());\n      }\n\n      return this.outer.digest();\n    }\n\n    return this.hash.digest();\n  }\n\n  /* The underlying digest method here is synchronous.\n   * To keep the same interface with the other hash functions\n   * the default is to expose this as an async method.\n   * However, it can sometimes be useful to have a sync method.\n   */\n  async digest(): Promise<Uint8Array> {\n    return this.digestSync();\n  }\n}\n\nfunction bufferFromSecret(secret: SourceData): Uint8Array {\n  let input = convertToBuffer(secret);\n\n  if (input.byteLength > BLOCK_SIZE) {\n    const bufferHash = new RawSha256();\n    bufferHash.update(input);\n    input = bufferHash.digest();\n  }\n\n  const buffer = new Uint8Array(BLOCK_SIZE);\n  buffer.set(input);\n  return buffer;\n}\n", "export * from \"./jsSha256\";\n", "import type { FaustModuleFactory } from \"./types\";\n\n/**\n * Load libfaust-wasm files, than instantiate libFaust\n * @param jsFile path to `libfaust-wasm.js`\n * @param dataFile path to `libfaust-wasm.data`\n * @param wasmFile path to `libfaust-wasm.wasm`\n */\nconst instantiateFaustModuleFromFile = async (jsFile: string, dataFile = jsFile.replace(/c?js$/, \"data\"), wasmFile = jsFile.replace(/c?js$/, \"wasm\")) => {\n    let FaustModule: FaustModuleFactory;\n    let dataBinary: ArrayBuffer;\n    let wasmBinary: Uint8Array | ArrayBuffer;\n    const jsCodeHead = /var (.+) = \\(\\(\\) => \\{/;\n    if (typeof globalThis.fetch === \"function\") {\n        let jsCode = await (await fetch(jsFile)).text();\n        jsCode = `${jsCode}\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = URL.createObjectURL(new Blob([jsCode], { type: \"text/javascript\" }));\n        FaustModule = (await import(/* webpackIgnore: true */jsFileMod)).default;\n        dataBinary = await (await fetch(dataFile)).arrayBuffer();\n        wasmBinary = new Uint8Array(await (await fetch(wasmFile)).arrayBuffer());\n    } else {\n        const { promises: fs } = await import(\"fs\");\n        const { pathToFileURL } = await import(\"url\");\n        let jsCode = (await fs.readFile(jsFile, { encoding: \"utf-8\" }));\n        jsCode = `\nimport process from \"process\";\nimport * as path from \"path\";\nimport { createRequire } from \"module\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nconst __filename = fileURLToPath(import.meta.url);\nconst require = createRequire(import.meta.url);\n\n${jsCode}\n\nexport default ${jsCode.match(jsCodeHead)?.[1]};\n`;\n        const jsFileMod = jsFile.replace(/c?js$/, \"mjs\");\n        await fs.writeFile(jsFileMod, jsCode);\n        FaustModule = (await import(/* webpackIgnore: true */pathToFileURL(jsFileMod).href)).default;\n        await fs.unlink(jsFileMod);\n        dataBinary = (await fs.readFile(dataFile)).buffer;\n        wasmBinary = (await fs.readFile(wasmFile)).buffer;\n    }\n    const faustModule = await FaustModule({\n        wasmBinary,\n        getPreloadedPackage: (remotePackageName: string, remotePackageSize: number) => {\n            if (remotePackageName === \"libfaust-wasm.data\") return dataBinary;\n            return new ArrayBuffer(0);\n        }});\n    return faustModule;\n};\n\nexport default instantiateFaustModuleFromFile;\n", "import type FaustWasmInstantiator from \"./FaustWasmInstantiator\";\nimport type { FaustBaseWebAudioDsp, FaustWebAudioDspVoice, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp } from \"./FaustWebAudioDsp\";\nimport type { AudioParamDescriptor, AudioWorkletGlobalScope, LooseFaustDspFactory, FaustDspMeta, FaustUIItem, AudioWorkletProcessor } from \"./types\";\n\n/**\n * Injected in the string to be compiled on AudioWorkletProcessor side\n */\nexport interface FaustData {\n    processorName: string;\n    dspName: string;\n    dspMeta: FaustDspMeta;\n    poly: boolean;\n    effectMeta?: FaustDspMeta;\n};\nexport interface FaustAudioWorkletProcessorDependencies<Poly extends boolean = false> {\n    FaustBaseWebAudioDsp: typeof FaustBaseWebAudioDsp;\n    FaustMonoWebAudioDsp: Poly extends true ? undefined : typeof FaustMonoWebAudioDsp;\n    FaustPolyWebAudioDsp: Poly extends true ? typeof FaustPolyWebAudioDsp : undefined;\n    FaustWebAudioDspVoice: Poly extends true ? typeof FaustWebAudioDspVoice : undefined;\n    FaustWasmInstantiator: typeof FaustWasmInstantiator;\n}\nexport interface FaustAudioWorkletNodeOptions<Poly extends boolean = false> extends AudioWorkletNodeOptions {\n    processorOptions: Poly extends true ? FaustPolyAudioWorkletProcessorOptions : FaustMonoAudioWorkletProcessorOptions;\n}\n\nexport interface FaustMonoAudioWorkletNodeOptions extends AudioWorkletNodeOptions {\n    processorOptions: FaustMonoAudioWorkletProcessorOptions;\n}\n\nexport interface FaustPolyAudioWorkletNodeOptions extends AudioWorkletNodeOptions {\n    processorOptions: FaustPolyAudioWorkletProcessorOptions;\n}\n\nexport interface FaustAudioWorkletProcessorOptions {\n    name: string;\n    sampleSize: number;\n}\nexport interface FaustMonoAudioWorkletProcessorOptions extends FaustAudioWorkletProcessorOptions {\n    factory: LooseFaustDspFactory;\n}\nexport interface FaustPolyAudioWorkletProcessorOptions extends FaustAudioWorkletProcessorOptions {\n    voiceFactory: LooseFaustDspFactory;\n    mixerModule: WebAssembly.Module;\n    voices: number;\n    effectFactory?: LooseFaustDspFactory;\n}\n\n\n// Dynamic AudioWorkletProcessor code generator\nconst getFaustAudioWorkletProcessor = <Poly extends boolean = false>(dependencies: FaustAudioWorkletProcessorDependencies<Poly>, faustData: FaustData, register = true): typeof AudioWorkletProcessor => {\n    const { registerProcessor, AudioWorkletProcessor, sampleRate } = globalThis as unknown as AudioWorkletGlobalScope;\n\n    const {\n        FaustBaseWebAudioDsp,\n        FaustWasmInstantiator\n    } = dependencies;\n    \n    const {\n        processorName,\n        dspName,\n        dspMeta,\n        effectMeta,\n        poly\n    } = faustData;\n\n    // Analyse voice JSON to generate AudioParam parameters\n    const analysePolyParameters = (item: FaustUIItem): AudioParamDescriptor | null => {\n        if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\n            if (!poly || (\n                !item.address.endsWith(\"/gate\") &&\n                !item.address.endsWith(\"/freq\") &&\n                !item.address.endsWith(\"/gain\") &&\n                !item.address.endsWith(\"/key\") &&\n                !item.address.endsWith(\"/vel\") &&\n                !item.address.endsWith(\"/velocity\")\n            )) {\n                return { name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 };\n            }\n        } else if (item.type === \"button\" || item.type === \"checkbox\") {\n            if (!poly || (\n                !item.address.endsWith(\"/gate\") &&\n                !item.address.endsWith(\"/freq\") &&\n                !item.address.endsWith(\"/gain\") &&\n                !item.address.endsWith(\"/key\") &&\n                !item.address.endsWith(\"/vel\") &&\n                !item.address.endsWith(\"/velocity\")\n            )) {\n                return { name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 };\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Base class for Monophonic and Polyphonic AudioWorkletProcessor\n     */\n    class FaustAudioWorkletProcessor<Poly extends boolean = false> extends AudioWorkletProcessor {\n\n        // Use ! syntax when the field is not defined in the constructor\n        protected fDSPCode!: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp;\n\n        protected paramValuesCache: Record<string, number> = {};\n\n        constructor(options: FaustAudioWorkletNodeOptions<Poly>) {\n            super(options);\n\n            // Setup port message handling\n            this.port.onmessage = (e: MessageEvent) => this.handleMessageAux(e);\n            \n            const { parameterDescriptors } = (this.constructor as typeof AudioWorkletProcessor);\n            parameterDescriptors.forEach((pd) => {\n                this.paramValuesCache[pd.name] = pd.defaultValue || 0;\n            })\n        }\n\n        static get parameterDescriptors() {\n            const params = [] as AudioParamDescriptor[];\n            // Analyse voice JSON to generate AudioParam parameters\n            const callback = (item: FaustUIItem) => {\n                const param = analysePolyParameters(item);\n                if (param) params.push(param);\n            }\n            FaustBaseWebAudioDsp.parseUI(dspMeta.ui, callback);\n            // Analyse effect JSON to generate AudioParam parameters\n            if (effectMeta) FaustBaseWebAudioDsp.parseUI(effectMeta.ui, callback);\n            return params;\n        }\n\n        process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: { [key: string]: Float32Array }) {\n\n            // Update controls (possibly needed for sample accurate control)\n            for (const path in parameters) {\n                const [paramValue] = parameters[path];\n                if (paramValue !== this.paramValuesCache[path]) {\n                    this.fDSPCode.setParamValue(path, paramValue);\n                    this.paramValuesCache[path] = paramValue;\n                }\n            }\n\n            return this.fDSPCode.compute(inputs[0], outputs[0]);\n        }\n\n        protected handleMessageAux(e: MessageEvent) { // use arrow function for binding\n            const msg = e.data;\n\n            switch (msg.type) {\n                // Generic MIDI message\n                case \"midi\": this.midiMessage(msg.data); break;\n                // Typed MIDI message\n                case \"ctrlChange\": this.ctrlChange(msg.data[0], msg.data[1], msg.data[2]); break;\n                case \"pitchWheel\": this.pitchWheel(msg.data[0], msg.data[1]); break;\n                // Generic data message\n                case \"param\": this.setParamValue(msg.data.path, msg.data.value); break;\n                // Plot handler set on demand\n                case \"setPlotHandler\": {\n                    if (msg.data) {\n                        this.fDSPCode.setPlotHandler((output, index, events) => this.port.postMessage({ type: \"plot\", value: output, index: index, events: events }));\n                    } else {\n                        this.fDSPCode.setPlotHandler(null);\n                    }\n                    break;\n                }\n\n                case \"start\": {\n                    this.fDSPCode.start();\n                    break;\n                }\n\n                case \"stop\": {\n                    this.fDSPCode.stop();\n                    break;\n                }\n\n                case \"destroy\": {\n                    this.port.close();\n                    this.fDSPCode.destroy();\n                    break;\n                }\n                default:\n                    break;\n            }\n        }\n\n        protected setParamValue(path: string, value: number) {\n            this.fDSPCode.setParamValue(path, value);\n            this.paramValuesCache[path] = value;\n        }\n\n        protected midiMessage(data: number[] | Uint8Array) {\n            this.fDSPCode.midiMessage(data);\n        }\n\n        protected ctrlChange(channel: number, ctrl: number, value: number) {\n            this.fDSPCode.ctrlChange(channel, ctrl, value);\n        }\n\n        protected pitchWheel(channel: number, wheel: number) {\n            this.fDSPCode.pitchWheel(channel, wheel);\n        }\n    }\n\n    /**\n     * Monophonic AudioWorkletProcessor\n     */\n    class FaustMonoAudioWorkletProcessor extends FaustAudioWorkletProcessor<false> {\n\n        constructor(options: FaustAudioWorkletNodeOptions) {\n            super(options);\n            const { FaustMonoWebAudioDsp } = dependencies as FaustAudioWorkletProcessorDependencies<false>;\n            const { factory, sampleSize } = options.processorOptions;\n\n            const instance = FaustWasmInstantiator.createSyncMonoDSPInstance(factory);\n            // Create Monophonic DSP\n            this.fDSPCode = new FaustMonoWebAudioDsp(instance, sampleRate, sampleSize, 128);\n\n            // Setup output handler\n            this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n\n            this.fDSPCode.start();\n        }\n    }\n\n    /**\n     * Polyphonic AudioWorkletProcessor\n     */\n    class FaustPolyAudioWorkletProcessor extends FaustAudioWorkletProcessor<true> {\n\n        constructor(options: FaustPolyAudioWorkletNodeOptions) {\n            super(options);\n            const { FaustPolyWebAudioDsp } = dependencies as FaustAudioWorkletProcessorDependencies<true>;\n\n            const { voiceFactory, mixerModule, voices, effectFactory, sampleSize } = options.processorOptions;\n\n            const instance = FaustWasmInstantiator.createSyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory);\n            // Create Polyphonic DSP\n            this.fDSPCode = new FaustPolyWebAudioDsp(instance, sampleRate, sampleSize, 128);\n\n            // Setup port message handling\n            this.port.onmessage = (e: MessageEvent) => this.handleMessageAux(e);\n\n            // Setup output handler\n            this.fDSPCode.setOutputParamHandler((path, value) => this.port.postMessage({ path, value, type: \"param\" }));\n\n            this.fDSPCode.start();\n        }\n\n        protected midiMessage(data: number[] | Uint8Array) {\n            const cmd = data[0] >> 4;\n            const channel = data[0] & 0xf;\n            const data1 = data[1];\n            const data2 = data[2];\n            if (cmd === 8 || (cmd === 9 && data2 === 0)) this.keyOff(channel, data1, data2);\n            else if (cmd === 9) this.keyOn(channel, data1, data2);\n            else super.midiMessage(data);\n        }\n\n        protected handleMessageAux = (e: MessageEvent) => { // use arrow function for binding\n            const msg = e.data;\n            switch (msg.type) {\n                case \"keyOn\": this.keyOn(msg.data[0], msg.data[1], msg.data[2]); break;\n                case \"keyOff\": this.keyOff(msg.data[0], msg.data[1], msg.data[2]); break;\n                default:\n                    super.handleMessageAux(e);\n                    break;\n            }\n        }\n\n        // Public API\n        keyOn(channel: number, pitch: number, velocity: number) {\n            this.fDSPCode.keyOn(channel, pitch, velocity);\n        }\n\n        keyOff(channel: number, pitch: number, velocity: number) {\n            this.fDSPCode.keyOff(channel, pitch, velocity);\n        }\n\n        allNotesOff(hard: boolean) {\n            this.fDSPCode.allNotesOff(hard);\n        }\n    }\n\n    const Processor = poly ? FaustPolyAudioWorkletProcessor : FaustMonoAudioWorkletProcessor;\n    if (register) {\n        try {\n            registerProcessor(processorName || dspName || (poly ? \"mydsp_poly\" : \"mydsp\"), Processor);\n        } catch (error) {\n            console.warn(error);\n        }\n    }\n\n    return poly ? FaustPolyAudioWorkletProcessor : FaustMonoAudioWorkletProcessor;\n}\n\nexport default getFaustAudioWorkletProcessor;\n", "import { Sha256 } from \"@aws-crypto/sha256-js\";\nimport type { ILibFaust } from \"./LibFaust\";\nimport type { FaustDspFactory, IntVector } from \"./types\";\n\nexport const ab2str = (buf: Uint8Array) => String.fromCharCode.apply(null, buf);\n\nexport const str2ab = (str: string) => {\n    const buf = new ArrayBuffer(str.length);\n    const bufView = new Uint8Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n        bufView[i] = str.charCodeAt(i);\n    }\n    return bufView;\n};\nconst sha256 = async (str: string) => {\n    const sha256 = new Sha256();\n    sha256.update(str);\n    const hashArray = Array.from(await sha256.digest());\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, \"0\")).join(\"\");\n    return hashHex;\n};\n\nexport interface IFaustCompiler {\n    /**\n     * Gives the Faust compiler version.\n     * @return a version string\n     */\n    version(): string;\n\n    /**\n     * Gives the last compilation error.\n     * @return an error string\n     */\n    getErrorMessage(): string;\n\n    /**\n     * Create a wasm factory from Faust code i.e. wasm compiled code, to be used to create monophonic instances. \n     * This function is running asynchronously.\n     *\n     * @param name - an arbitrary name for the Faust factory\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns returns the wasm factory\n     */\n    createMonoDSPFactory(name: string, code: string, args: string): Promise<FaustDspFactory | null>;\n\n    /**\n     * Create a wasm factory from Faust code i.e. wasm compiled code, to be used to create polyphonic instances. \n     * This function is running asynchronously.\n     *\n     * @param name - an arbitrary name for the Faust factory\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns returns the wasm factory\n     */\n    createPolyDSPFactory(name: string, code: string, args: string): Promise<FaustDspFactory | null>;\n\n    /**\n     * Delete a dsp factory.\n     *\n     * @param factory - the factory to be deleted\n     */\n    deleteDSPFactory(factory: FaustDspFactory): void;\n\n    /**\n     * Expand Faust code i.e. linearize included libraries.\n     *\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns returns the expanded dsp code\n     */\n    expandDSP(code: string, args: string): string | null;\n\n    /**\n     * Generates auxiliary files from Faust code. The output depends on the compiler options.\n     *\n     * @param name - an arbitrary name for the Faust module\n     * @param code - Faust dsp code\n     * @param args - the compiler options\n     * @returns whether the generation actually succeded\n     */\n    generateAuxFiles(name: string, code: string, args: string): boolean;\n\n    /**\n     * Delete all factories.\n     */\n    deleteAllDSPFactories(): void;\n\n    fs(): typeof FS;\n\n    getAsyncInternalMixerModule(isDouble?: boolean): Promise<{ mixerBuffer: Uint8Array; mixerModule: WebAssembly.Module }>;\n    getSyncInternalMixerModule(isDouble?: boolean): { mixerBuffer: Uint8Array; mixerModule: WebAssembly.Module };\n}\n\nclass FaustCompiler implements IFaustCompiler {\n    private fLibFaust: ILibFaust;\n    private fErrorMessage: string;\n    private static gFactories: Map<string, FaustDspFactory> = new Map<string, FaustDspFactory>();\n    private mixer32Buffer!: Uint8Array;\n    private mixer64Buffer!: Uint8Array;\n    private mixer32Module!: WebAssembly.Module;\n    private mixer64Module!: WebAssembly.Module;\n\n    /**\n     * Get a stringified DSP factories table\n     */\n    static serializeDSPFactories() {\n        const table: Record<string, { code: string, json: any; poly: boolean }> = {};\n        this.gFactories.forEach((factory, shaKey) => {\n            const { code, json, poly } = factory;\n            table[shaKey] = { code: btoa(ab2str(code)), json: JSON.parse(json), poly };\n        });\n        return table;\n    }\n    /**\n     * Get a stringified DSP factories table as string\n     */\n    static stringifyDSPFactories() {\n        return JSON.stringify(this.serializeDSPFactories());\n    }\n    /**\n     * Import a DSP factories table\n     */\n    static deserializeDSPFactories(table: Record<string, { code: string, json: any; poly: boolean }>) {\n        const awaited: Promise<Map<string, FaustDspFactory>>[] = [];\n        for (const shaKey in table) {\n            const factory = table[shaKey];\n            const { code, json, poly } = factory;\n            const ab = str2ab(atob(code))\n            awaited.push(WebAssembly.compile(ab).then(module => this.gFactories.set(shaKey, { shaKey, cfactory: 0, code: ab, module, json: JSON.stringify(json), poly })));\n        }\n        return Promise.all(awaited);\n    }\n    /**\n     * Import a stringified DSP factories table\n     */\n    static importDSPFactories(tableStr: string) {\n        const table: Record<string, { code: string, json: any; poly: boolean }> = JSON.parse(tableStr);\n        return this.deserializeDSPFactories(table);\n    }\n    constructor(libFaust: ILibFaust) {\n        this.fLibFaust = libFaust;\n        this.fErrorMessage = \"\";\n    }\n    private intVec2intArray(vec: IntVector) {\n        const size = vec.size();\n        const ui8Code = new Uint8Array(size);\n        for (let i = 0; i < size; i++) {\n            ui8Code[i] = vec.get(i);\n        }\n        return ui8Code;\n    }\n    private async createDSPFactory(name: string, code: string, args: string, poly: boolean) {\n        // Cleanup the cache\n        if (FaustCompiler.gFactories.size > 10) {\n            FaustCompiler.gFactories.clear();\n        }\n\n        // If code is already compiled, return the cached factory\n        let shaKey = await sha256(name + code + args + (poly ? \"poly\" : \"mono\"));\n        if (FaustCompiler.gFactories.has(shaKey)) {\n            return FaustCompiler.gFactories.get(shaKey) || null;\n        } else {\n            try {\n                // Can possibly raise a C++ exception catched by the second catch()\n                const faustDspWasm = this.fLibFaust.createDSPFactory(name, code, args, !poly);\n                const ui8Code = this.intVec2intArray(faustDspWasm.data);\n                faustDspWasm.data.delete();\n                const module = await WebAssembly.compile(ui8Code);\n                const factory: FaustDspFactory = { shaKey, cfactory: faustDspWasm.cfactory, code: ui8Code, module, json: faustDspWasm.json, poly };\n                // Factory C++ side can be deallocated immediately\n                this.deleteDSPFactory(factory);\n                // Keep the compiled factory in the cache\n                FaustCompiler.gFactories.set(shaKey, factory);\n                return factory;\n            } catch (e) {\n                this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n                // console.error(`=> exception raised while running createDSPFactory: ${this.fErrorMessage}`, e);\n                this.fLibFaust.cleanupAfterException();\n                throw this.fErrorMessage ? new Error(this.fErrorMessage) : e;\n            }\n        }\n    }\n    version() {\n        return this.fLibFaust.version();\n    }\n    getErrorMessage() {\n        return this.fErrorMessage;\n    }\n    async createMonoDSPFactory(name: string, code: string, args: string) {\n        return this.createDSPFactory(name, code, args, false);\n    }\n    async createPolyDSPFactory(name: string, code: string, args: string) {\n        return this.createDSPFactory(name, code, args, true);\n    }\n    deleteDSPFactory(factory: FaustDspFactory) {\n        this.fLibFaust.deleteDSPFactory(factory.cfactory);\n        factory.cfactory = 0;\n    }\n    expandDSP(code: string, args: string) {\n        try {\n            return this.fLibFaust.expandDSP(\"FaustDSP\", code, args);\n        } catch (e) {\n            this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n            // console.error(`=> exception raised while running expandDSP: ${this.fErrorMessage}`);\n            this.fLibFaust.cleanupAfterException();\n            throw this.fErrorMessage ? new Error(this.fErrorMessage) : e;\n        }\n    }\n    generateAuxFiles(name: string, code: string, args: string) {\n        try {\n            return this.fLibFaust.generateAuxFiles(name, code, args);\n        } catch (e) {\n            this.fErrorMessage = this.fLibFaust.getErrorAfterException();\n            // console.error(`=> exception raised while running generateAuxFiles: ${this.fErrorMessage}`);\n            this.fLibFaust.cleanupAfterException();\n            throw this.fErrorMessage ? new Error(this.fErrorMessage) : e;\n        }\n    }\n    deleteAllDSPFactories(): void {\n        this.fLibFaust.deleteAllDSPFactories();\n    }\n    fs() {\n        return this.fLibFaust.fs();\n    }\n    async getAsyncInternalMixerModule(isDouble = false) {\n        const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n        const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n        if (this[moduleKey]) return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n        const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n        const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n        this[bufferKey] = mixerBuffer;\n        // Compile mixer\n        const mixerModule = await WebAssembly.compile(mixerBuffer);\n        this[moduleKey] = mixerModule;\n        return { mixerBuffer, mixerModule };\n    }\n    getSyncInternalMixerModule(isDouble = false) {\n        const bufferKey = isDouble ? \"mixer64Buffer\" : \"mixer32Buffer\";\n        const moduleKey = isDouble ? \"mixer64Module\" : \"mixer32Module\";\n        if (this[moduleKey]) return { mixerBuffer: this[bufferKey], mixerModule: this[moduleKey] };\n        const path = isDouble ? \"/usr/rsrc/mixer64.wasm\" : \"/usr/rsrc/mixer32.wasm\";\n        const mixerBuffer = this.fs().readFile(path, { encoding: \"binary\" });\n        this[bufferKey] = mixerBuffer;\n        // Compile mixer\n        const mixerModule = new WebAssembly.Module(mixerBuffer);\n        this[moduleKey] = mixerModule;\n        return { mixerBuffer, mixerModule };\n    }\n}\n\nexport default FaustCompiler;\n", "/**\n * The Faust wasm instance interface.\n */\nexport interface IFaustDspInstance {\n    /**\n     * The dsp computation, to be called with successive input/output audio buffers.\n     *\n     * @param $dsp - the DSP pointer\n     * @param count - the audio buffer size in frames\n     * @param $inputs - the input audio buffer as in index in wasm memory\n     * @param $output - the output audio buffer as in index in wasm memory\n     */\n    compute($dsp: number, count: number, $inputs: number, $output: number): void;\n\n    /**\n     * Give the number of inputs of a Faust wasm instance.\n     * \n     * @param $dsp - the DSP pointer\n     */\n    getNumInputs($dsp: number): number;\n\n    /**\n     * Give the number of outputs of a Faust wasm instance.\n     * \n     * @param $dsp - the DSP pointer\n     */\n    getNumOutputs($dsp: number): number;\n\n    /**\n     * Give a parameter current value.\n     * \n     * @param $dsp - the DSP pointer\n     * @param index - the parameter index\n     * @preturn the parameter value\n     */\n    getParamValue($dsp: number, index: number): number;\n\n    /**\n     * Give the Faust wasm instance sample rate.\n     * \n     * @param $dsp - the DSP pointer\n     * @preturn the sample rate\n     */\n    getSampleRate($dsp: number): number;\n\n    /**\n     * Global init, calls the following methods:\n     * - static class 'classInit': static tables initialization\n     * - 'instanceInit': constants and instance state initialization\n     *\n     * @param $dsp - the DSP pointer\n     * @param sampleRate - the sampling rate in Hertz\n     */\n    init($dsp: number, sampleRate: number): void;\n\n    /** Init instance state (delay lines...).\n     * \n     * @param $dsp - the DSP pointer\n     */\n    instanceClear($dsp: number): void;\n\n    /** Init instance constant state.\n     * \n     * @param $dsp - the DSP pointer\n     * @param sampleRate - the sampling rate in Hertz\n     */\n    instanceConstants($dsp: number, sampleRate: number): void;\n\n    /** Init instance state.\n     * \n     * @param $dsp - the DSP pointer\n     * @param sampleRate - the sampling rate in Hertz\n     */\n    instanceInit($dsp: number, sampleRate: number): void;\n\n    /** Init default control parameters values.\n     * \n     * @param $dsp - the DSP pointer\n     */\n    instanceResetUserInterface($dsp: number): void;\n\n    /**\n     * Set a parameter current value.\n     * \n     * @param $dsp - the DSP pointer\n     * @param index - the parameter index\n     * @param value - the parameter value\n     */\n    setParamValue($dsp: number, index: number, value: number): void;\n}\n\n/**\n * Mixer used in polyphonic mode.\n */\nexport interface IFaustMixerInstance {\n    clearOutput(bufferSize: number, chans: number, $outputs: number): void;\n    mixCheckVoice(bufferSize: number, chans: number, $inputs: number, $outputs: number): number;\n    fadeOut(bufferSize: number, chans: number, $outputs: number): void;\n}\n\n/**\n * Monophonic instance.\n */\nexport interface FaustMonoDspInstance {\n    memory: WebAssembly.Memory;\n    api: IFaustDspInstance;\n    json: string;\n}\n\n/**\n * Polyphonic instance.\n */\nexport interface FaustPolyDspInstance {\n    memory: WebAssembly.Memory;\n    voices: number;\n    voiceAPI: IFaustDspInstance;\n    effectAPI?: IFaustDspInstance;\n    mixerAPI: IFaustMixerInstance;\n    voiceJSON: string;\n    effectJSON?: string;\n}\n\nclass FaustDspInstance implements IFaustDspInstance {\n    private readonly fExports: IFaustDspInstance;\n\n    constructor(exports: IFaustDspInstance) { this.fExports = exports; }\n\n    compute($dsp: number, count: number, $input: number, $output: number) { this.fExports.compute($dsp, count, $input, $output); }\n    getNumInputs($dsp: number) { return this.fExports.getNumInputs($dsp); }\n    getNumOutputs($dsp: number) { return this.fExports.getNumOutputs($dsp); }\n    getParamValue($dsp: number, index: number) { return this.fExports.getParamValue($dsp, index); }\n    getSampleRate($dsp: number) { return this.fExports.getSampleRate($dsp); }\n    init($dsp: number, sampleRate: number) { this.fExports.init($dsp, sampleRate); }\n    instanceClear($dsp: number) { this.fExports.instanceClear($dsp); }\n    instanceConstants($dsp: number, sampleRate: number) { this.fExports.instanceConstants($dsp, sampleRate); }\n    instanceInit($dsp: number, sampleRate: number) { this.fExports.instanceInit($dsp, sampleRate); }\n    instanceResetUserInterface($dsp: number) { this.fExports.instanceResetUserInterface($dsp); }\n    setParamValue($dsp: number, index: number, value: number) { this.fExports.setParamValue($dsp, index, value); }\n}\n\nexport default FaustDspInstance;\n", "import FaustDspInstance, { FaustMonoDspInstance, FaustPolyDspInstance, IFaustDspInstance, IFaustMixerInstance } from \"./FaustDspInstance\";\nimport type { FaustDspFactory, FaustDspMeta, LooseFaustDspFactory } from \"./types\";\n\nclass FaustWasmInstantiator {\n    private static createWasmImport(memory?: WebAssembly.Memory) {\n        return {\n            env: {\n                memory: memory || new WebAssembly.Memory({ initial: 100 }),\n                memoryBase: 0,\n                tableBase: 0,\n                // Integer version\n                _abs: Math.abs,\n                // Float version\n                _acosf: Math.acos, _asinf: Math.asin, _atanf: Math.atan, _atan2f: Math.atan2,\n                _ceilf: Math.ceil, _cosf: Math.cos, _expf: Math.exp, _floorf: Math.floor,\n                _fmodf: (x: number, y: number) => x % y,\n                _logf: Math.log, _log10f: Math.log10, _max_f: Math.max, _min_f: Math.min,\n                _remainderf: (x: number, y: number) => x - Math.round(x / y) * y,\n                _powf: Math.pow, _roundf: Math.fround, _sinf: Math.sin, _sqrtf: Math.sqrt, _tanf: Math.tan,\n                _acoshf: Math.acosh, _asinhf: Math.asinh, _atanhf: Math.atanh,\n                _coshf: Math.cosh, _sinhf: Math.sinh, _tanhf: Math.tanh,\n                _isnanf: Number.isNaN, _isinff: (x: number) => !isFinite(x),\n                _copysignf: (x: number, y: number) => (Math.sign(x) === Math.sign(y) ? x : -x),\n        \n                // Double version\n                _acos: Math.acos, _asin: Math.asin, _atan: Math.atan, _atan2: Math.atan2,\n                _ceil: Math.ceil, _cos: Math.cos, _exp: Math.exp, _floor: Math.floor,\n                _fmod: (x: number, y: number) => x % y,\n                _log: Math.log, _log10: Math.log10, _max_: Math.max, _min_: Math.min,\n                _remainder: (x: number, y: number) => x - Math.round(x / y) * y,\n                _pow: Math.pow, _round: Math.fround, _sin: Math.sin, _sqrt: Math.sqrt, _tan: Math.tan,\n                _acosh: Math.acosh, _asinh: Math.asinh, _atanh: Math.atanh,\n                _cosh: Math.cosh, _sinh: Math.sinh, _tanh: Math.tanh,\n                _isnan: Number.isNaN, _isinf: (x: number) => !isFinite(x),\n                _copysign: (x: number, y: number) => (Math.sign(x) === Math.sign(y) ? x : -x),\n        \n                table: new WebAssembly.Table({ initial: 0, element: \"anyfunc\" })\n            }\n        };\n    }\n    private static createWasmMemory(voicesIn: number, sampleSize: number, dspMeta: FaustDspMeta, effectMeta: FaustDspMeta, bufferSize: number) {\n        // Hack : at least 4 voices (to avoid weird wasm memory bug?)\n        const voices = Math.max(4, voicesIn);\n        // Memory allocator\n        const ptrSize = sampleSize; // Done on wast/wasm backend side\n        const pow2limit = (x: number) => {\n            let n = 65536; // Minimum = 64 kB\n            while (n < x) { n *= 2; }\n            return n;\n        };\n        const effectSize = effectMeta ? effectMeta.size : 0;\n        let memorySize = pow2limit(\n            effectSize\n            + dspMeta.size * voices\n            + (dspMeta.inputs + dspMeta.outputs * 2)\n            * (ptrSize + bufferSize * sampleSize)\n        ) / 65536;\n        memorySize = Math.max(2, memorySize); // At least 2\n        return new WebAssembly.Memory({ initial: memorySize, maximum: memorySize });\n    };\n    private static createMonoDSPInstanceAux(instance: WebAssembly.Instance, json: string) {\n        const functions = instance.exports as IFaustDspInstance & WebAssembly.Exports;\n        const api = new FaustDspInstance(functions);\n        const memory: any = instance.exports.memory;\n        return { memory, api, json } as FaustMonoDspInstance;\n    }\n    private static createMemoryAux(voices: number, voiceFactory: LooseFaustDspFactory, effectFactory?: LooseFaustDspFactory) {\n        // Parse JSON to get 'size' and 'inputs/outputs' infos\n        const voiceMeta: FaustDspMeta = JSON.parse(voiceFactory.json);\n        const effectMeta: FaustDspMeta = (effectFactory && effectFactory.json) ? JSON.parse(effectFactory.json) : null;\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        // Memory will be shared by voice, mixer and (possibly) effect instances\n        return this.createWasmMemory(voices, sampleSize, voiceMeta, effectMeta, 8192);\n    }\n    private static createMixerAux(mixerModule: WebAssembly.Module, memory: WebAssembly.Memory) {\n        // Create mixer instance\n        const mixerImport = {\n            imports: { print: console.log },\n            memory: { memory }\n        };\n        const mixerInstance = new WebAssembly.Instance(mixerModule, mixerImport);\n        const mixerFunctions = mixerInstance.exports as IFaustMixerInstance & WebAssembly.Exports;\n        return mixerFunctions;\n    }\n    // Public API\n    static async loadDSPFactory(wasmPath: string, jsonPath: string) {\n        const wasmFile = await fetch(wasmPath);\n        if (!wasmFile.ok) {\n            throw new Error(`=> exception raised while running loadDSPFactory, file not found: ${wasmPath}`);\n        }\n        try {\n            const wasmBuffer = await wasmFile.arrayBuffer();\n            const module = await WebAssembly.compile(wasmBuffer);\n            const jsonFile = await fetch(jsonPath);\n            const json = await jsonFile.text();\n            const meta: FaustDspMeta = JSON.parse(json);\n            const cOptions = meta.compile_options;\n            const poly = cOptions.indexOf('wasm-e') !== -1;\n            return { cfactory: 0, code: new Uint8Array(wasmBuffer), module, json, poly } as FaustDspFactory;\n        } catch (e) {\n            // console.error(`=> exception raised while running loadDSPFactory: ${e}`);\n            throw e;\n        }\n    }\n    \n    static async loadDSPMixer(mixerPath: string, fs?: typeof FS) {\n        try {\n            let mixerBuffer = null;\n            if (fs) {\n                mixerBuffer = fs.readFile(mixerPath, { encoding: \"binary\" });\n            } else {\n                const mixerFile = await fetch(mixerPath);\n                mixerBuffer = await mixerFile.arrayBuffer();\n            }\n            // Compile mixer\n            return WebAssembly.compile(mixerBuffer);\n        } catch (e) {\n            // console.error(`=> exception raised while running loadMixer: ${e}`);\n            throw e;\n        }\n    }\n    \n    static async createAsyncMonoDSPInstance(factory: LooseFaustDspFactory) {\n        const instance = await WebAssembly.instantiate(factory.module, this.createWasmImport());\n        return this.createMonoDSPInstanceAux(instance, factory.json);\n    }\n    \n    static createSyncMonoDSPInstance(factory: LooseFaustDspFactory) {\n        const instance = new WebAssembly.Instance(factory.module, this.createWasmImport());\n        return this.createMonoDSPInstanceAux(instance, factory.json);\n    }\n    \n    static async createAsyncPolyDSPInstance(voiceFactory: LooseFaustDspFactory, mixerModule: WebAssembly.Module, voices: number, effectFactory?: LooseFaustDspFactory): Promise<FaustPolyDspInstance> {\n        const memory = this.createMemoryAux(voices, voiceFactory, effectFactory);\n        // Create voice \n        const voiceInstance = await WebAssembly.instantiate(voiceFactory.module, this.createWasmImport(memory));\n        const voiceFunctions = voiceInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n        const voiceAPI = new FaustDspInstance(voiceFunctions);\n        // Create mixer\n        const mixerAPI = this.createMixerAux(mixerModule, memory);\n    \n        // Possibly create effect instance \n        if (effectFactory) {\n            const effectInstance = await WebAssembly.instantiate(effectFactory.module, this.createWasmImport(memory));\n            const effectFunctions = effectInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n            const effectAPI = new FaustDspInstance(effectFunctions);\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                effectAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json,\n                effectJSON: effectFactory.json\n            };\n        } else {\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json\n            };\n        }\n    }\n    \n    static createSyncPolyDSPInstance(voiceFactory: LooseFaustDspFactory, mixerModule: WebAssembly.Module, voices: number, effectFactory?: LooseFaustDspFactory): FaustPolyDspInstance {\n        const memory = this.createMemoryAux(voices, voiceFactory, effectFactory);\n        // Create voice \n        const voiceInstance = new WebAssembly.Instance(voiceFactory.module, this.createWasmImport(memory));\n        const voiceFunctions = voiceInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n        const voiceAPI = new FaustDspInstance(voiceFunctions);\n        // Create mixer\n        const mixerAPI = this.createMixerAux(mixerModule, memory);\n    \n        // Possibly create effect instance \n        if (effectFactory) {\n            const effectInstance = new WebAssembly.Instance(effectFactory.module, this.createWasmImport(memory));\n            const effectFunctions = effectInstance.exports as IFaustDspInstance & WebAssembly.Exports;\n            const effectAPI = new FaustDspInstance(effectFunctions);\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                effectAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json,\n                effectJSON: effectFactory.json\n            };\n        } else {\n            return {\n                memory,\n                voices,\n                voiceAPI,\n                mixerAPI,\n                voiceJSON: voiceFactory.json\n            };\n        }\n    }\n}\n\nexport default FaustWasmInstantiator;\n", "import type { FaustMonoDspInstance, FaustPolyDspInstance, IFaustDspInstance } from \"./FaustDspInstance\";\nimport type { FaustDspMeta, FaustUIDescriptor, FaustUIGroup, FaustUIInputItem, FaustUIItem } from \"./types\";\n\n// Public API\nexport type OutputParamHandler = (path: string, value: number) => void;\nexport type ComputeHandler = (buffer_size: number) => void;\nexport type PlotHandler = (plotted: Float32Array[], index: number, events?: { type: string; data: any }[]) => void;\nexport type MetadataHandler = (key: string, value: string) => void;\n\n// Implementation API\nexport type UIHandler = (item: FaustUIItem) => void;\n\n/**\n * DSP implementation: mimic the C++ 'dsp' class:\n * - adding MIDI control: metadata are decoded and incoming MIDI messages will control the associated controllers\n * - an output handler can be set to treat produced output controllers (like 'bargraph') \n * - regular controllers are handled using setParamValue/getParamValue\n */\nexport interface IFaustBaseWebAudioDsp {\n    /**\n     * Set the parameter output handler, to  be called in the 'compute' method with output parameters (like bargraph).\n     *\n     * @param handler - the output handler\n     */\n    setOutputParamHandler(handler: OutputParamHandler | null): void;\n\n    /**\n     * Get the parameter output handler.\n     *\n     * @return the current output handler\n     */\n    getOutputParamHandler(): OutputParamHandler | null;\n\n    /**\n     * Set the compute handler, to  be called in the 'compute' method with buffer size.\n     *\n     * @param handler - the compute handler\n     */\n    setComputeHandler(handler: ComputeHandler | null): void;\n\n    /**\n     * Get the compute handler.\n     *\n     * @return the current output handler\n     */\n    getComputeHandler(): ComputeHandler | null;\n\n    /**\n     * Set the plot handler, to  be called in the 'compute' method with various info (see PlotHandler type).\n     *\n     * @param handler - the plot handler\n     */\n    setPlotHandler(handler: PlotHandler | null): void;\n\n    /**\n     * Get the plot handler.\n     *\n     * @return the current plot handler\n     */\n    getPlotHandler(): PlotHandler | null;\n\n    /**\n     * Return instance number of audio inputs.\n     *\n     * @return the instance number of audio inputs\n     */\n    getNumInputs(): number;\n\n    /**\n     * Return instance number of audio outputs.\n     *\n     * @return the instance number of audio outputs\n     */\n    getNumOutputs(): number;\n\n    /**\n     * DSP instance computation, to be called with successive input/output audio buffers, using their size.\n     *\n     * @param inputs - the input audio buffers\n     * @param outputs - the output audio buffers\n     */\n    compute(inputs: Float32Array[], outputs: Float32Array[]): boolean;\n\n    /**\n     * Give a handler to be called on 'declare key value' kind of metadata.\n     *\n     * @param handler - the handler to be used\n     */\n    metadata(handler: MetadataHandler): void;\n\n    /**\n     * Handle untyped MIDI messages.\n     *\n     * @param data - and arry of MIDI bytes\n     */\n    midiMessage(data: number[] | Uint8Array): void;\n\n    /**\n     * Handle MIDI ctrlChange messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param ctrl - the MIDI controller number (0..127)\n     * @param value - the MIDI controller value (0..127)\n     */\n    ctrlChange(chan: number, ctrl: number, value: number): void;\n\n    /**\n     * Handle MIDI pitchWheel messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param value - the MIDI controller value (0..16383)\n     */\n    pitchWheel(chan: number, value: number): void;\n\n    /**\n     * Set parameter value.\n     *\n     * @param path - the path to the wanted parameter (retrieved using 'getParams' method)\n     * @param val - the float value for the wanted control\n     */\n    setParamValue(path: string, value: number): void;\n\n    /**\n     * Get parameter value.\n     *\n     * @param path - the path to the wanted parameter (retrieved using 'getParams' method)\n     *\n     * @return the float value\n     */\n    getParamValue(path: string): number;\n\n    /**\n     * Get the table of all input parameters paths.\n     *\n     * @return the table of all input parameters paths\n     */\n    getParams(): string[];\n\n    /**\n     * Get DSP JSON description with its UI and metadata as object.\n     *\n     * @return the DSP JSON description as object\n     */\n    getMeta(): FaustDspMeta;\n\n    /**\n     * Get DSP JSON description with its UI and metadata.\n     *\n     * @return the DSP JSON description\n     */\n    getJSON(): string;\n\n    /**\n     * Get DSP UI description.\n     *\n     * @return the DSP UI description\n     */\n    getUI(): FaustUIDescriptor;\n\n    /**\n    * Get DSP UI items description.\n    *\n    * @return the DSP UI items description\n    */\n    getDescriptors(): FaustUIInputItem[];\n\n    /**\n     * Start the DSP.\n     */\n    start(): void;\n\n    /**\n     * Stop the DSP.\n     */\n    stop(): void;\n\n    /**\n     * Destroy the DSP.\n     */\n    destroy(): void;\n}\n\nexport interface IFaustMonoWebAudioDsp extends IFaustBaseWebAudioDsp {}\nexport interface IFaustMonoWebAudioNode extends IFaustMonoWebAudioDsp, AudioNode {}\n\nexport interface IFaustPolyWebAudioDsp extends IFaustBaseWebAudioDsp {\n    /**\n     * Handle MIDI keyOn messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param pitch - the MIDI pitch value (0..127)\n     * @param velocity - the MIDI velocity value (0..127)\n     */\n    keyOn(channel: number, pitch: number, velocity: number): void;\n\n    /**\n     * Handle MIDI keyOff messages.\n     *\n     * @param channel - the MIDI channel (0..15, not used for now)\n     * @param pitch - the MIDI pitch value (0..127)\n     * @param velocity - the MIDI velocity value (0..127)\n     */\n    keyOff(channel: number, pitch: number, velocity: number): void;\n\n    /**\n     * Stop all playing notes.\n     *\n     * @param hard - whether to immediately stop notes or put them in release mode\n     */\n    allNotesOff(hard: boolean): void;\n}\nexport interface IFaustPolyWebAudioNode extends IFaustPolyWebAudioDsp, AudioNode {}\n\nexport class FaustBaseWebAudioDsp implements IFaustBaseWebAudioDsp {\n    protected fOutputHandler: OutputParamHandler | null;\n    protected fComputeHandler: ComputeHandler | null;\n\n    // To handle MIDI events plot\n    protected fPlotHandler: PlotHandler | null;\n    protected fCachedEvents: { type: string; data: any }[];\n    protected fBufferNum: number;\n\n    protected fInChannels: Float32Array[] | Float64Array[];\n    protected fOutChannels: Float32Array[] | Float64Array[];\n\n    protected fOutputsTimer: number;\n\n    // UI items path\n    protected fInputsItems: string[];\n    protected fOutputsItems: string[];\n    protected fDescriptor: FaustUIInputItem[];\n\n    // Buffers in wasm memory\n    protected fAudioInputs!: number;\n    protected fAudioOutputs!: number;\n\n    protected fBufferSize: number;\n    protected gPtrSize: number;\n    protected gSampleSize: number;\n\n    // MIDI handling\n    protected fPitchwheelLabel: { path: string; min: number; max: number }[];\n    protected fCtrlLabel: { path: string; min: number; max: number }[][];\n    protected fPathTable: { [address: string]: number };\n    protected fUICallback: UIHandler;\n\n    protected fProcessing: boolean;\n\n    protected fDestroyed: boolean;\n\n    protected fJSONDsp!: FaustDspMeta;\n\n    constructor(sampleSize: number, bufferSize: number) {\n        this.fOutputHandler = null;\n        this.fComputeHandler = null;\n\n        // To handle MIDI events plot\n        this.fCachedEvents = [];\n        this.fBufferNum = 0;\n        this.fPlotHandler = null;\n\n        this.fBufferSize = bufferSize;\n\n        this.fInChannels = [];\n        this.fOutChannels = [];\n\n        this.gPtrSize = sampleSize; // Done on wast/wasm backend side\n        this.gSampleSize = sampleSize;\n\n        this.fOutputsTimer = 5;\n        this.fInputsItems = [];\n        this.fOutputsItems = [];\n        this.fDescriptor = [];\n\n        this.fPitchwheelLabel = [];\n        this.fCtrlLabel = new Array(128).fill(null).map(() => []);\n        this.fPathTable = {};\n\n        this.fProcessing = false;\n        this.fDestroyed = false;\n\n        this.fUICallback = (item: FaustUIItem) => {\n            if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n                // Keep bargraph adresses\n                this.fOutputsItems.push(item.address);\n                this.fPathTable[item.address] = item.index;\n            } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n                // Keep inputs adresses\n                this.fInputsItems.push(item.address);\n                this.fPathTable[item.address] = item.index;\n                this.fDescriptor.push(item);\n                // Parse 'midi' metadata\n                if (!item.meta) return;\n                item.meta.forEach((meta) => {\n                    const { midi } = meta;\n                    if (!midi) return;\n                    const strMidi = midi.trim();\n                    if (strMidi === \"pitchwheel\") {\n                        this.fPitchwheelLabel.push({ path: item.address, min: item.min as number, max: item.max as number });\n                    } else {\n                        const matched = strMidi.match(/^ctrl\\s(\\d+)/);\n                        if (!matched) return;\n                        this.fCtrlLabel[parseInt(matched[1])].push({ path: item.address, min: item.min as number, max: item.max as number });\n                    }\n                });\n            }\n        }\n    }\n\n    // Tools\n    static remap(v: number, mn0: number, mx0: number, mn1: number, mx1: number) {\n        return (v - mn0) / (mx0 - mn0) * (mx1 - mn1) + mn1;\n    }\n\n    // JSON parsing functions\n    static parseUI(ui: FaustUIDescriptor, callback: (item: FaustUIItem) => any) {\n        ui.forEach(group => this.parseGroup(group, callback));\n    }\n\n    static parseGroup(group: FaustUIGroup, callback: (item: FaustUIItem) => any) {\n        if (group.items) {\n            this.parseItems(group.items, callback);\n        }\n    }\n    static parseItems(items: FaustUIItem[], callback: (item: FaustUIItem) => any) {\n        items.forEach(item => this.parseItem(item, callback));\n    }\n\n    static parseItem(item: FaustUIItem, callback: (item: FaustUIItem) => any) {\n        if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n            this.parseItems(item.items, callback);\n        } else {\n            callback(item);\n        }\n    }\n\n    protected updateOutputs() {\n        if (this.fOutputsItems.length > 0 && this.fOutputHandler && this.fOutputsTimer-- === 0) {\n            this.fOutputsTimer = 5;\n            this.fOutputsItems.forEach(item => this.fOutputHandler?.(item, this.getParamValue(item)));\n        }\n    }\n\n    // Public API\n    metadata(handler: MetadataHandler) {\n        if (this.fJSONDsp.meta) {\n            this.fJSONDsp.meta.forEach(meta => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n        }\n    }\n\n    compute(input: Float32Array[], output: Float32Array[]) {\n        return false;\n    }\n\n    setOutputParamHandler(handler: OutputParamHandler | null) {\n        this.fOutputHandler = handler;\n    }\n    getOutputParamHandler() {\n        return this.fOutputHandler;\n    }\n\n    setComputeHandler(handler: ComputeHandler | null) {\n        this.fComputeHandler = handler;\n    }\n    getComputeHandler() {\n        return this.fComputeHandler;\n    }\n\n    setPlotHandler(handler: PlotHandler | null) {\n        this.fPlotHandler = handler;\n    }\n    getPlotHandler() {\n        return this.fPlotHandler;\n    }\n\n    getNumInputs() {\n        return -1;\n    }\n    getNumOutputs() {\n        return -1;\n    }\n\n    midiMessage(data: number[] | Uint8Array) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ data, type: \"midi\" });\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (cmd === 11) return this.ctrlChange(channel, data1, data2);\n        if (cmd === 14) return this.pitchWheel(channel, (data2 * 128.0 + data1));\n    }\n\n    ctrlChange(channel: number, ctrl: number, value: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"ctrlChange\", data: [channel, ctrl, value] });\n        if (this.fCtrlLabel[ctrl].length) {\n            this.fCtrlLabel[ctrl].forEach((ctrl) => {\n                const { path } = ctrl;\n                this.setParamValue(path, FaustBaseWebAudioDsp.remap(value, 0, 127, ctrl.min, ctrl.max));\n                // Typically used to reflect parameter change on GUI\n                if (this.fOutputHandler) this.fOutputHandler(path, this.getParamValue(path));\n            });\n        }\n    }\n\n    pitchWheel(channel: number, wheel: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"pitchWheel\", data: [channel, wheel] });\n        this.fPitchwheelLabel.forEach((pw) => {\n            this.setParamValue(pw.path, FaustBaseWebAudioDsp.remap(wheel, 0, 16383, pw.min, pw.max));\n            // Typically used to reflect parameter change on GUI\n            if (this.fOutputHandler) this.fOutputHandler(pw.path, this.getParamValue(pw.path));\n        });\n    }\n\n    setParamValue(path: string, value: number) { }\n    getParamValue(path: string) { return 0; }\n\n    getParams() { return this.fInputsItems; }\n    getMeta() { return this.fJSONDsp; }\n    getJSON() { return JSON.stringify(this.getMeta()); }\n    getUI() { return this.fJSONDsp.ui; }\n    getDescriptors() { return this.fDescriptor; }\n\n    start() {\n        this.fProcessing = true;\n    }\n\n    stop() {\n        this.fProcessing = false;\n    }\n\n    destroy() {\n        this.fDestroyed = true;\n        this.fOutputHandler = null;\n        this.fComputeHandler = null;\n        this.fPlotHandler = null;\n    }\n}\n\nexport class FaustMonoWebAudioDsp extends FaustBaseWebAudioDsp implements IFaustMonoWebAudioDsp {\n\n    private fInstance: FaustMonoDspInstance;\n    private fDSP!: number;\n\n    constructor(instance: FaustMonoDspInstance, sampleRate: number, sampleSize: number, bufferSize: number) {\n\n        super(sampleSize, bufferSize);\n        this.fInstance = instance;\n\n        // Create JSON object\n        this.fJSONDsp = JSON.parse(this.fInstance.json);\n\n        // Setup GUI\n        FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n\n        // Setup wasm memory\n        this.initMemory();\n\n        // Init DSP\n        this.fInstance.api.init(this.fDSP, sampleRate);\n    }\n\n    private initMemory() {\n\n        // Start of DSP memory: Mono DSP is placed first with index 0\n        this.fDSP = 0;\n\n        // Audio buffer start at the end of DSP\n        const $audio = this.fJSONDsp.size;\n\n        // Setup audio pointers offset\n        this.fAudioInputs = $audio;\n        this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.gPtrSize;\n\n        // Prepare wasm memory layout\n        const $audioInputs = this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize;\n        const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.gSampleSize;\n\n        const HEAP = this.fInstance.memory.buffer;\n        const HEAP32 = new Int32Array(HEAP);\n        const HEAPF = (this.gSampleSize === 4) ? new Float32Array(HEAP) : new Float64Array(HEAP);\n\n        if (this.getNumInputs() > 0) {\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.gSampleSize * chan;\n            }\n            // Prepare Ins buffer tables\n            const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, (this.fAudioInputs + this.getNumInputs() * this.gPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.gSampleSize), (dspInChans[chan] + this.fBufferSize * this.gSampleSize) >> Math.log2(this.gSampleSize));\n            }\n        }\n        if (this.getNumOutputs() > 0) {\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.gSampleSize * chan;\n            }\n            // Prepare Out buffer tables\n            const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, (this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.gSampleSize), (dspOutChans[chan] + this.fBufferSize * this.gSampleSize) >> Math.log2(this.gSampleSize));\n            }\n        }\n    }\n\n    toString() {\n        return `============== Mono Memory layout ==============\nthis.fBufferSize: ${this.fBufferSize}\nthis.fJSONDsp.size: ${this.fJSONDsp.size}\nthis.fAudioInputs: ${this.fAudioInputs}\nthis.fAudioOutputs: ${this.fAudioOutputs}\nthis.fDSP: ${this.fDSP}`;\n    }\n\n    // Public API\n    compute(input: Float32Array[], output: Float32Array[]) {\n\n        // Check DSP state\n        if (this.fDestroyed) return false;\n\n        // Check Processing state: the node returns 'true' to stay in the graph, even if not processing\n        if (!this.fProcessing) return true;\n\n        // Check inputs\n        if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n            // console.log(\"Process input error\");\n            return true;\n        }\n\n        // Check outputs\n        if (this.getNumOutputs() > 0 && (!output || !output[0] || output[0].length === 0)) {\n            // console.log(\"Process output error\");\n            return true;\n        }\n\n        // Copy inputs\n        if (input !== undefined) {\n            for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); ++chan) {\n                const dspInput = this.fInChannels[chan];\n                dspInput.set(input[chan]);\n            }\n        }\n\n        // Possibly call an externally given callback (for instance to synchronize playing a MIDIFile...)\n        if (this.fComputeHandler) this.fComputeHandler(this.fBufferSize);\n\n        // Compute\n        this.fInstance.api.compute(this.fDSP, this.fBufferSize, this.fAudioInputs, this.fAudioOutputs);\n\n        // Update bargraph\n        this.updateOutputs();\n\n        if (output !== undefined) {\n            // Copy outputs\n            for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n                const dspOutput = this.fOutChannels[chan];\n                output[chan].set(dspOutput);\n            }\n            // PlotHandler handling \n            if (this.fPlotHandler) {\n                this.fPlotHandler(output, this.fBufferNum++, (this.fCachedEvents.length ? this.fCachedEvents : undefined));\n                this.fCachedEvents = [];\n            }\n        }\n\n        return true;\n    }\n\n    metadata(handler: MetadataHandler) { super.metadata(handler); }\n\n    getNumInputs() {\n        return this.fInstance.api.getNumInputs(this.fDSP);\n    }\n    getNumOutputs() {\n        return this.fInstance.api.getNumOutputs(this.fDSP);\n    }\n\n    setParamValue(path: string, value: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n        this.fInstance.api.setParamValue(this.fDSP, this.fPathTable[path], value);\n    }\n    getParamValue(path: string) {\n        return this.fInstance.api.getParamValue(this.fDSP, this.fPathTable[path]);\n    }\n\n    getMeta() { return this.fJSONDsp; }\n    getJSON() { return this.fInstance.json; }\n    getDescriptors() { return this.fDescriptor; }\n    getUI() { return this.fJSONDsp.ui; }\n}\n\nexport class FaustWebAudioDspVoice {\n\n    static kActiveVoice: number;\n    static kFreeVoice: number;\n    static kReleaseVoice: number;\n    static kLegatoVoice: number;\n    static kNoVoice: number;\n    static VOICE_STOP_LEVEL: number;\n    private fFreqLabel: number[];\n    private fGateLabel: number[];\n    private fGainLabel: number[];\n    private fKeyLabel: number[];\n    private fVelLabel: number[];\n    private fDSP: number;         // Voice DSP location in wasm memory\n    private fAPI: IFaustDspInstance; // Voice DSP code\n    // Accessed by PolyDSPImp class\n    fCurNote: number;\n    fNextNote: number;\n    fNextVel: number;\n    fDate: number;\n    fLevel: number;\n    fRelease: number;\n\n    constructor($dsp: number, api: IFaustDspInstance, inputItems: string[], pathTable: { [address: string]: number }, sampleRate: number) {\n        // Voice state\n        FaustWebAudioDspVoice.kActiveVoice = 0;\n        FaustWebAudioDspVoice.kFreeVoice = -1;\n        FaustWebAudioDspVoice.kReleaseVoice = -2;\n        FaustWebAudioDspVoice.kLegatoVoice = -3;\n        FaustWebAudioDspVoice.kNoVoice = -4;\n        FaustWebAudioDspVoice.VOICE_STOP_LEVEL = 0.0005;\n\n        this.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n        this.fNextNote = this.fNextVel = -1;\n        this.fLevel = 0;\n        this.fDate = this.fRelease = 0;\n        this.fDSP = $dsp;\n        this.fAPI = api;\n        this.fGateLabel = [];\n        this.fGainLabel = [];\n        this.fFreqLabel = [];\n        this.fKeyLabel = [];\n        this.fVelLabel = [];\n        this.fAPI.init(this.fDSP, sampleRate);\n        this.extractPaths(inputItems, pathTable);\n    }\n\n    static midiToFreq(note: number) { return 440.0 * 2 ** ((note - 69) / 12); }\n\n    static normalizeVelocity(velocity: number) { return velocity / 127.0; }\n\n    private extractPaths(inputItems: string[], pathTable: { [address: string]: number }) {\n        inputItems.forEach((item) => {\n            if (item.endsWith(\"/gate\")) {\n                this.fGateLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/freq\")) {\n                this.fFreqLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/key\")) {\n                this.fKeyLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/gain\")) {\n                this.fGainLabel.push(pathTable[item]);\n            } else if (item.endsWith(\"/vel\") && item.endsWith(\"/velocity\")) {\n                this.fVelLabel.push(pathTable[item]);\n            }\n        });\n    }\n\n    // Public API\n    keyOn(pitch: number, velocity: number, legato: boolean = false) {\n        if (legato) {\n            this.fNextNote = pitch;\n            this.fNextVel = velocity;\n        } else {\n            this.fFreqLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, FaustWebAudioDspVoice.midiToFreq(pitch)));\n            this.fGateLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, 1));\n            this.fGainLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, FaustWebAudioDspVoice.normalizeVelocity(velocity)));\n            this.fKeyLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, pitch));\n            this.fVelLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, velocity));\n            // Keep pitch\n            this.fCurNote = pitch;\n        }\n    }\n\n    keyOff(hard: boolean = false) {\n        this.fGateLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, 0));\n        if (hard) {\n            this.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n        } else {\n            this.fRelease = this.fAPI.getSampleRate(this.fDSP) / 2;\n            this.fCurNote = FaustWebAudioDspVoice.kReleaseVoice;\n        }\n    }\n\n    computeLegato(bufferSize: number, $inputs: number, $outputZero: number, $outputsHalf: number) {\n\n        let size = bufferSize / 2;\n\n        // Reset envelops\n        this.fGateLabel.forEach(index => this.fAPI.setParamValue(this.fDSP, index, 0));\n\n        // Compute current voice on half buffer\n        this.fAPI.compute(this.fDSP, size, $inputs, $outputZero);\n\n        // Start next keyOn\n        this.keyOn(this.fNextNote, this.fNextVel);\n\n        // Compute on second half buffer\n        this.fAPI.compute(this.fDSP, size, $inputs, $outputsHalf);\n    }\n\n    compute(bufferSize: number, $inputs: number, $outputs: number) {\n        this.fAPI.compute(this.fDSP, bufferSize, $inputs, $outputs);\n    }\n\n    setParamValue(index: number, value: number) {\n        this.fAPI.setParamValue(this.fDSP, index, value);\n    }\n    getParamValue(index: number) {\n        return this.fAPI.getParamValue(this.fDSP, index);\n    }\n}\n\nexport class FaustPolyWebAudioDsp extends FaustBaseWebAudioDsp implements IFaustPolyWebAudioDsp {\n\n    private fInstance: FaustPolyDspInstance;\n    private fEffect!: number;\n    private fJSONEffect: FaustDspMeta | null;\n    private fAudioMixing!: number;\n    private fAudioMixingHalf!: number;\n    private fVoiceTable: FaustWebAudioDspVoice[];\n\n    constructor(instance: FaustPolyDspInstance, sampleRate: number, sampleSize: number, bufferSize: number) {\n        super(sampleSize, bufferSize);\n        this.fInstance = instance;\n\n        // Create JSON for voice\n        this.fJSONDsp = JSON.parse(this.fInstance.voiceJSON);\n\n        // Create JSON for effect\n        this.fJSONEffect = (this.fInstance.effectAPI && this.fInstance.effectJSON) ? JSON.parse(this.fInstance.effectJSON) : null;\n\n        // Setup GUI\n        FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n        if (this.fJSONEffect) FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n\n        // Setup wasm memory\n        this.initMemory();\n\n        // Init DSP voices\n        this.fVoiceTable = [];\n        for (let voice = 0; voice < this.fInstance.voices; voice++) {\n            this.fVoiceTable.push(new FaustWebAudioDspVoice(\n                this.fJSONDsp.size * voice,\n                this.fInstance.voiceAPI,\n                this.fInputsItems,\n                this.fPathTable,\n                sampleRate\n            ));\n        }\n\n        // Init effect\n        if (this.fInstance.effectAPI) this.fInstance.effectAPI.init(this.fEffect, sampleRate);\n    }\n\n    private initMemory() {\n\n        // Effet start at the end of all DSP voices\n        this.fEffect = this.fJSONDsp.size * this.fInstance.voices;\n\n        // Audio buffer start at the end of effect\n        const $audio = this.fEffect + (this.fJSONEffect ? this.fJSONEffect.size : 0);\n\n        // Setup audio pointers offset\n        this.fAudioInputs = $audio;\n        this.fAudioOutputs = this.fAudioInputs + this.getNumInputs() * this.gPtrSize;\n        this.fAudioMixing = this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize;\n        this.fAudioMixingHalf = this.fAudioMixing + this.getNumOutputs() * this.gPtrSize;\n\n        // Prepare wasm memory layout\n        const $audioInputs = this.fAudioMixingHalf + this.getNumOutputs() * this.gPtrSize;\n        const $audioOutputs = $audioInputs + this.getNumInputs() * this.fBufferSize * this.gSampleSize;\n        const $audioMixing = $audioOutputs + this.getNumOutputs() * this.fBufferSize * this.gSampleSize;\n\n        const HEAP = this.fInstance.memory.buffer;\n        const HEAP32 = new Int32Array(HEAP);\n        const HEAPF = (this.gSampleSize === 4) ? new Float32Array(HEAP) : new Float64Array(HEAP);\n\n        if (this.getNumInputs() > 0) {\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                HEAP32[(this.fAudioInputs >> 2) + chan] = $audioInputs + this.fBufferSize * this.gSampleSize * chan;\n            }\n            // Prepare Ins buffer tables\n            const dspInChans = HEAP32.subarray(this.fAudioInputs >> 2, (this.fAudioInputs + this.getNumInputs() * this.gPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumInputs(); chan++) {\n                this.fInChannels[chan] = HEAPF.subarray(dspInChans[chan] >> Math.log2(this.gSampleSize), (dspInChans[chan] + this.fBufferSize * this.gSampleSize) >> Math.log2(this.gSampleSize));\n            }\n        }\n        if (this.getNumOutputs() > 0) {\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                HEAP32[(this.fAudioOutputs >> 2) + chan] = $audioOutputs + this.fBufferSize * this.gSampleSize * chan;\n                HEAP32[(this.fAudioMixing >> 2) + chan] = $audioMixing + this.fBufferSize * this.gSampleSize * chan;\n                HEAP32[(this.fAudioMixingHalf >> 2) + chan] = $audioMixing + this.fBufferSize * this.gSampleSize * chan + this.fBufferSize / 2 * this.gSampleSize;\n            }\n            // Prepare Out buffer tables\n            const dspOutChans = HEAP32.subarray(this.fAudioOutputs >> 2, (this.fAudioOutputs + this.getNumOutputs() * this.gPtrSize) >> 2);\n            for (let chan = 0; chan < this.getNumOutputs(); chan++) {\n                this.fOutChannels[chan] = HEAPF.subarray(dspOutChans[chan] >> Math.log2(this.gSampleSize), (dspOutChans[chan] + this.fBufferSize * this.gSampleSize) >> Math.log2(this.gSampleSize));\n            }\n        }\n    }\n\n    toString() {\n        return `============== Poly Memory layout ==============\nthis.fBufferSize: ${this.fBufferSize}\nthis.fJSONDsp.size: ${this.fJSONDsp.size}\nthis.fAudioInputs: ${this.fAudioInputs}\nthis.fAudioOutputs: ${this.fAudioOutputs}\nthis.fAudioMixing: ${this.fAudioMixing}\nthis.fAudioMixingHalf: ${this.fAudioMixingHalf}`;\n    }\n\n    private allocVoice(voice: number, type: number) {\n        this.fVoiceTable[voice].fDate++;\n        this.fVoiceTable[voice].fCurNote = type;\n        return voice;\n    }\n\n    private getPlayingVoice(pitch: number) {\n        let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n        let oldestDatePlaying = Number.MAX_VALUE;\n\n        for (let voice = 0; voice < this.fInstance.voices; voice++) {\n            if (this.fVoiceTable[voice].fCurNote === pitch) {\n                // Keeps oldest playing voice\n                if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n                    oldestDatePlaying = this.fVoiceTable[voice].fDate;\n                    voicePlaying = voice;\n                }\n            }\n        }\n        return voicePlaying;\n    }\n\n    private getFreeVoice() {\n        for (let voice = 0; voice < this.fInstance.voices; voice++) {\n            if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kFreeVoice) {\n                return this.allocVoice(voice, FaustWebAudioDspVoice.kActiveVoice);\n            }\n        }\n\n        let voiceRelease = FaustWebAudioDspVoice.kNoVoice;\n        let voicePlaying = FaustWebAudioDspVoice.kNoVoice;\n        let oldestDateRelease = Number.MAX_VALUE;\n        let oldestDatePlaying = Number.MAX_VALUE;\n\n        for (let voice = 0; voice < this.fInstance.voices; voice++) { // Scan all voices\n            // Try to steal a voice in DspVoice.kReleaseVoice mode...\n            if (this.fVoiceTable[voice].fCurNote === FaustWebAudioDspVoice.kReleaseVoice) {\n                // Keeps oldest release voice\n                if (this.fVoiceTable[voice].fDate < oldestDateRelease) {\n                    oldestDateRelease = this.fVoiceTable[voice].fDate;\n                    voiceRelease = voice;\n                }\n            } else if (this.fVoiceTable[voice].fDate < oldestDatePlaying) {\n                oldestDatePlaying = this.fVoiceTable[voice].fDate;\n                voicePlaying = voice;\n            }\n        }\n        // Then decide which one to steal\n        if (oldestDateRelease !== Number.MAX_VALUE) {\n            console.log(`Steal release voice : voice_date = ${this.fVoiceTable[voiceRelease].fDate} voice = ${voiceRelease}`);\n            return this.allocVoice(voiceRelease, FaustWebAudioDspVoice.kLegatoVoice);\n        }\n        if (oldestDatePlaying !== Number.MAX_VALUE) {\n            console.log(`Steal playing voice : voice_date = ${this.fVoiceTable[voicePlaying].fDate} voice = ${voicePlaying}`);\n            return this.allocVoice(voicePlaying, FaustWebAudioDspVoice.kLegatoVoice);\n        }\n        return FaustWebAudioDspVoice.kNoVoice;\n    }\n\n    // Public API\n    compute(input: Float32Array[], output: Float32Array[]) {\n\n        // Check DSP state\n        if (this.fDestroyed) return false;\n\n        // Check Processing state: the node returns 'true' to stay in the graph, even if not processing\n        if (!this.fProcessing) return true;\n\n        // Check inputs\n        if (this.getNumInputs() > 0 && (!input || !input[0] || input[0].length === 0)) {\n            // console.log(\"Process input error\");\n            return true;\n        }\n\n        // Check outputs\n        if (this.getNumOutputs() > 0 && (!output || !output[0] || output[0].length === 0)) {\n            // console.log(\"Process output error\");\n            return true;\n        }\n\n        // Copy inputs\n        if (input !== undefined) {\n            for (let chan = 0; chan < Math.min(this.getNumInputs(), input.length); ++chan) {\n                const dspInput = this.fInChannels[chan];\n                dspInput.set(input[chan]);\n            }\n        }\n\n        // Possibly call an externally given callback (for instance to synchronize playing a MIDIFile...)\n        if (this.fComputeHandler) this.fComputeHandler(this.fBufferSize);\n\n        // Compute\n        this.fInstance.mixerAPI.clearOutput(this.fBufferSize, this.getNumOutputs(), this.fAudioOutputs);\n        this.fVoiceTable.forEach((voice) => {\n            if (voice.fCurNote === FaustWebAudioDspVoice.kLegatoVoice) {\n                // Play from current note and next note\n                voice.computeLegato(this.fBufferSize, this.fAudioInputs, this.fAudioMixing, this.fAudioMixingHalf);\n                // FadeOut on first half buffer\n                this.fInstance.mixerAPI.fadeOut(this.fBufferSize / 2, this.getNumOutputs(), this.fAudioMixing);\n                // Mix it in result\n                voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n            } else if (voice.fCurNote !== FaustWebAudioDspVoice.kFreeVoice) {\n                // Compute current note\n                voice.compute(this.fBufferSize, this.fAudioInputs, this.fAudioMixing);\n                // Mix it in result\n                voice.fLevel = this.fInstance.mixerAPI.mixCheckVoice(this.fBufferSize, this.getNumOutputs(), this.fAudioMixing, this.fAudioOutputs);\n                // Check the level to possibly set the voice in kFreeVoice again\n                voice.fRelease -= this.fBufferSize;\n                if ((voice.fCurNote == FaustWebAudioDspVoice.kReleaseVoice) && ((voice.fLevel < FaustWebAudioDspVoice.VOICE_STOP_LEVEL) && (voice.fRelease < 0))) {\n                    voice.fCurNote = FaustWebAudioDspVoice.kFreeVoice;\n                }\n            }\n        });\n        if (this.fInstance.effectAPI) this.fInstance.effectAPI.compute(this.fEffect, this.fBufferSize, this.fAudioOutputs, this.fAudioOutputs);\n\n        // Update bargraph\n        this.updateOutputs();\n\n        if (output !== undefined) {\n            // Copy outputs\n            for (let chan = 0; chan < Math.min(this.getNumOutputs(), output.length); chan++) {\n                const dspOutput = this.fOutChannels[chan];\n                output[chan].set(dspOutput);\n            }\n\n            // PlotHandler handling \n            if (this.fPlotHandler) {\n                this.fPlotHandler(output, this.fBufferNum++, (this.fCachedEvents.length ? this.fCachedEvents : undefined));\n                this.fCachedEvents = [];\n            }\n        }\n\n        return true;\n    }\n    getNumInputs() {\n        return this.fInstance.voiceAPI.getNumInputs(0);\n    }\n    getNumOutputs() {\n        return this.fInstance.voiceAPI.getNumOutputs(0);\n    }\n\n    private static findPath(o: any, p: string) {\n        if (typeof o !== \"object\") {\n            return false;\n        } else if (o.address) {\n            return (o.address === p);\n        } else {\n            for (const k in o) {\n                if (FaustPolyWebAudioDsp.findPath(o[k], p)) return true;\n            }\n            return false;\n        }\n    }\n\n    setParamValue(path: string, value: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"param\", data: { path, value } });\n        if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n            this.fInstance.effectAPI.setParamValue(this.fEffect, this.fPathTable[path], value);\n        } else {\n            this.fVoiceTable.forEach(voice => voice.setParamValue(this.fPathTable[path], value));\n        }\n    }\n    getParamValue(path: string) {\n        if (this.fJSONEffect && FaustPolyWebAudioDsp.findPath(this.fJSONEffect.ui, path) && this.fInstance.effectAPI) {\n            return this.fInstance.effectAPI.getParamValue(this.fEffect, this.fPathTable[path]);\n        } else {\n            return this.fVoiceTable[0].getParamValue(this.fPathTable[path]);\n        }\n    }\n\n    getMeta() {\n        const o = this.fJSONDsp;\n        const e = this.fJSONEffect;\n        const r = { ...o };\n        if (e) {\n            r.ui = [{\n                type: \"tgroup\", label: \"Sequencer\", items: [\n                    { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                    { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                ]\n            }];\n        } else {\n            r.ui = [{\n                type: \"tgroup\", label: \"Polyphonic\", items: [\n                    { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                ]\n            }];\n        }\n        return r as FaustDspMeta;\n    }\n\n    getJSON() {\n        return JSON.stringify(this.getMeta());\n    }\n\n    getUI() {\n        return this.getMeta().ui;\n    }\n\n    getDescriptors() { return this.fDescriptor; }\n\n    midiMessage(data: number[] | Uint8Array) {\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (cmd === 8 || (cmd === 9 && data2 === 0)) return this.keyOff(channel, data1, data2);\n        else if (cmd === 9) return this.keyOn(channel, data1, data2);\n        else super.midiMessage(data);\n    };\n\n    ctrlChange(channel: number, ctrl: number, value: number) {\n        if (ctrl === 123 || ctrl === 120) {\n            this.allNotesOff(true);\n        } else {\n            super.ctrlChange(channel, ctrl, value);\n        }\n    }\n\n    keyOn(channel: number, pitch: number, velocity: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"keyOn\", data: [channel, pitch, velocity] });\n        const voice = this.getFreeVoice();\n        this.fVoiceTable[voice].keyOn(pitch, velocity, this.fVoiceTable[voice].fCurNote == FaustWebAudioDspVoice.kLegatoVoice);\n    }\n\n    keyOff(channel: number, pitch: number, velocity: number) {\n        if (this.fPlotHandler) this.fCachedEvents.push({ type: \"keyOff\", data: [channel, pitch, velocity] });\n        const voice = this.getPlayingVoice(pitch);\n        if (voice !== FaustWebAudioDspVoice.kNoVoice) {\n            this.fVoiceTable[voice].keyOff();\n        } else {\n            console.log(\"Playing pitch = %d not found\\n\", pitch);\n        }\n    }\n\n    allNotesOff(hard: boolean = true) {\n        this.fCachedEvents.push({ type: \"ctrlChange\", data: [0, 123, 0] });\n        this.fVoiceTable.forEach(voice => voice.keyOff(hard));\n    }\n}\n", "import { ComputeHandler, FaustBaseWebAudioDsp, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp, IFaustBaseWebAudioDsp, IFaustMonoWebAudioDsp, IFaustPolyWebAudioDsp, MetadataHandler, OutputParamHandler, PlotHandler } from \"./FaustWebAudioDsp\";\nimport { AudioParamDescriptor, FaustUIItem } from \"./types\";\n\n/**\n *  For offline rendering.\n */\nexport interface IFaustOfflineProcessor extends IFaustBaseWebAudioDsp {\n    render(inputs?: Float32Array[], length?: number, onUpdate?: (sample: number) => any): Float32Array[];\n}\n\nexport interface IFaustMonoOfflineProcessor extends IFaustOfflineProcessor, IFaustMonoWebAudioDsp {}\nexport interface IFaustPolyOfflineProcessor extends IFaustOfflineProcessor, IFaustPolyWebAudioDsp {}\n\nexport class FaustOfflineProcessor<Poly extends boolean = false> {\n    protected fDSPCode!: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp;\n\n    protected fBufferSize: number;\n    protected fInputs: Float32Array[];\n    protected fOutputs: Float32Array[];\n\n    constructor(instance: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp, bufferSize: number) {\n        this.fDSPCode = instance;\n        this.fBufferSize = bufferSize;\n        this.fInputs = new Array(this.fDSPCode.getNumInputs()).fill(null).map(() => new Float32Array(bufferSize));\n        this.fOutputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(bufferSize));\n    }\n\n    // Public API\n\n    getParameterDescriptors() {\n        const params = [] as AudioParamDescriptor[];\n        // Analyse voice JSON to generate AudioParam parameters\n        const callback = (item: FaustUIItem) => {\n            let param: AudioParamDescriptor | null = null;\n            if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"nentry\") {\n                if (this.fDSPCode instanceof FaustMonoWebAudioDsp || (\n                    !item.address.endsWith(\"/gate\") &&\n                    !item.address.endsWith(\"/freq\") &&\n                    !item.address.endsWith(\"/gain\") &&\n                    !item.address.endsWith(\"/key\") &&\n                    !item.address.endsWith(\"/vel\") &&\n                    !item.address.endsWith(\"/velocity\")\n                )) {\n                    param = { name: item.address, defaultValue: item.init || 0, minValue: item.min || 0, maxValue: item.max || 0 };\n                }\n            } else if (item.type === \"button\" || item.type === \"checkbox\") {\n                if (this.fDSPCode instanceof FaustMonoWebAudioDsp || (\n                    !item.address.endsWith(\"/gate\") &&\n                    !item.address.endsWith(\"/freq\") &&\n                    !item.address.endsWith(\"/gain\") &&\n                    !item.address.endsWith(\"/key\") &&\n                    !item.address.endsWith(\"/vel\") &&\n                    !item.address.endsWith(\"/velocity\")\n                )) {\n                    param = { name: item.address, defaultValue: item.init || 0, minValue: 0, maxValue: 1 };\n                }\n            }\n            if (param) params.push(param);\n        }\n        FaustBaseWebAudioDsp.parseUI(this.fDSPCode.getUI(), callback);\n        return params;\n    }\n    compute(input: Float32Array[], output: Float32Array[]) { return this.fDSPCode.compute(input, output); }\n\n    setOutputParamHandler(handler: OutputParamHandler) { this.fDSPCode.setOutputParamHandler(handler); }\n    getOutputParamHandler() { return this.fDSPCode.getOutputParamHandler(); }\n\n    setComputeHandler(handler: ComputeHandler) { this.fDSPCode.setComputeHandler(handler); }\n    getComputeHandler() { return this.fDSPCode.getComputeHandler(); }\n\n    setPlotHandler(handler: PlotHandler) { this.fDSPCode.setPlotHandler(handler); }\n    getPlotHandler() { return this.fDSPCode.getPlotHandler(); }\n\n    getNumInputs() { return this.fDSPCode.getNumInputs(); }\n    getNumOutputs() { return this.fDSPCode.getNumOutputs(); }\n\n    metadata(handler: MetadataHandler) { }\n\n    midiMessage(data: number[] | Uint8Array) { this.fDSPCode.midiMessage(data); }\n\n    ctrlChange(chan: number, ctrl: number, value: number) { this.fDSPCode.ctrlChange(chan, ctrl, value); }\n    pitchWheel(chan: number, value: number) { this.fDSPCode.pitchWheel(chan, value); }\n\n    setParamValue(path: string, value: number) { this.fDSPCode.setParamValue(path, value); }\n    getParamValue(path: string) { return this.fDSPCode.getParamValue(path); }\n    getParams() { return this.fDSPCode.getParams(); }\n\n    getMeta() { return this.fDSPCode.getMeta(); }\n    getJSON() { return this.fDSPCode.getJSON(); }\n    getDescriptors() { return this.fDSPCode.getDescriptors(); }\n    getUI() { return this.fDSPCode.getUI(); }\n\n    start() { this.fDSPCode.start(); }\n    stop() { this.fDSPCode.stop(); }\n\n    destroy() { this.fDSPCode.destroy(); }\n\n    /**\n     * Render frames in an array.\n     *\n     * @param inputs - input signal\n     * @param length - the number of frames to render (default: bufferSize)\n     * @param onUpdate - a callback after each buffer calculated, with an argument \"current sample\"\n     * @return an array of Float32Array with the rendered frames\n     */\n    render(inputs: Float32Array[] = [], length = this.fBufferSize, onUpdate?: (sample: number) => any): Float32Array[] {\n        let l = 0;\n        const outputs = new Array(this.fDSPCode.getNumOutputs()).fill(null).map(() => new Float32Array(length));\n        // The node has to be started before rendering\n        this.fDSPCode.start();\n        while (l < length) {\n            const sliceLength = Math.min(length - l, this.fBufferSize);\n            for (let i = 0; i < this.fDSPCode.getNumInputs(); i++) {\n                let input: Float32Array;\n                if (inputs[i]) {\n                    if (inputs[i].length <= l) {\n                        input = new Float32Array(sliceLength);\n                    } else if (inputs[i].length > l + sliceLength) {\n                        input = inputs[i].subarray(l, l + sliceLength);\n                    } else {\n                        input = inputs[i].subarray(l, inputs[i].length);\n                    }\n                } else {\n                    input = new Float32Array(sliceLength);\n                }\n                this.fInputs[i] = input;\n            }\n            this.fDSPCode.compute(this.fInputs, this.fOutputs);\n            for (let i = 0; i < this.fDSPCode.getNumOutputs(); i++) {\n                const output = this.fOutputs[i];\n                if (sliceLength < this.fBufferSize) {\n                    outputs[i].set(output.subarray(0, sliceLength), l);\n                } else {\n                    outputs[i].set(output, l);\n                }\n            }\n            l += this.fBufferSize;\n            onUpdate?.(l);\n        }\n        // The node can be stopped after rendering\n        this.fDSPCode.stop();\n        return outputs;\n    }\n}\n\nexport class FaustMonoOfflineProcessor extends FaustOfflineProcessor<false> implements IFaustMonoWebAudioDsp {\n}\n\nexport class FaustPolyOfflineProcessor extends FaustOfflineProcessor<true> implements IFaustPolyWebAudioDsp {\n    keyOn(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOn(channel, pitch, velocity); }\n    keyOff(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOff(channel, pitch, velocity); }\n    allNotesOff(hard: boolean) { this.fDSPCode.allNotesOff(hard); }\n}\n\nexport default FaustOfflineProcessor;\n", "import type FaustCompiler from \"./FaustCompiler\";\n\ninterface IFaustSvgDiagrams {\n    /**\n     * Generates auxiliary files from Faust code. The output depends on the compiler options.\n     *\n     * @param name - the DSP's name\n     * @param code - Faust code\n     * @param args - compilation args\n     * @returns the svg diagrams as a filename - svg string map\n     */\n    from(name: string, code: string, args: string): Record<string, string>;\n}\n\nclass FaustSvgDiagrams implements IFaustSvgDiagrams {\n    private compiler: FaustCompiler;\n\n    constructor(compiler: FaustCompiler) {\n        this.compiler = compiler;\n    }\n    \n    from(name: string, code: string, args: string) {\n        const fs = this.compiler.fs();\n        try {\n            const files: string[] = fs.readdir(`/${name}-svg/`);\n            files.filter(file => file !== \".\" && file !== \"..\").forEach(file => fs.unlink(`/${name}-svg/${file}`));\n        } catch {}\n        const success = this.compiler.generateAuxFiles(name, code, `-lang wasm -svg ${args}`);\n        if (!success) throw new Error(this.compiler.getErrorMessage());\n        const svgs: Record<string, string> = {};\n        const files: string[] = fs.readdir(`/${name}-svg/`);\n        files.filter(file => file !== \".\" && file !== \"..\").forEach(file => svgs[file] = fs.readFile(`/${name}-svg/${file}`, { encoding: \"utf8\" }) as string);\n        return svgs;\n    }\n}\n\nexport default FaustSvgDiagrams;\n", "import type { FaustModule, LibFaustWasm, FaustInfoType } from \"./types\";\n\nexport interface ILibFaust extends LibFaustWasm {\n    module(): FaustModule;\n    fs(): typeof FS;\n}\n\nclass LibFaust implements ILibFaust {\n    private fModule: FaustModule;\n    private fCompiler: LibFaustWasm;\n    private fFileSystem: typeof FS;\n\n    constructor(module: FaustModule) {\n        this.fModule = module;\n        this.fCompiler = new module.libFaustWasm();\n        this.fFileSystem = this.fModule.FS;\n    }\n    module() {\n        return this.fModule;\n    }\n    fs() {\n        return this.fFileSystem;\n    }\n    version() {\n        return this.fCompiler.version();\n    }\n    createDSPFactory(name: string, code: string, args: string, useInternalMemory: boolean) {\n        return this.fCompiler.createDSPFactory(name, code, args, useInternalMemory);\n    }\n    deleteDSPFactory(cFactory: number) {\n        return this.fCompiler.deleteDSPFactory(cFactory);\n    }\n    expandDSP(name: string, code: string, args: string) {\n        return this.fCompiler.expandDSP(name, code, args);\n    }\n    generateAuxFiles(name: string, code: string, args: string) {\n        return this.fCompiler.generateAuxFiles(name, code, args);\n    }\n    deleteAllDSPFactories() {\n        return this.fCompiler.deleteAllDSPFactories();\n    }\n    getErrorAfterException() {\n        return this.fCompiler.getErrorAfterException();\n    }\n    cleanupAfterException() {\n        return this.fCompiler.cleanupAfterException();\n    }\n    getInfos(what: FaustInfoType) {\n        return this.fCompiler.getInfos(what);\n    }\n    toString() {\n        return `LibFaust module: ${this.fModule}, compiler: ${this.fCompiler}`;\n    }\n\n}\n\nexport default LibFaust;\n", "export interface WavEncoderOptions {\n    bitDepth: number;\n    float?: boolean;\n    symmetric?: boolean;\n    shared?: boolean;\n    sampleRate: number;\n}\ninterface Format {\n    formatId: number;\n    float: boolean;\n    symmetric: boolean;\n    numberOfChannels: number;\n    sampleRate: number;\n    length: number;\n    bitDepth: number;\n    byteDepth: number;\n}\n\n/**\n * Code from https://github.com/mohayonao/wav-encoder\n */\nclass WavEncoder {\n    static encode(audioBuffer: Float32Array[], options: WavEncoderOptions) {\n        const numberOfChannels = audioBuffer.length;\n        const length = audioBuffer[0].length;\n        const { shared, float } = options;\n        const bitDepth = float ? 32 : ((options.bitDepth | 0) || 16);\n        const byteDepth = bitDepth >> 3;\n        const byteLength = length * numberOfChannels * byteDepth;\n        // eslint-disable-next-line no-undef\n        const AB = shared ? (globalThis.SharedArrayBuffer || globalThis.ArrayBuffer) : globalThis.ArrayBuffer;\n        const ab = new AB((44 + byteLength) * Uint8Array.BYTES_PER_ELEMENT);\n        const dataView = new DataView(ab);\n        const writer = new Writer(dataView);\n        const format: Format = {\n            formatId: float ? 0x0003 : 0x0001,\n            float: !!float,\n            numberOfChannels,\n            sampleRate: options.sampleRate,\n            symmetric: !!options.symmetric,\n            length,\n            bitDepth,\n            byteDepth\n        };\n        this.writeHeader(writer, format);\n        this.writeData(writer, audioBuffer, format);\n        return ab;\n    }\n    private static writeHeader(writer: Writer, format: Format) {\n        const { formatId, sampleRate, bitDepth, numberOfChannels, length, byteDepth } = format;\n        writer.string(\"RIFF\");\n        writer.uint32(writer.dataView.byteLength - 8);\n        writer.string(\"WAVE\");\n        writer.string(\"fmt \");\n        writer.uint32(16);\n        writer.uint16(formatId);\n        writer.uint16(numberOfChannels);\n        writer.uint32(sampleRate);\n        writer.uint32(sampleRate * numberOfChannels * byteDepth);\n        writer.uint16(numberOfChannels * byteDepth);\n        writer.uint16(bitDepth);\n        writer.string(\"data\");\n        writer.uint32(length * numberOfChannels * byteDepth);\n        return writer.pos;\n    }\n    private static writeData(writer: Writer, audioBuffer: Float32Array[], format: Format) {\n        const { bitDepth, float, length, numberOfChannels, symmetric } = format;\n        if (bitDepth === 32 && float) {\n            const { dataView, pos } = writer;\n            const ab = dataView.buffer;\n            const f32View = new Float32Array(ab, pos);\n            if (numberOfChannels === 1) {\n                f32View.set(audioBuffer[0]);\n                return;\n            }\n            for (let ch = 0; ch < numberOfChannels; ch++) {\n                const channel = audioBuffer[ch];\n                for (let i = 0; i < length; i++) {\n                    f32View[i * numberOfChannels + ch] = channel[i];\n                }\n            }\n            return;\n        }\n        const encoderOption = float ? \"f\" : symmetric ? \"s\" : \"\";\n        const methodName = \"pcm\" + bitDepth + encoderOption;\n\n        if (!(writer as any)[methodName]) {\n            throw new TypeError(\"Not supported bit depth: \" + bitDepth);\n        }\n\n        const write: (value: number) => void = (writer as any)[methodName].bind(writer);\n\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < numberOfChannels; j++) {\n                write(audioBuffer[j][i]);\n            }\n        }\n    }\n}\n\nclass Writer {\n    pos = 0;\n    dataView: DataView;\n    constructor(dataView: DataView) {\n        this.dataView = dataView;\n    }\n    int16(value: number) {\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    uint16(value: number) {\n        this.dataView.setUint16(this.pos, value, true);\n        this.pos += 2;\n    }\n    uint32(value: number) {\n        this.dataView.setUint32(this.pos, value, true);\n        this.pos += 4;\n    }\n    string(value: string) {\n        for (let i = 0, imax = value.length; i < imax; i++) {\n            this.dataView.setUint8(this.pos++, value.charCodeAt(i));\n        }\n    }\n    pcm8(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = (value * 0.5 + 0.5) * 255;\n        value = Math.round(value) | 0;\n        this.dataView.setUint8(this.pos, value/* , true*/);\n        this.pos += 1;\n    }\n    pcm8s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 128) + 128;\n        value = Math.max(0, Math.min(value, 255));\n        this.dataView.setUint8(this.pos, value/* , true*/);\n        this.pos += 1;\n    }\n    pcm16(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? value * 32768 : value * 32767;\n        value = Math.round(value) | 0;\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    pcm16s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 32768);\n        value = Math.max(-32768, Math.min(value, 32767));\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    pcm24(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? 0x1000000 + value * 8388608 : value * 8388607;\n        value = Math.round(value) | 0;\n\n        const x0 = (value >> 0) & 0xFF;\n        const x1 = (value >> 8) & 0xFF;\n        const x2 = (value >> 16) & 0xFF;\n\n        this.dataView.setUint8(this.pos + 0, x0);\n        this.dataView.setUint8(this.pos + 1, x1);\n        this.dataView.setUint8(this.pos + 2, x2);\n        this.pos += 3;\n    }\n    pcm24s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 8388608);\n        value = Math.max(-8388608, Math.min(value, 8388607));\n\n        const x0 = (value >> 0) & 0xFF;\n        const x1 = (value >> 8) & 0xFF;\n        const x2 = (value >> 16) & 0xFF;\n\n        this.dataView.setUint8(this.pos + 0, x0);\n        this.dataView.setUint8(this.pos + 1, x1);\n        this.dataView.setUint8(this.pos + 2, x2);\n        this.pos += 3;\n    }\n    pcm32(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? value * 2147483648 : value * 2147483647;\n        value = Math.round(value) | 0;\n        this.dataView.setInt32(this.pos, value, true);\n        this.pos += 4;\n    }\n    pcm32s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 2147483648);\n        value = Math.max(-2147483648, Math.min(value, +2147483647));\n        this.dataView.setInt32(this.pos, value, true);\n        this.pos += 4;\n    }\n    pcm32f(value: number) {\n        this.dataView.setFloat32(this.pos, value, true);\n        this.pos += 4;\n    }\n}\n\nexport default WavEncoder;\n", "export interface WavDecoderOptions {\n    symmetric?: boolean;\n    shared?: boolean;\n}\ninterface Format {\n    formatId: number;\n    float: boolean;\n    numberOfChannels: number;\n    sampleRate: number;\n    byteRate: number;\n    blockSize: number;\n    bitDepth: number;\n}\n\n/**\n * Code from https://github.com/mohayonao/wav-decoder\n */\nclass WavDecoder {\n    static decode(buffer: ArrayBuffer, options?: WavDecoderOptions) {\n        const dataView = new DataView(buffer);\n        const reader = new Reader(dataView);\n        if (reader.string(4) !== \"RIFF\") {\n            throw new TypeError(\"Invalid WAV file\");\n        }\n        reader.uint32(); // skip file length\n        if (reader.string(4) !== \"WAVE\") {\n            throw new TypeError(\"Invalid WAV file\");\n        }\n        let format: Format | null = null;\n        let audioData: {\n            numberOfChannels: number;\n            length: number;\n            sampleRate: number;\n            channelData: Float32Array[];\n        } | null = null;\n        do {\n            const chunkType = reader.string(4);\n            const chunkSize = reader.uint32();\n            if (chunkType === \"fmt \") {\n                format = this.decodeFormat(reader, chunkSize);\n            } else if (chunkType === \"data\") {\n                audioData = this.decodeData(reader, chunkSize, format as Format, options || {});\n            } else {\n                reader.skip(chunkSize);\n            }\n        } while (audioData === null);\n        return audioData;\n    }\n    private static decodeFormat(reader: Reader, chunkSize: number) {\n        const formats = {\n            0x0001: \"lpcm\",\n            0x0003: \"lpcm\"\n        };\n        const formatId = reader.uint16();\n        if (!formats.hasOwnProperty(formatId)) {\n            throw new TypeError(\"Unsupported format in WAV file: 0x\" + formatId.toString(16));\n        }\n        const format: Format = {\n            formatId: formatId,\n            float: formatId === 0x0003,\n            numberOfChannels: reader.uint16(),\n            sampleRate: reader.uint32(),\n            byteRate: reader.uint32(),\n            blockSize: reader.uint16(),\n            bitDepth: reader.uint16()\n        };\n        reader.skip(chunkSize - 16);\n        return format;\n    }\n    private static decodeData(reader: Reader, chunkSizeIn: number, format: Format, options: WavDecoderOptions) {\n        const chunkSize = Math.min(chunkSizeIn, reader.remain());\n        const length = Math.floor(chunkSize / format.blockSize);\n        const numberOfChannels = format.numberOfChannels;\n        const sampleRate = format.sampleRate;\n        const channelData: Float32Array[] = new Array(numberOfChannels);\n        for (let ch = 0; ch < numberOfChannels; ch++) {\n            const AB = options.shared ? (globalThis.SharedArrayBuffer || globalThis.ArrayBuffer) : globalThis.ArrayBuffer;\n            const ab = new AB(length * Float32Array.BYTES_PER_ELEMENT);\n            channelData[ch] = new Float32Array(ab);\n        }\n        this.readPCM(reader, channelData, length, format, options);\n        return {\n            numberOfChannels,\n            length,\n            sampleRate,\n            channelData\n        };\n    }\n    private static readPCM(reader: Reader, channelData: Float32Array[], length: number, format: Format, options: WavDecoderOptions) {\n        const bitDepth = format.bitDepth;\n        const decoderOption = format.float ? \"f\" : options.symmetric ? \"s\" : \"\";\n        const methodName = \"pcm\" + bitDepth + decoderOption as `pcm${8 | 16 | 32}${\"f\" | \"s\" | \"\"}`;\n        if (!(reader as any)[methodName]) {\n            throw new TypeError(\"Not supported bit depth: \" + format.bitDepth);\n        }\n        const read: () => number = (reader as any)[methodName].bind(reader);\n        const numberOfChannels = format.numberOfChannels;\n        for (let i = 0; i < length; i++) {\n            for (let ch = 0; ch < numberOfChannels; ch++) {\n                channelData[ch][i] = read();\n            }\n        }\n    }\n}\n\nclass Reader {\n    pos = 0;\n    dataView: DataView;\n    constructor(dataView: DataView) {\n        this.dataView = dataView;\n    }\n    remain() {\n        return this.dataView.byteLength - this.pos;\n    }\n    skip(n: number) {\n        this.pos += n;\n    }\n    uint8() {\n        const data = this.dataView.getUint8(this.pos);\n        this.pos += 1;\n        return data;\n    }\n    int16() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data;\n    }\n    uint16() {\n        const data = this.dataView.getUint16(this.pos, true);\n        this.pos += 2;\n        return data;\n    }\n    uint32() {\n        const data = this.dataView.getUint32(this.pos, true);\n        this.pos += 4;\n        return data;\n    }\n    string(n: number) {\n        let data = \"\";\n        for (let i = 0; i < n; i++) {\n            data += String.fromCharCode(this.uint8());\n        }\n        return data;\n    }\n    pcm8() {\n        const data = this.dataView.getUint8(this.pos) - 128;\n        this.pos += 1;\n        return data < 0 ? data / 128 : data / 127;\n    }\n    pcm8s() {\n        const data = this.dataView.getUint8(this.pos) - 127.5;\n        this.pos += 1;\n        return data / 127.5;\n    }\n    pcm16() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data < 0 ? data / 32768 : data / 32767;\n    }\n    pcm16s() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data / 32768;\n    }\n    pcm24() {\n        const x0 = this.dataView.getUint8(this.pos + 0);\n        const x1 = this.dataView.getUint8(this.pos + 1);\n        const x2 = this.dataView.getUint8(this.pos + 2);\n        const xx = (x0 + (x1 << 8) + (x2 << 16));\n\n        const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n        this.pos += 3;\n        return data < 0 ? data / 8388608 : data / 8388607;\n    }\n    pcm24s() {\n        const x0 = this.dataView.getUint8(this.pos + 0);\n        const x1 = this.dataView.getUint8(this.pos + 1);\n        const x2 = this.dataView.getUint8(this.pos + 2);\n        const xx = (x0 + (x1 << 8) + (x2 << 16));\n\n        const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n        this.pos += 3;\n        return data / 8388608;\n    }\n    pcm32() {\n        const data = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return data < 0 ? data / 2147483648 : data / 2147483647;\n    }\n    pcm32s() {\n        const data = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return data / 2147483648;\n    }\n    pcm32f() {\n        const data = this.dataView.getFloat32(this.pos, true);\n        this.pos += 4;\n        return data;\n    }\n    pcm64f() {\n        const data = this.dataView.getFloat64(this.pos, true);\n        this.pos += 8;\n        return data;\n    }\n}\n\nexport default WavDecoder;\n", "import { OutputParamHandler, ComputeHandler, PlotHandler, UIHandler, MetadataHandler, FaustBaseWebAudioDsp, IFaustMonoWebAudioDsp, IFaustPolyWebAudioDsp } from \"./FaustWebAudioDsp\";\nimport type { FaustAudioWorkletNodeOptions } from \"./FaustAudioWorkletProcessor\";\nimport type { LooseFaustDspFactory, FaustDspMeta, FaustUIInputItem, FaustUIItem } from \"./types\";\n\n/**\n * Base class for Monophonic and Polyphonic AudioWorkletNode\n */\nexport class FaustAudioWorkletNode<Poly extends boolean = false> extends (globalThis.AudioWorkletNode || null) {\n\n    protected fJSONDsp: FaustDspMeta;\n    protected fJSON: string;\n    protected fInputsItems: string[];\n    protected fOutputHandler: OutputParamHandler | null;\n    protected fComputeHandler: ComputeHandler | null;\n    protected fPlotHandler: PlotHandler | null;\n    protected fUICallback: UIHandler;\n    protected fDescriptor: FaustUIInputItem[];\n\n    constructor(context: BaseAudioContext, name: string, factory: LooseFaustDspFactory, options: FaustAudioWorkletNodeOptions<Poly>[\"processorOptions\"]) {\n\n        // Create JSON object\n        const JSONObj: FaustDspMeta = JSON.parse(factory.json);\n\n        // Create proxy FaustAudioWorkletProcessor\n        super(context, name, {\n            numberOfInputs: JSONObj.inputs > 0 ? 1 : 0,\n            numberOfOutputs: JSONObj.outputs > 0 ? 1 : 0,\n            channelCount: Math.max(1, JSONObj.inputs),\n            outputChannelCount: [JSONObj.outputs],\n            channelCountMode: \"explicit\",\n            channelInterpretation: \"speakers\",\n            processorOptions: options\n        });\n\n        this.fJSONDsp = JSONObj;\n        this.fJSON = factory.json;\n        this.fOutputHandler = null;\n        this.fComputeHandler = null;\n        this.fPlotHandler = null;\n        this.fDescriptor = [];\n\n        // Parse UI\n        this.fInputsItems = [];\n        this.fUICallback = (item: FaustUIItem) => {\n            if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n                // Keep inputs adresses\n                this.fInputsItems.push(item.address);\n                this.fDescriptor.push(item);\n            }\n        }\n        FaustBaseWebAudioDsp.parseUI(this.fJSONDsp.ui, this.fUICallback);\n\n        // Patch it with additional functions\n        this.port.onmessage = (e: MessageEvent) => {\n            if (e.data.type === \"param\" && this.fOutputHandler) {\n                this.fOutputHandler(e.data.path, e.data.value);\n            } else if (e.data.type === \"plot\" && this.fPlotHandler) {\n                this.fPlotHandler(e.data.value, e.data.index, e.data.events);\n            }\n        };\n    }\n\n    // Public API\n    setOutputParamHandler(handler: OutputParamHandler | null) {\n        this.fOutputHandler = handler;\n    }\n    getOutputParamHandler() {\n        return this.fOutputHandler;\n    }\n\n    setComputeHandler(handler: ComputeHandler | null) {\n        this.fComputeHandler = handler;\n    }\n    getComputeHandler(): ComputeHandler | null {\n        return this.fComputeHandler;\n    }\n\n    setPlotHandler(handler: PlotHandler | null) {\n        this.fPlotHandler = handler;\n        // Set PlotHandler on processor side\n        if (this.fPlotHandler) {\n            this.port.postMessage({ type: \"setPlotHandler\", data: true });\n        } else {\n            this.port.postMessage({ type: \"setPlotHandler\", data: false });\n        }\n    }\n    getPlotHandler(): PlotHandler | null {\n        return this.fPlotHandler;\n    }\n\n    getNumInputs() {\n        return this.fJSONDsp.inputs;\n    }\n    getNumOutputs() {\n        return this.fJSONDsp.outputs;\n    }\n\n    // Implemented in subclasses\n    compute(inputs: Float32Array[], outputs: Float32Array[]) {\n        return false;\n    }\n\n    metadata(handler: MetadataHandler) {\n        if (this.fJSONDsp.meta) {\n            this.fJSONDsp.meta.forEach(meta => handler(Object.keys(meta)[0], meta[Object.keys(meta)[0]]));\n        }\n    }\n\n    midiMessage(data: number[] | Uint8Array): void {\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (cmd === 11) this.ctrlChange(channel, data1, data2);\n        else if (cmd === 14) this.pitchWheel(channel, data2 * 128.0 + data1);\n        else this.port.postMessage({ type: \"midi\", data: data });\n    }\n\n    ctrlChange(channel: number, ctrl: number, value: number) {\n        const e = { type: \"ctrlChange\", data: [channel, ctrl, value] };\n        this.port.postMessage(e);\n    }\n    pitchWheel(channel: number, wheel: number) {\n        const e = { type: \"pitchWheel\", data: [channel, wheel] };\n        this.port.postMessage(e);\n    }\n\n    setParamValue(path: string, value: number) {\n        const e = { type: \"param\", data: { path, value } };\n        this.port.postMessage(e);\n        // Set value on AudioParam (but this is not used on Processor side for now)\n        const param = this.parameters.get(path);\n        if (param) param.setValueAtTime(value, this.context.currentTime);\n\n    }\n    getParamValue(path: string) {\n        // Get value of AudioParam\n        const param = this.parameters.get(path);\n        return (param) ? param.value : 0;\n    }\n\n    getParams() { return this.fInputsItems; }\n    getMeta() { return this.fJSONDsp; }\n    getJSON() { return JSON.stringify(this.getMeta()); }\n    getUI() { return this.fJSONDsp.ui; }\n    getDescriptors() { return this.fDescriptor; }\n\n    start() {\n        this.port.postMessage({ type: \"start\" });\n    }\n\n    stop() {\n        this.port.postMessage({ type: \"stop\" });\n    }\n\n    destroy() {\n        this.port.postMessage({ type: \"destroy\" });\n        this.port.close();\n    }\n}\n\n/**\n * Monophonic AudioWorkletNode\n */\nexport class FaustMonoAudioWorkletNode extends FaustAudioWorkletNode<false> implements IFaustMonoWebAudioDsp {\n\n    onprocessorerror = (e: Event) => {\n        // console.error(\"Error from \" + this.fJSONDsp.name + \" FaustMonoAudioWorkletNode\");\n        throw e;\n    }\n\n    constructor(context: BaseAudioContext, name: string, factory: LooseFaustDspFactory, sampleSize: number) {\n        super(context, name, factory, { name, factory, sampleSize });\n    }\n}\n\n/**\n * Polyphonic AudioWorkletNode\n */\nexport class FaustPolyAudioWorkletNode extends FaustAudioWorkletNode<true> implements IFaustPolyWebAudioDsp {\n\n    private fJSONEffect: FaustDspMeta | null;\n\n    onprocessorerror = (e: Event) => {\n        // console.error(\"Error from \" + this.fJSONDsp.name + \" FaustPolyAudioWorkletNode\");\n        throw e;\n    }\n\n    constructor(context: BaseAudioContext,\n        name: string,\n        voiceFactory: LooseFaustDspFactory,\n        mixerModule: WebAssembly.Module,\n        voices: number,\n        sampleSize: number,\n        effectFactory?: LooseFaustDspFactory) {\n\n        super(context, name, voiceFactory,\n            {\n                name,\n                voiceFactory,\n                mixerModule,\n                voices,\n                sampleSize,\n                effectFactory\n            });\n\n        this.fJSONEffect = effectFactory ? JSON.parse(effectFactory.json) : null;\n\n        if (this.fJSONEffect) {\n            FaustBaseWebAudioDsp.parseUI(this.fJSONEffect.ui, this.fUICallback);\n        }\n    }\n\n    // Public API\n    keyOn(channel: number, pitch: number, velocity: number) {\n        const e = { type: \"keyOn\", data: [channel, pitch, velocity] };\n        this.port.postMessage(e);\n    }\n\n    keyOff(channel: number, pitch: number, velocity: number) {\n        const e = { type: \"keyOff\", data: [channel, pitch, velocity] };\n        this.port.postMessage(e);\n    }\n\n    allNotesOff(hard: boolean) {\n        const e = { type: \"ctrlChange\", data: [0, 123, 0] };\n        this.port.postMessage(e);\n    }\n\n    getMeta() {\n        const o = this.fJSONDsp;\n        const e = this.fJSONEffect;\n        const r = { ...o };\n        if (e) {\n            r.ui = [{\n                type: \"tgroup\", label: \"Sequencer\", items: [\n                    { type: \"vgroup\", label: \"Instrument\", items: o.ui },\n                    { type: \"vgroup\", label: \"Effect\", items: e.ui }\n                ]\n            }];\n        } else {\n            r.ui = [{\n                type: \"tgroup\", label: \"Polyphonic\", items: [\n                    { type: \"vgroup\", label: \"Voices\", items: o.ui }\n                ]\n            }];\n        }\n        return r as FaustDspMeta;\n    }\n\n    getJSON() {\n        return JSON.stringify(this.getMeta());\n    }\n\n    getUI() {\n        return this.getMeta().ui;\n    }\n}\n", "import type { ComputeHandler, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp, IFaustMonoWebAudioDsp, IFaustPolyWebAudioDsp, MetadataHandler, OutputParamHandler, PlotHandler } from \"./FaustWebAudioDsp\";\n\n/**\n * Base class for Monophonic and Polyphonic ScriptProcessorNode\n */\nexport class FaustScriptProcessorNode<Poly extends boolean = false> extends (globalThis.ScriptProcessorNode || null) {\n    protected fDSPCode!: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp;\n\n    // Needed for ScriptProcessorNode\n    protected fInputs!: Float32Array[];\n    protected fOutputs!: Float32Array[];\n\n    init(instance: Poly extends true ? FaustPolyWebAudioDsp : FaustMonoWebAudioDsp) {\n        this.fDSPCode = instance;\n\n        this.fInputs = new Array(this.fDSPCode.getNumInputs());\n        this.fOutputs = new Array(this.fDSPCode.getNumOutputs());\n\n        this.onaudioprocess = (e) => {\n\n            // Read inputs\n            for (let chan = 0; chan < this.fDSPCode.getNumInputs(); chan++) {\n                this.fInputs[chan] = e.inputBuffer.getChannelData(chan);\n            }\n\n            // Read outputs\n            for (let chan = 0; chan < this.fDSPCode.getNumOutputs(); chan++) {\n                this.fOutputs[chan] = e.outputBuffer.getChannelData(chan);\n            }\n\n            return this.fDSPCode.compute(this.fInputs, this.fOutputs);\n        }\n\n        this.start();\n    }\n    // Public API\n    compute(input: Float32Array[], output: Float32Array[]) { return this.fDSPCode.compute(input, output); }\n\n    setOutputParamHandler(handler: OutputParamHandler) { this.fDSPCode.setOutputParamHandler(handler); }\n    getOutputParamHandler() { return this.fDSPCode.getOutputParamHandler(); }\n\n    setComputeHandler(handler: ComputeHandler) { this.fDSPCode.setComputeHandler(handler); }\n    getComputeHandler() { return this.fDSPCode.getComputeHandler(); }\n\n    setPlotHandler(handler: PlotHandler) { this.fDSPCode.setPlotHandler(handler); }\n    getPlotHandler() { return this.fDSPCode.getPlotHandler(); }\n\n    getNumInputs() { return this.fDSPCode.getNumInputs(); }\n    getNumOutputs() { return this.fDSPCode.getNumOutputs(); }\n\n    metadata(handler: MetadataHandler) { }\n\n    midiMessage(data: number[] | Uint8Array) { this.fDSPCode.midiMessage(data); }\n\n    ctrlChange(chan: number, ctrl: number, value: number) { this.fDSPCode.ctrlChange(chan, ctrl, value); }\n    pitchWheel(chan: number, value: number) { this.fDSPCode.pitchWheel(chan, value); }\n\n    setParamValue(path: string, value: number) { this.fDSPCode.setParamValue(path, value); }\n    getParamValue(path: string) { return this.fDSPCode.getParamValue(path); }\n    getParams() { return this.fDSPCode.getParams(); }\n\n    getMeta() { return this.fDSPCode.getMeta(); }\n    getJSON() { return this.fDSPCode.getJSON(); }\n    getDescriptors() { return this.fDSPCode.getDescriptors(); }\n    getUI() { return this.fDSPCode.getUI(); }\n\n    start() { this.fDSPCode.start(); }\n    stop() { this.fDSPCode.stop(); }\n\n    destroy() { this.fDSPCode.destroy(); }\n}\n\nexport class FaustMonoScriptProcessorNode extends FaustScriptProcessorNode<false> implements IFaustMonoWebAudioDsp {\n}\n\nexport class FaustPolyScriptProcessorNode extends FaustScriptProcessorNode<true> implements IFaustPolyWebAudioDsp {\n    keyOn(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOn(channel, pitch, velocity); }\n    keyOff(channel: number, pitch: number, velocity: number) { this.fDSPCode.keyOff(channel, pitch, velocity); }\n    allNotesOff(hard: boolean) { this.fDSPCode.allNotesOff(hard); }\n}\n", "import { FaustMonoAudioWorkletNode, FaustPolyAudioWorkletNode } from \"./FaustAudioWorkletNode\";\nimport getFaustAudioWorkletProcessor, { FaustData } from \"./FaustAudioWorkletProcessor\";\nimport FaustDspInstance from \"./FaustDspInstance\";\nimport FaustWasmInstantiator from \"./FaustWasmInstantiator\";\nimport { FaustMonoOfflineProcessor, FaustPolyOfflineProcessor, IFaustMonoOfflineProcessor, IFaustPolyOfflineProcessor } from \"./FaustOfflineProcessor\";\nimport { FaustMonoScriptProcessorNode, FaustPolyScriptProcessorNode } from \"./FaustScriptProcessorNode\";\nimport { FaustBaseWebAudioDsp, FaustMonoWebAudioDsp, FaustPolyWebAudioDsp, FaustWebAudioDspVoice, IFaustMonoWebAudioNode, IFaustPolyWebAudioNode } from \"./FaustWebAudioDsp\";\nimport type { IFaustCompiler } from \"./FaustCompiler\";\nimport type { FaustDspFactory, FaustDspMeta, LooseFaustDspFactory } from \"./types\";\n\nexport interface IFaustMonoDspGenerator {\n    /**\n     * Compile a monophonic DSP factory from given code.\n     * \n     * @param compiler - the Faust compiler\n     * @param name - the DSP name\n     * @param code - the DSP code\n     * @param args - the compilation parameters\n     * @returns the compiled factory or 'null' if failure\n     */\n    compile(compiler: IFaustCompiler, name: string, code: string, args: string): Promise<{\n        factory: FaustDspFactory | null;\n        name?: string;\n        meta?: FaustDspMeta;\n    } | null>;\n\n    /**\n     * Create a monophonic WebAudio node (either ScriptProcessorNode or AudioWorkletNode).\n     *\n     * @param context - the WebAudio context\n     * @param name - AudioWorklet Processor name\n     * @param factory - default is the compiled factory\n     * @param sp - whether to compile a ScriptProcessorNode or an AudioWorkletNode\n     * @param bufferSize - the buffer size in frames to be used in ScriptProcessorNode only, since AudioWorkletNode always uses 128 frames  \n     * @returns the compiled WebAudio node or 'null' if failure\n    */\n    createNode(\n        context: BaseAudioContext,\n        name?: string,\n        factory?: LooseFaustDspFactory,\n        sp?: boolean,\n        bufferSize?: number\n    ): Promise<IFaustMonoWebAudioNode | null>;\n\n    /**\n    * Create a monophonic Offline processor.\n    *\n    * @param sampleRate - the sample rate in Hz\n    * @param bufferSize - the buffer size in frames\n    * @param factory - default is the compiled factory\n    * @returns the compiled processor or 'null' if failure\n    */\n    createOfflineProcessor(sampleRate: number, bufferSize: number, factory?: LooseFaustDspFactory, meta?: FaustDspMeta): Promise<IFaustMonoOfflineProcessor | null>;\n}\n\nexport interface IFaustPolyDspGenerator {\n    /**\n     * Compile a monophonic DSP factory from given code.\n     * \n     * @param compiler - the Faust compiler\n     * @param name - the DSP name\n     * @param dspCode - the DSP code ('dsp_code' can possibly contain an integrated effect)\n     * @param args - the compilation parameters\n     * @param effectCode - optional effect DSP code\n     * @returns the compiled factory or 'null' if failure\n     */\n    compile(compiler: IFaustCompiler, name: string, dspCode: string, args: string, effectCode?: string): Promise<{\n        voiceFactory: FaustDspFactory | null;\n        effectFactory?: FaustDspFactory | null;\n    } | null>;\n    /**\n     * Create a polyphonic WebAudio node (either ScriptProcessorNode or AudioWorkletNode).\n     *\n     * @param context the WebAudio context\n     * @param voices - the number of voices\n     * @param name - AudioWorklet Processor name\n     * @param voiceFactory - the Faust factory for voices, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @param mixerModule - the wasm Mixer module (loaded from 'mixer32.wasm' or 'mixer64.wasm' files)\n     * @param effectFactory - the Faust factory for the effect, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @param sp - whether to compile a ScriptProcessorNode or an AudioWorkletNode\n     * @param bufferSize - the buffer size in frames to be used in ScriptProcessorNode only, since AudioWorkletNode always uses 128 frames\n     * @returns the compiled WebAudio node or 'null' if failure\n     */\n    createNode(\n        context: BaseAudioContext,\n        voices: number,\n        name?: string,\n        voiceFactory?: LooseFaustDspFactory,\n        mixerModule?: WebAssembly.Module,\n        effectFactory?: LooseFaustDspFactory | null,\n        sp?: boolean,\n        bufferSize?: number\n    ): Promise<IFaustPolyWebAudioNode | null>;\n\n    /**\n     * Create a monophonic Offline processor.\n     *\n     * @param sampleRate - the sample rate in Hz\n     * @param bufferSize - the buffer size in frames\n     * @param voiceFactory - the Faust factory for voices, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @param mixerModule - the wasm Mixer module (loaded from 'mixer32.wasm' or 'mixer64.wasm' files)\n     * @param effectFactory - the Faust factory for the effect, either obtained with a compiler (createDSPFactory) or loaded from files (loadDSPFactory)\n     * @returns the compiled processor or 'null' if failure\n     */\n    createOfflineProcessor(\n        sampleRate: number,\n        bufferSize: number,\n        voices: number,\n        voiceFactory?: LooseFaustDspFactory,\n        mixerModule?: WebAssembly.Module,\n        effectFactory?: LooseFaustDspFactory | null \n    ): Promise<IFaustPolyOfflineProcessor | null>;\n}\n\nexport class FaustMonoDspGenerator implements IFaustMonoDspGenerator {\n    // Set of all created WorkletProcessors, each of them has to be unique\n    private static gWorkletProcessors: Map<BaseAudioContext, Set<string>> = new Map();\n\n    name: string;\n    factory!: FaustDspFactory | null;\n\n    constructor() {\n        this.factory = null;\n    }\n    async compile(compiler: IFaustCompiler, name: string, code: string, args: string) {\n        this.factory = await compiler.createMonoDSPFactory(name, code, args);\n        if (!this.factory) return null;\n        this.name = name;\n        return this;\n    }\n\n    async createNode<SP extends boolean = false>(\n        context: BaseAudioContext,\n        name = this.name,\n        factory = this.factory as LooseFaustDspFactory,\n        sp = false as SP,\n        bufferSize = 1024,\n        processorName = factory?.shaKey || name\n    ): Promise<SP extends true ? FaustMonoScriptProcessorNode | null : FaustMonoAudioWorkletNode | null> {\n        if (!factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const meta = JSON.parse(factory.json);\n        const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n        if (sp) {\n            const instance = await FaustWasmInstantiator.createAsyncMonoDSPInstance(factory);\n            const monoDsp = new FaustMonoWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize);\n            const sp = context.createScriptProcessor(bufferSize, monoDsp.getNumInputs(), monoDsp.getNumOutputs()) as FaustMonoScriptProcessorNode;\n            Object.setPrototypeOf(sp, FaustMonoScriptProcessorNode.prototype);\n            sp.init(monoDsp);\n            return sp as SP extends true ? FaustMonoScriptProcessorNode : FaustMonoAudioWorkletNode;\n        } else {\n            // Dynamically create AudioWorkletProcessor if code not yet created\n            if (!FaustMonoDspGenerator.gWorkletProcessors.has(context)) FaustMonoDspGenerator.gWorkletProcessors.set(context, new Set());\n            if (!FaustMonoDspGenerator.gWorkletProcessors.get(context)?.has(processorName)) {\n                try {\n                    const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n    processorName,\n    dspName: name,\n    dspMeta: meta,\n    poly: false\n} as FaustData)};\n// Implementation needed classes of functions\nconst ${FaustDspInstance.name}_default = ${FaustDspInstance.toString()}\nconst ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nconst ${FaustMonoWebAudioDsp.name} = ${FaustMonoWebAudioDsp.toString()}\nconst ${FaustWasmInstantiator.name} = ${FaustWasmInstantiator.toString()}\n// Put them in dependencies\nconst dependencies = {\n    ${FaustBaseWebAudioDsp.name},\n    ${FaustMonoWebAudioDsp.name},\n    ${FaustWasmInstantiator.name}\n};\n// Generate the actual AudioWorkletProcessor code\n(${getFaustAudioWorkletProcessor.toString()})(dependencies, faustData);\n`;\n                    const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n                    await context.audioWorklet.addModule(url);\n                    // Keep the DSP name\n                    FaustMonoDspGenerator.gWorkletProcessors.get(context)?.add(processorName);\n                } catch (e) {\n                    // console.error(`=> exception raised while running createMonoNode: ${e}`);\n                    // console.error(`=> check that your page is served using https.${e}`);\n                    throw e;\n                }\n            }\n            // Create the AWN\n            const node = new FaustMonoAudioWorkletNode(context, processorName, factory, sampleSize)\n            return node as SP extends true ? FaustMonoScriptProcessorNode : FaustMonoAudioWorkletNode;\n        }\n    }\n    async createAudioWorkletProcessor(\n        name = this.name,\n        factory = this.factory as LooseFaustDspFactory,\n        processorName = factory?.shaKey || name\n    ) {\n        if (!factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const meta = JSON.parse(factory.json);\n        const dependencies = {\n            FaustBaseWebAudioDsp,\n            FaustMonoWebAudioDsp,\n            FaustWasmInstantiator,\n            FaustPolyWebAudioDsp: undefined,\n            FaustWebAudioDspVoice: undefined,\n        }\n        // const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n        // Dynamically create AudioWorkletProcessor if code not yet created\n            try {\n                // DSP name and JSON string for DSP are generated\n                const faustData = {\n                    processorName,\n                    dspName: name,\n                    dspMeta: meta,\n                    poly: false\n                } as FaustData;\n                // Generate the actual AudioWorkletProcessor code\n                const Processor = getFaustAudioWorkletProcessor(dependencies, faustData);\n                return Processor;\n            } catch (e) {\n                // console.error(`=> exception raised while running createMonoNode: ${e}`);\n                // console.error(`=> check that your page is served using https.${e}`);\n                throw e;\n            }\n    }\n    async createOfflineProcessor(\n        sampleRate: number,\n        bufferSize: number,\n        factory = this.factory as LooseFaustDspFactory,\n    ) {\n        if (!factory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const meta = JSON.parse(factory.json);\n        const instance = await FaustWasmInstantiator.createAsyncMonoDSPInstance(factory);\n        const sampleSize = meta.compile_options.match(\"-double\") ? 8 : 4;\n        const monoDsp = new FaustMonoWebAudioDsp(instance, sampleRate, sampleSize, bufferSize);\n        return new FaustMonoOfflineProcessor(monoDsp, bufferSize);\n    }\n}\n\nexport class FaustPolyDspGenerator implements IFaustPolyDspGenerator {\n    // Set of all created WorkletProcessors, each of them has to be unique\n    private static gWorkletProcessors: Map<BaseAudioContext, Set<string>> = new Map();\n\n    name: string;\n    voiceFactory!: FaustDspFactory | null;\n    effectFactory!: FaustDspFactory | null;\n    mixerBuffer!: Uint8Array;\n    mixerModule!: WebAssembly.Module;\n\n    constructor() {\n        this.voiceFactory = null;\n        this.effectFactory = null;\n    }\n    async compile(\n        compiler: IFaustCompiler,\n        name: string,\n        dspCode: string,\n        args: string,\n        effectCode = `\nadapt(1,1) = _; adapt(2,2) = _,_; adapt(1,2) = _ <: _,_; adapt(2,1) = _,_ :> _;\nadaptor(F,G) = adapt(outputs(F),inputs(G));\ndsp_code = environment{${dspCode}};\nprocess = adaptor(dsp_code.process, dsp_code.effect) : dsp_code.effect;`\n    ) {\n        this.voiceFactory = await compiler.createPolyDSPFactory(name, dspCode, args);\n        if (!this.voiceFactory) return null;\n        // Compile effect, possibly failing since 'compilePolyNode2' can be called by called by 'compilePolyNode'\n        try {\n            this.effectFactory = await compiler.createPolyDSPFactory(name, effectCode, args);\n        } catch (e) {\n            console.warn(e);\n        }\n        this.name = name;\n        const voiceMeta = JSON.parse(this.voiceFactory.json);\n        const isDouble = voiceMeta.compile_options.match(\"-double\");\n        const { mixerBuffer, mixerModule } = await compiler.getAsyncInternalMixerModule(!!isDouble);\n        this.mixerBuffer = mixerBuffer;\n        this.mixerModule = mixerModule;\n        return this;\n    }\n\n    async createNode<SP extends boolean = false>(\n        context: BaseAudioContext,\n        voices: number,\n        name = this.name,\n        voiceFactory = this.voiceFactory as LooseFaustDspFactory,\n        mixerModule = this.mixerModule,\n        effectFactory = this.effectFactory as LooseFaustDspFactory | null,\n        sp = false as SP,\n        bufferSize = 1024,\n        processorName = ((voiceFactory?.shaKey || \"\") + (effectFactory?.shaKey || \"\")) || `${name}_poly`\n    ): Promise<SP extends true ? FaustPolyScriptProcessorNode | null : FaustPolyAudioWorkletNode | null> {\n        if (!voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const voiceMeta = JSON.parse(voiceFactory.json);\n        const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : undefined;\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        if (sp) {\n            const instance = await FaustWasmInstantiator.createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory || undefined);\n            const polyDsp = new FaustPolyWebAudioDsp(instance, context.sampleRate, sampleSize, bufferSize);\n            const sp = context.createScriptProcessor(bufferSize, polyDsp.getNumInputs(), polyDsp.getNumOutputs()) as FaustPolyScriptProcessorNode;\n            Object.setPrototypeOf(sp, FaustPolyScriptProcessorNode.prototype);\n            sp.init(polyDsp);\n            return sp as SP extends true ? FaustPolyScriptProcessorNode : FaustPolyAudioWorkletNode;\n        } else {\n            // Dynamically create AudioWorkletProcessor if code not yet created\n            if (!FaustPolyDspGenerator.gWorkletProcessors.has(context)) FaustPolyDspGenerator.gWorkletProcessors.set(context, new Set());\n            if (!FaustPolyDspGenerator.gWorkletProcessors.get(context)?.has(processorName)) {\n                try {\n                    const processorCode = `\n// DSP name and JSON string for DSP are generated\nconst faustData = ${JSON.stringify({\n    processorName,\n    dspName: name,\n    dspMeta: voiceMeta,\n    poly: true,\n    effectMeta\n} as FaustData)};\n// Implementation needed classes of functions\nconst ${FaustDspInstance.name}_default = ${FaustDspInstance.toString()}\nconst ${FaustBaseWebAudioDsp.name} = ${FaustBaseWebAudioDsp.toString()}\nconst ${FaustPolyWebAudioDsp.name} = ${FaustPolyWebAudioDsp.toString()}\nconst ${FaustWebAudioDspVoice.name} = ${FaustWebAudioDspVoice.toString()}\nconst ${FaustWasmInstantiator.name} = ${FaustWasmInstantiator.toString()}\n// Put them in dependencies\nconst dependencies = {\n    ${FaustBaseWebAudioDsp.name},\n    ${FaustPolyWebAudioDsp.name},\n    ${FaustWasmInstantiator.name}\n};\n// Generate the actual AudioWorkletProcessor code\n(${getFaustAudioWorkletProcessor.toString()})(dependencies, faustData);\n`;\n                    const url = URL.createObjectURL(new Blob([processorCode], { type: \"text/javascript\" }));\n                    await context.audioWorklet.addModule(url);\n                    // Keep the DSP name\n                    FaustPolyDspGenerator.gWorkletProcessors.get(context)?.add(processorName);\n                } catch (e) {\n                    // console.error(`=> exception raised while running createPolyNode: ${e}`);\n                    // console.error(`=> check that your page is served using https.${e}`);\n                    throw e;\n                }\n            }\n            // Create the AWN\n            const node = new FaustPolyAudioWorkletNode(context, processorName, voiceFactory, mixerModule, voices, sampleSize, effectFactory || undefined);\n            return node as SP extends true ? FaustPolyScriptProcessorNode : FaustPolyAudioWorkletNode;\n        }\n    }\n    async createAudioWorkletProcessor(\n        name = this.name,\n        voiceFactory = this.voiceFactory as LooseFaustDspFactory,\n        effectFactory = this.effectFactory as LooseFaustDspFactory | null,\n        processorName = ((voiceFactory?.shaKey || \"\") + (effectFactory?.shaKey || \"\")) || `${name}_poly`\n    ) {\n        if (!voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const voiceMeta = JSON.parse(voiceFactory.json);\n        const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : undefined;\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        // Dynamically create AudioWorkletProcessor if code not yet created\n            try {\n                const dependencies = {\n                    FaustBaseWebAudioDsp,\n                    FaustMonoWebAudioDsp: undefined,\n                    FaustWasmInstantiator,\n                    FaustPolyWebAudioDsp,\n                    FaustWebAudioDspVoice,\n                };\n                // DSP name and JSON string for DSP are generated\n                const faustData = {\n                    processorName,\n                    dspName: name,\n                    dspMeta: voiceMeta,\n                    poly: true,\n                    effectMeta\n                } as FaustData;\n                // Generate the actual AudioWorkletProcessor code\n                const Processor = getFaustAudioWorkletProcessor<true>(dependencies, faustData);\n                return Processor;\n            } catch (e) {\n                // console.error(`=> exception raised while running createPolyNode: ${e}`);\n                // console.error(`=> check that your page is served using https.${e}`);\n                throw e;\n            }\n    }\n    async createOfflineProcessor(\n        sampleRate: number,\n        bufferSize: number,\n        voices: number,\n        voiceFactory = this.voiceFactory as LooseFaustDspFactory,\n        mixerModule = this.mixerModule,\n        effectFactory = this.effectFactory as LooseFaustDspFactory | null\n    ) {\n        if (!voiceFactory) throw new Error(\"Code is not compiled, please define the factory or call `await this.compile()` first.\");\n\n        const voiceMeta = JSON.parse(voiceFactory.json);\n        const effectMeta = effectFactory ? JSON.parse(effectFactory.json) : undefined;\n        const instance = await FaustWasmInstantiator.createAsyncPolyDSPInstance(voiceFactory, mixerModule, voices, effectFactory || undefined);\n        const sampleSize = voiceMeta.compile_options.match(\"-double\") ? 8 : 4;\n        const polyDsp = new FaustPolyWebAudioDsp(instance, sampleRate, sampleSize, bufferSize);\n        return new FaustPolyOfflineProcessor(polyDsp, bufferSize);\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
