{
  "version": 3,
  "sources": ["../../node_modules/js-sha256/src/sha256.js", "../../src/FaustDsp.ts", "../../src/Faust.ts", "../../src/utils.ts", "../../src/FaustProcessor.ts", "../../src/fetchModule.ts", "../../src/instantiateLibFaust.ts", "../../src/WavEncoder.ts", "../../src/WavDecoder.ts", "../../src/index.ts"],
  "sourcesContent": ["/**\n * [js-sha256]{@link https://github.com/emn178/js-sha256}\n *\n * @version 0.9.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA256_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [-2147483648, 8388608, 32768, 128];\n  var SHIFT = [24, 16, 8, 0];\n  var K = [\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n  ];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];\n\n  var blocks = [];\n\n  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (outputType, is224) {\n    return function (message) {\n      return new Sha256(is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createMethod = function (is224) {\n    var method = createOutputMethod('hex', is224);\n    if (NODE_JS) {\n      method = nodeWrap(method, is224);\n    }\n    method.create = function () {\n      return new Sha256(is224);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method, is224) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var algorithm = is224 ? 'sha224' : 'sha256';\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw new Error(ERROR);\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  var createHmacOutputMethod = function (outputType, is224) {\n    return function (key, message) {\n      return new HmacSha256(key, is224, true).update(message)[outputType]();\n    };\n  };\n\n  var createHmacMethod = function (is224) {\n    var method = createHmacOutputMethod('hex', is224);\n    method.create = function (key) {\n      return new HmacSha256(key, is224);\n    };\n    method.update = function (key, message) {\n      return method.create(key).update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createHmacOutputMethod(type, is224);\n    }\n    return method;\n  };\n\n  function Sha256(is224, sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n    } else {\n      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    if (is224) {\n      this.h0 = 0xc1059ed8;\n      this.h1 = 0x367cd507;\n      this.h2 = 0x3070dd17;\n      this.h3 = 0xf70e5939;\n      this.h4 = 0xffc00b31;\n      this.h5 = 0x68581511;\n      this.h6 = 0x64f98fa7;\n      this.h7 = 0xbefa4fa4;\n    } else { // 256\n      this.h0 = 0x6a09e667;\n      this.h1 = 0xbb67ae85;\n      this.h2 = 0x3c6ef372;\n      this.h3 = 0xa54ff53a;\n      this.h4 = 0x510e527f;\n      this.h5 = 0x9b05688c;\n      this.h6 = 0x1f83d9ab;\n      this.h7 = 0x5be0cd19;\n    }\n\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n    this.is224 = is224;\n  }\n\n  Sha256.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n          blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n          blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < 64; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < 64; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.block = blocks[16];\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Sha256.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = this.block;\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n  };\n\n  Sha256.prototype.hash = function () {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,\n      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;\n\n    for (j = 16; j < 64; ++j) {\n      // rightrotate\n      t1 = blocks[j - 15];\n      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);\n      t1 = blocks[j - 2];\n      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);\n      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;\n    }\n\n    bc = b & c;\n    for (j = 0; j < 64; j += 4) {\n      if (this.first) {\n        if (this.is224) {\n          ab = 300032;\n          t1 = blocks[0] - 1413257819;\n          h = t1 - 150054599 << 0;\n          d = t1 + 24177077 << 0;\n        } else {\n          ab = 704751109;\n          t1 = blocks[0] - 210244248;\n          h = t1 - 1521486534 << 0;\n          d = t1 + 143694565 << 0;\n        }\n        this.first = false;\n      } else {\n        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));\n        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));\n        ab = a & b;\n        maj = ab ^ (a & c) ^ bc;\n        ch = (e & f) ^ (~e & g);\n        t1 = h + s1 + ch + K[j] + blocks[j];\n        t2 = s0 + maj;\n        h = d + t1 << 0;\n        d = t1 + t2 << 0;\n      }\n      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));\n      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));\n      da = d & a;\n      maj = da ^ (d & b) ^ ab;\n      ch = (h & e) ^ (~h & f);\n      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];\n      t2 = s0 + maj;\n      g = c + t1 << 0;\n      c = t1 + t2 << 0;\n      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));\n      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));\n      cd = c & d;\n      maj = cd ^ (c & a) ^ da;\n      ch = (g & h) ^ (~g & e);\n      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];\n      t2 = s0 + maj;\n      f = b + t1 << 0;\n      b = t1 + t2 << 0;\n      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));\n      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));\n      bc = b & c;\n      maj = bc ^ (b & d) ^ cd;\n      ch = (f & g) ^ (~f & h);\n      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];\n      t2 = s0 + maj;\n      e = a + t1 << 0;\n      a = t1 + t2 << 0;\n    }\n\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n    this.h5 = this.h5 + f << 0;\n    this.h6 = this.h6 + g << 0;\n    this.h7 = this.h7 + h << 0;\n  };\n\n  Sha256.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +\n      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +\n      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +\n      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +\n      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +\n      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +\n      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +\n      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +\n      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +\n      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +\n      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +\n      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];\n    if (!this.is224) {\n      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +\n        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +\n        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +\n        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];\n    }\n    return hex;\n  };\n\n  Sha256.prototype.toString = Sha256.prototype.hex;\n\n  Sha256.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,\n      h6 = this.h6, h7 = this.h7;\n\n    var arr = [\n      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,\n      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,\n      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,\n      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,\n      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,\n      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,\n      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF\n    ];\n    if (!this.is224) {\n      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);\n    }\n    return arr;\n  };\n\n  Sha256.prototype.array = Sha256.prototype.digest;\n\n  Sha256.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    dataView.setUint32(20, this.h5);\n    dataView.setUint32(24, this.h6);\n    if (!this.is224) {\n      dataView.setUint32(28, this.h7);\n    }\n    return buffer;\n  };\n\n  function HmacSha256(key, is224, sharedMemory) {\n    var i, type = typeof key;\n    if (type === 'string') {\n      var bytes = [], length = key.length, index = 0, code;\n      for (i = 0; i < length; ++i) {\n        code = key.charCodeAt(i);\n        if (code < 0x80) {\n          bytes[index++] = code;\n        } else if (code < 0x800) {\n          bytes[index++] = (0xc0 | (code >> 6));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes[index++] = (0xe0 | (code >> 12));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));\n          bytes[index++] = (0xf0 | (code >> 18));\n          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));\n          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));\n          bytes[index++] = (0x80 | (code & 0x3f));\n        }\n      }\n      key = bytes;\n    } else {\n      if (type === 'object') {\n        if (key === null) {\n          throw new Error(ERROR);\n        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {\n          key = new Uint8Array(key);\n        } else if (!Array.isArray(key)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {\n            throw new Error(ERROR);\n          }\n        }\n      } else {\n        throw new Error(ERROR);\n      }\n    }\n\n    if (key.length > 64) {\n      key = (new Sha256(is224, true)).update(key).array();\n    }\n\n    var oKeyPad = [], iKeyPad = [];\n    for (i = 0; i < 64; ++i) {\n      var b = key[i] || 0;\n      oKeyPad[i] = 0x5c ^ b;\n      iKeyPad[i] = 0x36 ^ b;\n    }\n\n    Sha256.call(this, is224, sharedMemory);\n\n    this.update(iKeyPad);\n    this.oKeyPad = oKeyPad;\n    this.inner = true;\n    this.sharedMemory = sharedMemory;\n  }\n  HmacSha256.prototype = new Sha256();\n\n  HmacSha256.prototype.finalize = function () {\n    Sha256.prototype.finalize.call(this);\n    if (this.inner) {\n      this.inner = false;\n      var innerHash = this.array();\n      Sha256.call(this, this.is224, this.sharedMemory);\n      this.update(this.oKeyPad);\n      this.update(innerHash);\n      Sha256.prototype.finalize.call(this);\n    }\n  };\n\n  var exports = createMethod();\n  exports.sha256 = exports;\n  exports.sha224 = createMethod(true);\n  exports.sha256.hmac = createHmacMethod();\n  exports.sha224.hmac = createHmacMethod(true);\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    root.sha256 = exports.sha256;\n    root.sha224 = exports.sha224;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n", "import { CompiledCode, FaustDspMeta } from \"./types\";\n\nclass FaustDsp {\n    mainCode: CompiledCode;\n    effectCode?: CompiledCode;\n    mainModule: WebAssembly.Module;\n    mainMeta: FaustDspMeta;\n    effectModule?: WebAssembly.Module;\n    effectMeta?: FaustDspMeta;\n    constructor(mainCode: CompiledCode, effectCode?: CompiledCode) {\n        this.mainCode = mainCode;\n        this.effectCode = effectCode;\n    }\n    /**\n     * readDSPFactoryFromMachineAux\n     * Compile wasm modules from dsp and effect Uint8Arrays\n     */\n    async compile() {\n        const time1 = Date.now();\n        this.mainModule = await WebAssembly.compile(this.mainCode.wasmCModule);\n        if (!this.mainModule) {\n            throw new Error(\"Faust DSP factory cannot be compiled\");\n        }\n        const time2 = Date.now();\n        console.log(\"WASM compilation duration: \" + (time2 - time1));\n        try {\n            const json = this.mainCode.helpers.match(/getJSON\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*'(\\{.+?)';}/)[1].replace(/\\\\'/g, \"'\");\n            // const base64Code = codes.dsp.helpersCode.match(/getBase64Code\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*\"([A-Za-z0-9+/=]+?)\";[\\s\\n]+}/)[1];\n            const meta = JSON.parse(json);\n            this.mainMeta = meta;\n        } catch (e) {\n            console.error(\"Error in JSON.parse: \" + e.message);\n            throw e;\n        }\n        // Possibly compile effect\n        if (!this.effectCode) return;\n        const effectModule = new WebAssembly.Module(this.effectCode.wasmCModule);\n        this.effectModule = effectModule;\n        // 'libfaust.js' wasm backend generates UI methods, then we compile the code\n        // eval(helpers_code2);\n        // factory.getJSONeffect = eval(\"getJSON\" + factory_name2);\n        // factory.getBase64Codeeffect = eval(\"getBase64Code\" + factory_name2);\n        try {\n            const json = this.effectCode.helpers.match(/getJSON\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*'(\\{.+?)';}/)[1].replace(/\\\\'/g, \"'\");\n            // const base64Code = codes.effect.helpersCode.match(/getBase64Code\\w+?\\(\\)[\\s\\n]*{[\\s\\n]*return[\\s\\n]*\"([A-Za-z0-9+/=]+?)\";[\\s\\n]+}/)[1];\n            const meta = JSON.parse(json);\n            this.effectMeta = meta;\n        } catch (e) {\n            console.error(\"Error in JSON.parse: \" + e.message);\n            throw e;\n        }\n    }\n}\n\nexport default FaustDsp;\n", "import FaustDsp from \"./FaustDsp\";\nimport { CompiledCode, FaustModule } from \"./types\";\nimport { sha256 } from \"js-sha256\";\n\nclass Faust {\n    /**\n     * The libfaust Wasm Emscripten Module\n     */\n    private libFaust: FaustModule;\n    private createWasmCDSPFactoryFromString: ($name: number, $code: number, argc: number, $argv: number, $errorMsg: number, internalMemory: boolean) => number;\n    private deleteAllWasmCDSPFactories: () => void;\n    private expandCDSPFromString: ($name: number, $code: number, argc: number, $argv: number, $shaKey: number, $errorMsg: number) => number;\n    private getCLibFaustVersion: () => number;\n    private getWasmCModule: ($moduleCode: number) => number;\n    private getWasmCModuleSize: ($moduleCode: number) => number;\n    private getWasmCHelpers: ($moduleCode: number) => number;\n    private freeWasmCModule: ($moduleCode: number) => void;\n    private freeCMemory: ($: number) => number;\n    private cleanupAfterException: () => void;\n    private getErrorAfterException: () => number;\n    private generateCAuxFilesFromString: ($name: number, $code: number, argc: number, $argv: number, $errorMsg: number) => number;\n    getLibFaustVersion: () => string;\n    readonly version: string;\n    constructor(libFaust: FaustModule) {\n        this.libFaust = libFaust;\n        this.importLibFaustFunctions();\n        this.version = this.getLibFaustVersion();\n    }\n    private importLibFaustFunctions() {\n        if (!this.libFaust) return;\n        // Low-level API\n        this.createWasmCDSPFactoryFromString = this.libFaust.cwrap(\"createWasmCDSPFactoryFromString\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\", \"number\"]);\n        this.deleteAllWasmCDSPFactories = this.libFaust.cwrap(\"deleteAllWasmCDSPFactories\", null, []);\n        this.expandCDSPFromString = this.libFaust.cwrap(\"expandCDSPFromString\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\", \"number\"]);\n        this.getCLibFaustVersion = this.libFaust.cwrap(\"getCLibFaustVersion\", \"number\", []);\n        this.getWasmCModule = this.libFaust.cwrap(\"getWasmCModule\", \"number\", [\"number\"]);\n        this.getWasmCModuleSize = this.libFaust.cwrap(\"getWasmCModuleSize\", \"number\", [\"number\"]);\n        this.getWasmCHelpers = this.libFaust.cwrap(\"getWasmCHelpers\", \"number\", [\"number\"]);\n        this.freeWasmCModule = this.libFaust.cwrap(\"freeWasmCModule\", null, [\"number\"]);\n        this.freeCMemory = this.libFaust.cwrap(\"freeCMemory\", null, [\"number\"]);\n        this.cleanupAfterException = this.libFaust.cwrap(\"cleanupAfterException\", null, []);\n        this.getErrorAfterException = this.libFaust.cwrap(\"getErrorAfterException\", \"number\", []);\n        this.generateCAuxFilesFromString = this.libFaust.cwrap(\"generateCAuxFilesFromString\", \"number\", [\"number\", \"number\", \"number\", \"number\", \"number\"]);\n        this.getLibFaustVersion = () => this.libFaust.UTF8ToString(this.getCLibFaustVersion());\n    }\n\n    /**\n     * Generate Uint8Array and helpersCode from a dsp source code\n     *\n     * @param {string} code - dsp source code\n     * @param {string[]} [argv] - Array of paramaters to be given to the Faust compiler\n     * @param {boolean} [internalMemory] - Use internal Memory flag, false for poly, true for mono\n     */\n    private compileCode(code: string, argv: string[] = [], internalMemory: boolean = true) {\n        const codeSize = this.libFaust.lengthBytesUTF8(code) + 1;\n        const $code = this.libFaust._malloc(codeSize);\n        const name = \"FaustDSP\";\n        const nameSize = this.libFaust.lengthBytesUTF8(name) + 1;\n        const $name = this.libFaust._malloc(nameSize);\n        const $errorMsg = this.libFaust._malloc(4096);\n\n        this.libFaust.stringToUTF8(name, $name, nameSize);\n        this.libFaust.stringToUTF8(code, $code, codeSize);\n\n        // Add 'cn' option with the factory name\n        if (!argv.find(a => a === \"-cn\")) {\n            const sha1 = sha256(code + argv.join(\"\") + (internalMemory ? \"i\" : \"e\"));\n            argv.push(\"-cn\", sha1);\n        }\n\n        // Prepare 'argv_aux' array for C side\n        const ptrSize = 4;\n        const $argv = this.libFaust._malloc(argv.length * ptrSize); // Get buffer from emscripten.\n        let argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length); // Get a integer view on the newly allocated buffer.\n        for (let i = 0; i < argv.length; i++) {\n            const size$arg = this.libFaust.lengthBytesUTF8(argv[i]) + 1;\n            const $arg = this.libFaust._malloc(size$arg);\n            this.libFaust.stringToUTF8(argv[i], $arg, size$arg);\n            argvBuffer$[i] = $arg;\n        }\n        try {\n            const time1 = Date.now();\n            const $moduleCode = this.createWasmCDSPFactoryFromString($name, $code, argv.length, $argv, $errorMsg, internalMemory);\n            const time2 = Date.now();\n            console.log(\"Faust compilation duration: \" + (time2 - time1));\n            const errorMsg = this.libFaust.UTF8ToString($errorMsg);\n            if (errorMsg) throw new Error(errorMsg);\n\n            if ($moduleCode === 0) return null;\n            const $wasmCModule = this.getWasmCModule($moduleCode);\n            const wasmCModuleSize = this.getWasmCModuleSize($moduleCode);\n            // Copy native 'binary' string in JavaScript Uint8Array\n            const wasmCModule = new Uint8Array(wasmCModuleSize);\n            for (let i = 0; i < wasmCModuleSize; i++) {\n                // faster than 'getValue' which gets the type of access for each read...\n                wasmCModule[i] = this.libFaust.HEAP8[$wasmCModule + i];\n            }\n            const $helpers = this.getWasmCHelpers($moduleCode);\n            const helpers = this.libFaust.UTF8ToString($helpers);\n            // Free strings\n            this.libFaust._free($code);\n            this.libFaust._free($name);\n            this.libFaust._free($errorMsg);\n            // Free C allocated wasm module\n            this.freeWasmCModule($moduleCode);\n            // Get an updated integer view on the newly allocated buffer after possible emscripten memory grow\n            argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length);\n            // Free 'argv' C side array\n            for (let i = 0; i < argv.length; i++) {\n                this.libFaust._free(argvBuffer$[i]);\n            }\n            this.libFaust._free($argv);\n            return { wasmCModule, code, helpers } as CompiledCode;\n        } catch (e) {\n            // libfaust is compiled without C++ exception activated, so a JS exception is throwed and catched here\n            const errorMsg = this.libFaust.UTF8ToString(this.getErrorAfterException());\n            this.cleanupAfterException();\n            // Report the Emscripten error\n            throw errorMsg ? new Error(errorMsg) : e;\n        }\n    }\n\n    /**\n     * createDSPFactoryAux\n     * Generate shaKey, effects, dsp, their Wasm Modules and helpers from a dsp source code\n     *\n     * @param {string} code - dsp source code\n     * @param {string[]} argv - Array of paramaters to be given to the Faust compiler\n     * @param {boolean} internalMemory - Use internal Memory flag, false for poly, true for mono\n     */\n    async compile(code: string, argv: string[] = [], internalMemory: boolean = true) {\n        console.log(`libfaust.js version: ${this.version}`);\n        // Create 'effect' expression\n        const effectCode = `adapt(1,1) = _; adapt(2,2) = _,_; adapt(1,2) = _ <: _,_; adapt(2,1) = _,_ :> _;\nadaptor(F,G) = adapt(outputs(F),inputs(G));\ndsp_code = environment{${code}};\nprocess = adaptor(dsp_code.process, dsp_code.effect) : dsp_code.effect;`;\n        const mainCompiledCode = this.compileCode(code, argv, internalMemory);\n        let effectCompiledCode: CompiledCode;\n        try {\n            effectCompiledCode = this.compileCode(effectCode, argv, internalMemory);\n        } catch (e) {} // eslint-disable-line no-empty\n        const dsp = new FaustDsp(mainCompiledCode, effectCompiledCode);\n        await dsp.compile();\n        return dsp;\n    }\n\n    /**\n     * From a DSP source file, creates a \"self-contained\" DSP source string where all needed librairies have been included.\n     * All compilations options are 'normalized' and included as a comment in the expanded string.\n     *\n     * @param {string} code - dsp source code\n     * @param {string[]} [args] - Paramaters to be given to the Faust compiler\n     * @returns {string} \"self-contained\" DSP source string where all needed librairies\n     */\n    expandCode(code: string, args: string[] = []): string {\n        console.log(`libfaust.js version: ${this.version}`);\n        const codeSize = this.libFaust.lengthBytesUTF8(code) + 1;\n        const $code = this.libFaust._malloc(codeSize);\n        const name = \"FaustDSP\";\n        const nameSize = this.libFaust.lengthBytesUTF8(name) + 1;\n        const $name = this.libFaust._malloc(nameSize);\n        const $shaKey = this.libFaust._malloc(64);\n        const $errorMsg = this.libFaust._malloc(4096);\n\n        this.libFaust.stringToUTF8(name, $name, nameSize);\n        this.libFaust.stringToUTF8(code, $code, codeSize);\n\n        // Force \"wasm\" compilation\n        const argv = [...args, \"-lang\", \"wasm\"];\n\n        // Prepare 'argv' array for C side\n        const ptrSize = 4;\n        const $argv = this.libFaust._malloc(argv.length * ptrSize); // Get buffer from emscripten.\n        let argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length); // Get a integer view on the newly allocated buffer.\n        for (let i = 0; i < argv.length; i++) {\n            const size$arg = this.libFaust.lengthBytesUTF8(argv[i]) + 1;\n            const $arg = this.libFaust._malloc(size$arg);\n            this.libFaust.stringToUTF8(argv[i], $arg, size$arg);\n            argvBuffer$[i] = $arg;\n        }\n        try {\n            const $expandedCode = this.expandCDSPFromString($name, $code, argv.length, $argv, $shaKey, $errorMsg);\n            const expandedCode = this.libFaust.UTF8ToString($expandedCode);\n            const errorMsg = this.libFaust.UTF8ToString($errorMsg);\n            if (errorMsg) console.error(errorMsg);\n            // Free strings\n            this.libFaust._free($code);\n            this.libFaust._free($name);\n            this.libFaust._free($shaKey);\n            this.libFaust._free($errorMsg);\n            // Free C allocated expanded string\n            this.freeCMemory($expandedCode);\n            // Get an updated integer view on the newly allocated buffer after possible emscripten memory grow\n            argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length);\n            // Free 'argv' C side array\n            for (let i = 0; i < argv.length; i++) {\n                this.libFaust._free(argvBuffer$[i]);\n            }\n            this.libFaust._free($argv);\n            return expandedCode;\n        } catch (e) {\n            // libfaust is compiled without C++ exception activated, so a JS exception is throwed and catched here\n            const errorMsg = this.libFaust.UTF8ToString(this.getErrorAfterException());\n            this.cleanupAfterException();\n            // Report the Emscripten error\n            throw errorMsg ? new Error(errorMsg) : e;\n        }\n    }\n    /**\n     * Get an SVG Diagram XML File as string\n     *\n     * @param {string} code faust source code\n     * @param {string[]} args - Paramaters to be given to the Faust compiler\n     */\n    getDiagram(code: string, args: string[] = []) {\n        try {\n            const files: string[] = this.libFaust.FS.readdir('/FaustDSP-svg/');\n            files.filter(file => file !== \".\" && file !== \"..\").forEach(file => this.libFaust.FS.unlink(`/FaustDSP-svg/${file}`));\n        } catch (error) {}\n        const codeSize = this.libFaust.lengthBytesUTF8(code) + 1;\n        const $code = this.libFaust._malloc(codeSize);\n        const name = \"FaustDSP\";\n        const nameSize = this.libFaust.lengthBytesUTF8(name) + 1;\n        const $name = this.libFaust._malloc(nameSize);\n        const $errorMsg = this.libFaust._malloc(4096);\n\n        this.libFaust.stringToUTF8(name, $name, nameSize);\n        this.libFaust.stringToUTF8(code, $code, codeSize);\n        const argv = [...args, \"-lang\", \"wast\", \"-o\", \"/dev/null\", \"-svg\"];\n\n        // Prepare 'argv' array for C side\n        const ptrSize = 4;\n        const $argv = this.libFaust._malloc(argv.length * ptrSize); // Get buffer from emscripten.\n        let argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length); // Get a integer view on the newly allocated buffer.\n        for (let i = 0; i < argv.length; i++) {\n            const size$arg = this.libFaust.lengthBytesUTF8(argv[i]) + 1;\n            const $arg = this.libFaust._malloc(size$arg);\n            this.libFaust.stringToUTF8(argv[i], $arg, size$arg);\n            argvBuffer$[i] = $arg;\n        }\n        try {\n            this.generateCAuxFilesFromString($name, $code, argv.length, $argv, $errorMsg);\n            // Free strings\n            this.libFaust._free($code);\n            this.libFaust._free($name);\n            this.libFaust._free($errorMsg);\n            // Get an updated integer view on the newly allocated buffer after possible emscripten memory grow\n            argvBuffer$ = new Int32Array(this.libFaust.HEAP32.buffer, $argv, argv.length);\n            // Free 'argv' C side array\n            for (let i = 0; i < argv.length; i++) {\n                this.libFaust._free(argvBuffer$[i]);\n            }\n            this.libFaust._free($argv);\n        } catch (e) {\n            // libfaust is compiled without C++ exception activated, so a JS exception is throwed and catched here\n            const errorMsg = this.libFaust.UTF8ToString(this.getErrorAfterException());\n            this.cleanupAfterException();\n            // Report the Emscripten error\n            throw errorMsg ? new Error(errorMsg) : e;\n        }\n        const svg: Record<string, string> = {};\n        const files: string[] = this.libFaust.FS.readdir('/FaustDSP-svg/');\n        files.filter(file => file !== \".\" && file !== \"..\").forEach(file => svg[file] = this.libFaust.FS.readFile(`/FaustDSP-svg/${file}`, { encoding: \"utf8\" }) as string);\n        return svg;\n    }\n}\n\nexport default Faust;\n", "import type { FaustDspMeta } from \"./types\";\r\n\r\nexport const midiToFreq = (note: number) => 440.0 * 2 ** ((note - 69) / 12);\r\nexport const remap = (v: number, mn0: number, mx0: number, mn1: number, mx1: number) => (v - mn0) / (mx0 - mn0) * (mx1 - mn1) + mn1;\r\nexport const findPath = (o: any, p: string) => {\r\n    if (typeof o !== \"object\") return false;\r\n    if (o.address) {\r\n        return (o.address === p);\r\n    }\r\n    for (const k in o) {\r\n        if (findPath(o[k], p)) return true;\r\n    }\r\n    return false;\r\n};\r\n\r\nexport const createWasmImport = (voices: number, memory: WebAssembly.Memory) => ({\r\n    env: {\r\n        memory: voices ? memory : undefined, memoryBase: 0, tableBase: 0,\r\n        _abs: Math.abs,\r\n        // Float version\r\n        _acosf: Math.acos, _asinf: Math.asin, _atanf: Math.atan, _atan2f: Math.atan2,\r\n        _ceilf: Math.ceil, _cosf: Math.cos, _expf: Math.exp, _floorf: Math.floor,\r\n        _fmodf: (x: number, y: number) => x % y,\r\n        _logf: Math.log, _log10f: Math.log10, _max_f: Math.max, _min_f: Math.min,\r\n        _remainderf: (x: number, y: number) => x - Math.round(x / y) * y,\r\n        _powf: Math.pow, _roundf: Math.fround, _sinf: Math.sin, _sqrtf: Math.sqrt, _tanf: Math.tan,\r\n        _acoshf: Math.acosh, _asinhf: Math.asinh, _atanhf: Math.atanh,\r\n        _coshf: Math.cosh, _sinhf: Math.sinh, _tanhf: Math.tanh,\r\n        _isnanf: Number.isNaN, _isinff: (x: number) => !isFinite(x),\r\n        _copysignf: (x: number, y: number) => (Math.sign(x) === Math.sign(y) ? x : -x),\r\n\r\n        // Double version\r\n        _acos: Math.acos, _asin: Math.asin, _atan: Math.atan, _atan2: Math.atan2,\r\n        _ceil: Math.ceil, _cos: Math.cos, _exp: Math.exp, _floor: Math.floor,\r\n        _fmod: (x: number, y: number) => x % y,\r\n        _log: Math.log, _log10: Math.log10, _max_: Math.max, _min_: Math.min,\r\n        _remainder: (x: number, y: number) => x - Math.round(x / y) * y,\r\n        _pow: Math.pow, _round: Math.fround, _sin: Math.sin, _sqrt: Math.sqrt, _tan: Math.tan,\r\n        _acosh: Math.acosh, _asinh: Math.asinh, _atanh: Math.atanh,\r\n        _cosh: Math.cosh, _sinh: Math.sinh, _tanh: Math.tanh,\r\n        _isnan: Number.isNaN, _isinf: (x: number) => !isFinite(x),\r\n        _copysign: (x: number, y: number) => (Math.sign(x) === Math.sign(y) ? x : -x),\r\n\r\n        table: new WebAssembly.Table({ initial: 0, element: \"anyfunc\" })\r\n    }\r\n});\r\nexport const createWasmMemory = (voicesIn: number, dspMeta: FaustDspMeta, effectMeta: FaustDspMeta, bufferSize: number) => {\r\n    // Hack : at least 4 voices (to avoid weird wasm memory bug?)\r\n    const voices = Math.max(4, voicesIn);\r\n    // Memory allocator\r\n    const ptrSize = 4;\r\n    const sampleSize = 4;\r\n    const pow2limit = (x: number) => {\r\n        let n = 65536; // Minimum = 64 kB\r\n        while (n < x) { n *= 2; }\r\n        return n;\r\n    };\r\n    const effectSize = effectMeta ? effectMeta.size : 0;\r\n    let memorySize = pow2limit(\r\n        effectSize\r\n        + dspMeta.size * voices\r\n        + (dspMeta.inputs + dspMeta.outputs * 2)\r\n        * (ptrSize + bufferSize * sampleSize)\r\n    ) / 65536;\r\n    memorySize = Math.max(2, memorySize); // As least 2\r\n    return new WebAssembly.Memory({ initial: memorySize, maximum: memorySize });\r\n};\r\n", "import FaustDsp from \"./FaustDsp\";\nimport { FaustDspMeta, FaustUIDescriptor, FaustWebAssemblyExports, FaustWebAssemblyMixerExports, IFaustUIGroup, IFaustUIItem } from \"./types\";\nimport { createWasmImport, createWasmMemory, findPath, midiToFreq, remap } from \"./utils\";\n\nclass FaustProcessor {\n    private dsp: FaustDsp;\n    private dspModule: WebAssembly.Module;\n    private effectModule?: WebAssembly.Module;\n    private mixerModule?: WebAssembly.Module;\n\n    private dspMeta: FaustDspMeta;\n    private effectMeta?: FaustDspMeta;\n\n    private dspInstance: WebAssembly.Instance;\n    private effectInstance?: WebAssembly.Instance;\n    private mixerInstance?: WebAssembly.Instance;\n    private memory?: WebAssembly.Memory;\n\n    private bufferSize: number;\n    private sampleRate: number;\n    private voices: number;\n    private $ins: number;\n    private $outs: number;\n    private dspInChannnels: Float32Array[];\n    private dspOutChannnels: Float32Array[];\n    private fPitchwheelLabel: { path: string; min: number; max: number }[];\n    private fCtrlLabel: { path: string; min: number; max: number }[][];\n    private numIn: number;\n    private numOut: number;\n    private ptrSize: number;\n    private inputsItems: string[];\n    private outputsItems: string[];\n    private pathTable$: { [address: string]: number };\n    private sampleSize: number;\n    private $audioHeap: number;\n    private $$audioHeapInputs: number;\n    private $$audioHeapOutputs: number;\n    private $audioHeapInputs: number;\n    private $audioHeapOutputs: number;\n    private $dsp: number;\n    private factory: FaustWebAssemblyExports;\n    private HEAP: ArrayBuffer;\n    private HEAP32: Int32Array;\n    private HEAPF32: Float32Array;\n    private output: Float32Array[];\n\n    private $effect?: number;\n    private $mixing?: number;\n    private fFreqLabel$?: number[];\n    private fGateLabel$?: number[];\n    private fGainLabel$?: number[];\n    private fDate?: number;\n    private $$audioHeapMixing?: number;\n    private $audioHeapMixing?: number;\n    private mixer?: FaustWebAssemblyMixerExports;\n    private effect?: FaustWebAssemblyExports;\n    private dspVoices$?: number[];\n    private dspVoicesState?: number[];\n    private dspVoicesLevel?: number[];\n    private dspVoicesDate?: number[];\n    private kActiveVoice?: number;\n    private kFreeVoice?: number;\n    private kReleaseVoice?: number;\n    private kNoVoice?: number;\n\n    $sample: number;\n\n    constructor(options: { dsp: FaustDsp; bufferSize?: number; sampleRate?: number; voices?: number, mixerModule?: WebAssembly.Module }) {\n        const { dsp, mixerModule, bufferSize, sampleRate, voices } = options;\n        if (!dsp) throw new Error(\"No Dsp input\");\n        if (this.factory) throw new Error(\"Processor already initiated.\");\n\n        this.dsp = dsp;\n        const { mainMeta, mainModule, effectMeta, effectModule } = dsp;\n        this.dspMeta = mainMeta;\n        this.dspModule = mainModule;\n        this.effectMeta = effectMeta;\n        this.effectModule = effectModule;\n        this.mixerModule = mixerModule\n\n        this.bufferSize = bufferSize || 1024;\n        this.sampleRate = sampleRate || 48000;\n        this.voices = voices || 0;\n\n    }\n\n    async initialize() {\n        this.$ins = null;\n        this.$outs = null;\n\n        this.dspInChannnels = [];\n        this.dspOutChannnels = [];\n\n        this.fPitchwheelLabel = [];\n        this.fCtrlLabel = new Array(128).fill(null).map(() => []);\n\n        this.numIn = this.dspMeta.inputs;\n        this.numOut = this.dspMeta.outputs;\n\n        // Memory allocator\n        this.ptrSize = 4;\n        this.sampleSize = 4;\n\n        // Create the WASM instance\n        await this.instantiateWasm(this.dsp, this.mixerModule);\n        this.factory = this.dspInstance.exports as FaustWebAssemblyExports;\n        this.HEAP = this.voices ? this.memory.buffer : this.factory.memory.buffer;\n        this.HEAP32 = new Int32Array(this.HEAP);\n        this.HEAPF32 = new Float32Array(this.HEAP);\n\n        this.output = new Array(this.numOut).fill(null).map(() => new Float32Array(this.bufferSize));\n\n        // input items\n        this.inputsItems = [];\n\n        // DSP is placed first with index 0. Audio buffer start at the end of DSP.\n        this.$audioHeap = this.dspMeta.size;\n\n        // Setup pointers offset\n        this.$$audioHeapInputs = this.$audioHeap;\n        this.$$audioHeapOutputs = this.$$audioHeapInputs + this.numIn * this.ptrSize;\n\n        // Setup buffer offset\n        this.$audioHeapInputs = this.$$audioHeapOutputs + (this.numOut * this.ptrSize);\n        this.$audioHeapOutputs = this.$audioHeapInputs + (this.numIn * this.bufferSize * this.sampleSize);\n        if (this.voices) {\n            this.$$audioHeapMixing = this.$$audioHeapOutputs + this.numOut * this.ptrSize;\n            // Setup buffer offset\n            this.$audioHeapInputs = this.$$audioHeapMixing + this.numOut * this.ptrSize;\n            this.$audioHeapOutputs = this.$audioHeapInputs + this.numIn * this.bufferSize * this.sampleSize;\n            this.$audioHeapMixing = this.$audioHeapOutputs + this.numOut * this.bufferSize * this.sampleSize;\n            this.$dsp = this.$audioHeapMixing + this.numOut * this.bufferSize * this.sampleSize;\n        } else {\n            this.$audioHeapInputs = this.$$audioHeapOutputs + this.numOut * this.ptrSize;\n            this.$audioHeapOutputs = this.$audioHeapInputs + this.numIn * this.bufferSize * this.sampleSize;\n            // Start of DSP memory : Mono DSP is placed first with index 0\n            this.$dsp = 0;\n        }\n\n        if (this.voices) {\n            this.effectMeta = this.effectMeta;\n            this.$mixing = null;\n            this.fFreqLabel$ = [];\n            this.fGateLabel$ = [];\n            this.fGainLabel$ = [];\n            this.fDate = 0;\n\n            this.mixer = this.mixerInstance.exports as FaustWebAssemblyMixerExports;\n            this.effect = this.effectInstance ? this.effectInstance.exports as FaustWebAssemblyExports : null;\n\n            // Start of DSP memory ('polyphony' DSP voices)\n            this.dspVoices$ = [];\n            this.dspVoicesState = [];\n            this.dspVoicesLevel = [];\n            this.dspVoicesDate = [];\n\n            this.kActiveVoice = 0;\n            this.kFreeVoice = -1;\n            this.kReleaseVoice = -2;\n            this.kNoVoice = -3;\n\n            for (let i = 0; i < this.voices; i++) {\n                this.dspVoices$[i] = this.$dsp + i * this.dspMeta.size;\n                this.dspVoicesState[i] = this.kFreeVoice;\n                this.dspVoicesLevel[i] = 0;\n                this.dspVoicesDate[i] = 0;\n            }\n            // Effect memory starts after last voice\n            this.$effect = this.dspVoices$[this.voices - 1] + this.dspMeta.size;\n        }\n\n        this.pathTable$ = {};\n\n        this.$sample = 0;\n\n        this.setup();\n    }\n    private setup() {\n        if (this.numIn > 0) {\n            this.$ins = this.$$audioHeapInputs;\n            for (let i = 0; i < this.numIn; i++) {\n                this.HEAP32[(this.$ins >> 2) + i] = this.$audioHeapInputs + this.bufferSize * this.sampleSize * i;\n            }\n            // Prepare Ins buffer tables\n            const dspInChans = this.HEAP32.subarray(this.$ins >> 2, (this.$ins + this.numIn * this.ptrSize) >> 2);\n            for (let i = 0; i < this.numIn; i++) {\n                this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + this.bufferSize * this.sampleSize) >> 2);\n            }\n        }\n        if (this.numOut > 0) {\n            this.$outs = this.$$audioHeapOutputs;\n            if (this.voices) this.$mixing = this.$$audioHeapMixing;\n            for (let i = 0; i < this.numOut; i++) {\n                this.HEAP32[(this.$outs >> 2) + i] = this.$audioHeapOutputs + this.bufferSize * this.sampleSize * i;\n                if (this.voices) this.HEAP32[(this.$mixing >> 2) + i] = this.$audioHeapMixing + this.bufferSize * this.sampleSize * i;\n            }\n            // Prepare Out buffer tables\n            const dspOutChans = this.HEAP32.subarray(this.$outs >> 2, (this.$outs + this.numOut * this.ptrSize) >> 2);\n            for (let i = 0; i < this.numOut; i++) {\n                this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + this.bufferSize * this.sampleSize) >> 2);\n            }\n        }\n        // Parse UI\n        this.parseUI(this.dspMeta.ui);\n        if (this.effect) this.parseUI(this.effectMeta.ui);\n\n        // keep 'keyOn/keyOff' labels\n        if (this.voices) {\n            this.inputsItems.forEach((item) => {\n                if (item.endsWith(\"/gate\")) this.fGateLabel$.push(this.pathTable$[item]);\n                else if (item.endsWith(\"/freq\")) this.fFreqLabel$.push(this.pathTable$[item]);\n                else if (item.endsWith(\"/gain\")) this.fGainLabel$.push(this.pathTable$[item]);\n            });\n            // Init DSP voices\n            this.dspVoices$.forEach($voice => this.factory.init($voice, this.sampleRate));\n            // Init effect\n            if (this.effect) this.effect.init(this.$effect, this.sampleRate);\n        } else {\n            // Init DSP\n            this.factory.init(this.$dsp, this.sampleRate);\n        }\n    }\n    private async instantiateWasm(dsp: FaustDsp, mixerModule?: WebAssembly.Module) {\n        const memory = createWasmMemory(this.voices, this.dspMeta, this.effectMeta, this.bufferSize);\n        this.memory = memory;\n        const imports = createWasmImport(this.voices, memory);\n        this.dspInstance = await WebAssembly.instantiate(dsp.mainModule, imports);\n        if (dsp.effectModule) {\n            this.effectInstance = await WebAssembly.instantiate(dsp.effectModule, imports);\n        }\n        if (this.voices) {\n            const mixerImports = { imports: { print: console.log }, memory: { memory } };\n            this.mixerInstance = await new WebAssembly.Instance(mixerModule, mixerImports);\n        }\n    }\n    private parseUI(ui: FaustUIDescriptor) {\n        ui.forEach(group => this.parseGroup(group));\n    }\n    private parseGroup(group: IFaustUIGroup) {\n        if (group.items) this.parseItems(group.items);\n    }\n    private parseItems(items: IFaustUIItem[]) {\n        items.forEach(item => this.parseItem(item));\n    }\n    private parseItem(item: IFaustUIItem) {\n        if (item.type === \"vgroup\" || item.type === \"hgroup\" || item.type === \"tgroup\") {\n            this.parseItems(item.items);\n        } else if (item.type === \"hbargraph\" || item.type === \"vbargraph\") {\n            // Keep bargraph adresses\n            this.outputsItems.push(item.address);\n        } else if (item.type === \"vslider\" || item.type === \"hslider\" || item.type === \"button\" || item.type === \"checkbox\" || item.type === \"nentry\") {\n            // Keep inputs adresses\n            this.inputsItems.push(item.address);\n            if (!item.meta) return;\n            item.meta.forEach((meta) => {\n                const { midi } = meta;\n                if (!midi) return;\n                const strMidi = midi.trim();\n                if (strMidi === \"pitchwheel\") {\n                    this.fPitchwheelLabel.push({ path: item.address, min: item.min, max: item.max });\n                } else {\n                    const matched = strMidi.match(/^ctrl\\s(\\d+)/);\n                    if (!matched) return;\n                    this.fCtrlLabel[parseInt(matched[1])].push({ path: item.address, min: item.min, max: item.max });\n                }\n            });\n        }\n    }\n    setParamValue(path: string, val: number) {\n        if (this.voices) {\n            if (this.effect && findPath(this.effectMeta.ui, path)) this.effect.setParamValue(this.$effect, this.pathTable$[path], val);\n            else this.dspVoices$.forEach($voice => this.factory.setParamValue($voice, this.pathTable$[path], val));\n        } else {\n            this.factory.setParamValue(this.$dsp, this.pathTable$[path], val);\n        }\n    }\n    getParamValue(path: string) {\n        if (this.voices) {\n            if (this.effect && findPath(this.effectMeta.ui, path)) return this.effect.getParamValue(this.$effect, this.pathTable$[path]);\n            return this.factory.getParamValue(this.dspVoices$[0], this.pathTable$[path]);\n        }\n        return this.factory.getParamValue(this.$dsp, this.pathTable$[path]);\n    }\n    // Poly only methods\n    private getPlayingVoice(pitch: number) {\n        if (!this.voices) return null;\n        let voice = this.kNoVoice;\n        let oldestDatePlaying = Number.MAX_VALUE;\n        for (let i = 0; i < this.voices; i++) {\n            if (this.dspVoicesState[i] === pitch) {\n                // Keeps oldest playing voice\n                if (this.dspVoicesDate[i] < oldestDatePlaying) {\n                    oldestDatePlaying = this.dspVoicesDate[i];\n                    voice = i;\n                }\n            }\n        }\n        return voice;\n    }\n    private allocVoice(voice: number) {\n        if (!this.voices) return null;\n        // so that envelop is always re-initialized\n        this.factory.instanceClear(this.dspVoices$[voice]);\n        this.dspVoicesDate[voice] = this.fDate++;\n        this.dspVoicesState[voice] = this.kActiveVoice;\n        return voice;\n    }\n    private getFreeVoice() {\n        if (!this.voices) return null;\n        for (let i = 0; i < this.voices; i++) {\n            if (this.dspVoicesState[i] === this.kFreeVoice) return this.allocVoice(i);\n        }\n        let voiceRelease = this.kNoVoice;\n        let voicePlaying = this.kNoVoice;\n        let oldestDateRelease = Number.MAX_VALUE;\n        let oldestDatePlaying = Number.MAX_VALUE;\n        for (let i = 0; i < this.voices; i++) { // Scan all voices\n            // Try to steal a voice in kReleaseVoice mode...\n            if (this.dspVoicesState[i] === this.kReleaseVoice) {\n                // Keeps oldest release voice\n                if (this.dspVoicesDate[i] < oldestDateRelease) {\n                    oldestDateRelease = this.dspVoicesDate[i];\n                    voiceRelease = i;\n                }\n            } else if (this.dspVoicesDate[i] < oldestDatePlaying) {\n                oldestDatePlaying = this.dspVoicesDate[i];\n                voicePlaying = i;\n            }\n        }\n        // Then decide which one to steal\n        if (oldestDateRelease !== Number.MAX_VALUE) {\n            // console.log(`Steal release voice : voice_date = ${this.dspVoicesDate[voiceRelease]} cur_date = ${this.fDate} voice = ${voiceRelease}`);\n            return this.allocVoice(voiceRelease);\n        }\n        if (oldestDatePlaying !== Number.MAX_VALUE) {\n            // console.log(`Steal playing voice : voice_date = ${this.dspVoicesDate[voicePlaying]} cur_date = ${this.fDate} voice = ${voicePlaying}`);\n            return this.allocVoice(voicePlaying);\n        }\n        return this.kNoVoice;\n    }\n    keyOn(channel: number, pitch: number, velocity: number) {\n        if (!this.voices) return;\n        const voice = this.getFreeVoice();\n        // console.log(\"keyOn voice \" + voice);\n        this.fFreqLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, midiToFreq(pitch)));\n        this.fGateLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, 1));\n        this.fGainLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, velocity / 127));\n        this.dspVoicesState[voice] = pitch;\n    }\n    keyOff(channel: number, pitch: number, velocity: number) {\n        if (!this.voices) return;\n        const voice = this.getPlayingVoice(pitch);\n        if (voice === this.kNoVoice) return; // console.log(\"Playing voice not found...\");\n        // console.log(\"keyOff voice \" + voice);\n        this.fGateLabel$.forEach($ => this.factory.setParamValue(this.dspVoices$[voice], $, 0)); // No use of velocity for now...\n        this.dspVoicesState[voice] = this.kReleaseVoice; // Release voice\n    }\n    allNotesOff() {\n        if (!this.voices) return;\n        for (let i = 0; i < this.voices; i++) {\n            this.fGateLabel$.forEach($gate => this.factory.setParamValue(this.dspVoices$[i], $gate, 0));\n            this.dspVoicesState[i] = this.kReleaseVoice;\n        }\n    }\n\n    midiMessage(data: number[] | Uint8Array) {\n        const cmd = data[0] >> 4;\n        const channel = data[0] & 0xf;\n        const data1 = data[1];\n        const data2 = data[2];\n        if (channel === 9) return;\n        if (cmd === 8 || (cmd === 9 && data2 === 0)) this.keyOff(channel, data1, data2);\n        else if (cmd === 9) this.keyOn(channel, data1, data2);\n        else if (cmd === 11) this.ctrlChange(channel, data1, data2);\n        else if (cmd === 14) this.pitchWheel(channel, data2 * 128.0 + data1);\n    }\n    ctrlChange(channel: number, ctrl: number, value: number) {\n        if (ctrl === 123 || ctrl === 120) {\n            this.allNotesOff();\n        }\n        if (!this.fCtrlLabel[ctrl].length) return;\n        this.fCtrlLabel[ctrl].forEach((ctrl) => {\n            const { path } = ctrl;\n            this.setParamValue(path, remap(value, 0, 127, ctrl.min, ctrl.max));\n        });\n    }\n    pitchWheel(channel: number, wheel: number) {\n        this.fPitchwheelLabel.forEach((pw) => {\n            this.setParamValue(pw.path, remap(wheel, 0, 16383, pw.min, pw.max));\n        });\n    }\n    compute(inputs: Float32Array[] = []) {\n        if (!this.factory) return this.output;\n        for (let i = 0; i < this.numIn; i++) {\n            this.dspInChannnels[i].fill(0);\n            if (inputs[i]) this.dspInChannnels[i].set(inputs[i]);\n        }\n        if (this.voices) {\n            this.mixer.clearOutput(this.bufferSize, this.numOut, this.$outs); // First clear the outputs\n            for (let i = 0; i < this.voices; i++) { // Compute all running voices\n                this.factory.compute(this.dspVoices$[i], this.bufferSize, this.$ins, this.$mixing); // Compute voice\n                this.mixer.mixVoice(this.bufferSize, this.numOut, this.$mixing, this.$outs); // Mix it in result\n            }\n            if (this.effect) this.effect.compute(this.$effect, this.bufferSize, this.$outs, this.$outs); // Apply effect. Not a typo, effect is applied on the outs.\n        } else {\n            this.factory.compute(this.$dsp, this.bufferSize, this.$ins, this.$outs); // Compute\n        }\n        // Copy outputs\n        if (this.output !== undefined) {\n            for (let i = 0; i < this.numOut; i++) {\n                this.output[i].set(this.dspOutChannnels[i]);\n            }\n        }\n        this.$sample += this.bufferSize;\n        return this.output;\n    }\n    generate(inputs: Float32Array[] = [], length = this.bufferSize, onUpdate?: (sample: number) => any) {\n        let l = 0;\n        const outputs = new Array(this.numOut).fill(null).map(() => new Float32Array(length));\n        while (l < length) {\n            const sliceLength = Math.min(length - l, this.bufferSize);\n            const inputsCompute: Float32Array[] = [];\n            for (let i = 0; i < this.numIn; i++) {\n                let input: Float32Array;\n                if (inputs[i]) {\n                    if (inputs[i].length <= l) {\n                        input = new Float32Array(sliceLength);\n                    } else if (inputs[i].length > l + sliceLength) {\n                        input = inputs[i].subarray(l, l + sliceLength);\n                    } else {\n                        input = inputs[i].subarray(l, inputs[i].length);\n                    }\n                }\n                inputsCompute[i] = input;\n            }\n            const outputsComputed = this.compute(inputsCompute);\n            for (let i = 0; i < this.numOut; i++) {\n                const output = outputsComputed[i];\n                if (sliceLength < this.bufferSize) {\n                    outputs[i].set(output.subarray(0, sliceLength), l);\n                } else {\n                    outputs[i].set(output, l);\n                }\n            }\n            l += this.bufferSize;\n            onUpdate?.(l);\n        }\n        return outputs;\n    }\n}\n\nexport default FaustProcessor;\n", "const global: Window & { fetchModuleCache?: Map<string, any>; module: any; exports: any } = globalThis as any;\n\nconst cache = global.fetchModuleCache || new Map();\n\nconst fetchModule = async (url: string) => {\n\tconst absoluteUrl = new URL(url, location.href).href;\n\tif (cache.has(absoluteUrl)) return cache.get(absoluteUrl);\n\tlet exported: any;\n\tconst toExport = {};\n\tglobal.exports = toExport;\n\tglobal.module = { exports: toExport };\n\tconst esm = await import(/* webpackIgnore: true */absoluteUrl);\n\tconst esmKeys = Object.keys(esm);\n\tif (esmKeys.length) exported = esm;\n\telse exported = global.module.exports;\n\tdelete global.exports;\n\tdelete global.module;\n\tcache.set(absoluteUrl, exported);\n\treturn exported;\n};\n\nif (!global.fetchModuleCache) global.fetchModuleCache = cache;\n\nexport default fetchModule;\n", "import { FaustModuleFactory } from \"./types\";\nimport fetchModule from \"./fetchModule\";\n\nconst instantiateLibFaust = async (jsFile: string, dataFile = jsFile.replace(/c?js$/, \"data\"), wasmFile = jsFile.replace(/c?js$/, \"wasm\")) => {\n    /*\n    const ENVIRONMENT_IS_WEB = typeof window === \"object\";\n    const ENVIRONMENT_IS_WORKER = typeof importScripts === \"function\";\n    const ENVIRONMENT_IS_NODE = typeof process === \"object\" && typeof process.versions === \"object\" && typeof process.versions.node === \"string\";\n    const ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n    let LibFaust: FaustModuleFactory;\n    if (ENVIRONMENT_IS_NODE) {\n        const { createRequire } = await import(\"module\");\n        const require = createRequire(import.meta.url);\n        LibFaust = require(jsFile.replace(/\\.js$/, \".cjs\"));\n    } else {\n        LibFaust = (await import(jsFile)).default;\n    }\n    */\n    let LibFaust: FaustModuleFactory;\n    try {\n        LibFaust = require(jsFile);\n    } catch (error) {\n        LibFaust = await fetchModule(jsFile);\n    }\n    const locateFile = (url: string, scriptDirectory: string) => ({\n        \"libfaust-wasm.wasm\": wasmFile,\n        \"libfaust-wasm.data\": dataFile\n    }[url]) || scriptDirectory + url;\n    const libFaust = await LibFaust({ locateFile });\n    /*\n    libFaust.lengthBytesUTF8 = (str: string) => {\n        let len = 0;\n        for (let i = 0; i < str.length; ++i) {\n            let u = str.charCodeAt(i);\n            if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;\n            if (u <= 127) ++len;\n            else if (u <= 2047) len += 2;\n            else if (u <= 65535) len += 3;\n            else if (u <= 2097151) len += 4;\n            else if (u <= 67108863) len += 5;\n            else len += 6;\n        }\n        return len;\n    };\n    */\n    return libFaust;\n};\n\nexport default instantiateLibFaust;\n", "export interface WavEncoderOptions {\n    bitDepth: number;\n    float?: boolean;\n    symmetric?: boolean;\n    shared?: boolean;\n    sampleRate: number;\n}\ninterface Format {\n    formatId: number;\n    float: boolean;\n    symmetric: boolean;\n    numberOfChannels: number;\n    sampleRate: number;\n    length: number;\n    bitDepth: number;\n    byteDepth: number;\n}\n\nclass WavEncoder {\n    static encode(audioBuffer: Float32Array[], options: WavEncoderOptions) {\n        const numberOfChannels = audioBuffer.length;\n        const length = audioBuffer[0].length;\n        const { shared, float } = options;\n        const bitDepth = float ? 32 : ((options.bitDepth | 0) || 16);\n        const byteDepth = bitDepth >> 3;\n        const byteLength = length * numberOfChannels * byteDepth;\n        // eslint-disable-next-line no-undef\n        const AB = shared ? (globalThis.SharedArrayBuffer || globalThis.ArrayBuffer) : globalThis.ArrayBuffer;\n        const ab = new AB((44 + byteLength) * Uint8Array.BYTES_PER_ELEMENT);\n        const dataView = new DataView(ab);\n        const writer = new Writer(dataView);\n        const format: Format = {\n            formatId: float ? 0x0003 : 0x0001,\n            float,\n            numberOfChannels,\n            sampleRate: options.sampleRate,\n            symmetric: !!options.symmetric,\n            length,\n            bitDepth,\n            byteDepth\n        };\n        this.writeHeader(writer, format);\n        this.writeData(writer, audioBuffer, format);\n        return ab;\n    }\n    private static writeHeader(writer: Writer, format: Format) {\n        const { formatId, sampleRate, bitDepth, numberOfChannels, length, byteDepth } = format;\n        writer.string(\"RIFF\");\n        writer.uint32(writer.dataView.byteLength - 8);\n        writer.string(\"WAVE\");\n        writer.string(\"fmt \");\n        writer.uint32(16);\n        writer.uint16(formatId);\n        writer.uint16(numberOfChannels);\n        writer.uint32(sampleRate);\n        writer.uint32(sampleRate * numberOfChannels * byteDepth);\n        writer.uint16(numberOfChannels * byteDepth);\n        writer.uint16(bitDepth);\n        writer.string(\"data\");\n        writer.uint32(length * numberOfChannels * byteDepth);\n        return writer.pos;\n    }\n    private static writeData(writer: Writer, audioBuffer: Float32Array[], format: Format) {\n        const { bitDepth, float, length, numberOfChannels, symmetric } = format;\n        if (bitDepth === 32 && float) {\n            const { dataView, pos } = writer;\n            const ab = dataView.buffer;\n            const f32View = new Float32Array(ab, pos);\n            if (numberOfChannels === 1) {\n                f32View.set(audioBuffer[0]);\n                return;\n            }\n            for (let ch = 0; ch < numberOfChannels; ch++) {\n                const channel = audioBuffer[ch];\n                for (let i = 0; i < length; i++) {\n                    f32View[i * numberOfChannels + ch] = channel[i];\n                }\n            }\n            return;\n        }\n        const encoderOption = float ? \"f\" : symmetric ? \"s\" : \"\";\n        const methodName = \"pcm\" + bitDepth + encoderOption;\n\n        if (!(writer as any)[methodName]) {\n            throw new TypeError(\"Not supported bit depth: \" + bitDepth);\n        }\n\n        const write: (value: number) => void = (writer as any)[methodName].bind(writer);\n\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < numberOfChannels; j++) {\n                write(audioBuffer[j][i]);\n            }\n        }\n    }\n}\n\nclass Writer {\n    pos = 0;\n    dataView: DataView;\n    constructor(dataView: DataView) {\n        this.dataView = dataView;\n    }\n    int16(value: number) {\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    uint16(value: number) {\n        this.dataView.setUint16(this.pos, value, true);\n        this.pos += 2;\n    }\n    uint32(value: number) {\n        this.dataView.setUint32(this.pos, value, true);\n        this.pos += 4;\n    }\n    string(value: string) {\n        for (let i = 0, imax = value.length; i < imax; i++) {\n            this.dataView.setUint8(this.pos++, value.charCodeAt(i));\n        }\n    }\n    pcm8(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = (value * 0.5 + 0.5) * 255;\n        value = Math.round(value) | 0;\n        this.dataView.setUint8(this.pos, value/* , true*/);\n        this.pos += 1;\n    }\n    pcm8s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 128) + 128;\n        value = Math.max(0, Math.min(value, 255));\n        this.dataView.setUint8(this.pos, value/* , true*/);\n        this.pos += 1;\n    }\n    pcm16(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? value * 32768 : value * 32767;\n        value = Math.round(value) | 0;\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    pcm16s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 32768);\n        value = Math.max(-32768, Math.min(value, 32767));\n        this.dataView.setInt16(this.pos, value, true);\n        this.pos += 2;\n    }\n    pcm24(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? 0x1000000 + value * 8388608 : value * 8388607;\n        value = Math.round(value) | 0;\n\n        const x0 = (value >> 0) & 0xFF;\n        const x1 = (value >> 8) & 0xFF;\n        const x2 = (value >> 16) & 0xFF;\n\n        this.dataView.setUint8(this.pos + 0, x0);\n        this.dataView.setUint8(this.pos + 1, x1);\n        this.dataView.setUint8(this.pos + 2, x2);\n        this.pos += 3;\n    }\n    pcm24s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 8388608);\n        value = Math.max(-8388608, Math.min(value, 8388607));\n\n        const x0 = (value >> 0) & 0xFF;\n        const x1 = (value >> 8) & 0xFF;\n        const x2 = (value >> 16) & 0xFF;\n\n        this.dataView.setUint8(this.pos + 0, x0);\n        this.dataView.setUint8(this.pos + 1, x1);\n        this.dataView.setUint8(this.pos + 2, x2);\n        this.pos += 3;\n    }\n    pcm32(valueIn: number) {\n        let value = valueIn;\n        value = Math.max(-1, Math.min(value, +1));\n        value = value < 0 ? value * 2147483648 : value * 2147483647;\n        value = Math.round(value) | 0;\n        this.dataView.setInt32(this.pos, value, true);\n        this.pos += 4;\n    }\n    pcm32s(valueIn: number) {\n        let value = valueIn;\n        value = Math.round(value * 2147483648);\n        value = Math.max(-2147483648, Math.min(value, +2147483647));\n        this.dataView.setInt32(this.pos, value, true);\n        this.pos += 4;\n    }\n    pcm32f(value: number) {\n        this.dataView.setFloat32(this.pos, value, true);\n        this.pos += 4;\n    }\n}\n\nexport default WavEncoder;\n", "export interface WavDecoderOptions {\n    symmetric?: boolean;\n    shared?: boolean;\n}\ninterface Format {\n    formatId: number;\n    float: boolean;\n    numberOfChannels: number;\n    sampleRate: number;\n    byteRate: number;\n    blockSize: number;\n    bitDepth: number;\n}\n\nclass WavDecoder {\n    static decode(buffer: ArrayBuffer, options?: WavDecoderOptions) {\n        const dataView = new DataView(buffer);\n        const reader = new Reader(dataView);\n        if (reader.string(4) !== \"RIFF\") {\n            throw new TypeError(\"Invalid WAV file\");\n        }\n        reader.uint32(); // skip file length\n        if (reader.string(4) !== \"WAVE\") {\n            throw new TypeError(\"Invalid WAV file\");\n        }\n        let format: Format = null;\n        let audioData: {\n            numberOfChannels: number;\n            length: number;\n            sampleRate: number;\n            channelData: Float32Array[];\n        } = null;\n        do {\n            const chunkType = reader.string(4);\n            const chunkSize = reader.uint32();\n            if (chunkType === \"fmt \") {\n                format = this.decodeFormat(reader, chunkSize);\n            } else if (chunkType === \"data\") {\n                audioData = this.decodeData(reader, chunkSize, format, options || {});\n            } else {\n                reader.skip(chunkSize);\n            }\n        } while (audioData === null);\n        return audioData;\n    }\n    private static decodeFormat(reader: Reader, chunkSize: number) {\n        const formats = {\n            0x0001: \"lpcm\",\n            0x0003: \"lpcm\"\n        };\n        const formatId = reader.uint16();\n        if (!formats.hasOwnProperty(formatId)) {\n            throw new TypeError(\"Unsupported format in WAV file: 0x\" + formatId.toString(16));\n        }\n        const format: Format = {\n            formatId: formatId,\n            float: formatId === 0x0003,\n            numberOfChannels: reader.uint16(),\n            sampleRate: reader.uint32(),\n            byteRate: reader.uint32(),\n            blockSize: reader.uint16(),\n            bitDepth: reader.uint16()\n        };\n        reader.skip(chunkSize - 16);\n        return format;\n    }\n    private static decodeData(reader: Reader, chunkSizeIn: number, format: Format, options: WavDecoderOptions) {\n        const chunkSize = Math.min(chunkSizeIn, reader.remain());\n        const length = Math.floor(chunkSize / format.blockSize);\n        const numberOfChannels = format.numberOfChannels;\n        const sampleRate = format.sampleRate;\n        const channelData: Float32Array[] = new Array(numberOfChannels);\n        for (let ch = 0; ch < numberOfChannels; ch++) {\n            const AB = options.shared ? (globalThis.SharedArrayBuffer || globalThis.ArrayBuffer) : globalThis.ArrayBuffer;\n            const ab = new AB(length * Float32Array.BYTES_PER_ELEMENT);\n            channelData[ch] = new Float32Array(ab);\n        }\n        this.readPCM(reader, channelData, length, format, options);\n        return {\n            numberOfChannels,\n            length,\n            sampleRate,\n            channelData\n        };\n    }\n    private static readPCM(reader: Reader, channelData: Float32Array[], length: number, format: Format, options: WavDecoderOptions) {\n        const bitDepth = format.bitDepth;\n        const decoderOption = format.float ? \"f\" : options.symmetric ? \"s\" : \"\";\n        const methodName = \"pcm\" + bitDepth + decoderOption;\n        if (!reader[methodName]) {\n            throw new TypeError(\"Not supported bit depth: \" + format.bitDepth);\n        }\n        const read: () => number = reader[methodName].bind(reader);\n        const numberOfChannels = format.numberOfChannels;\n        for (let i = 0; i < length; i++) {\n            for (let ch = 0; ch < numberOfChannels; ch++) {\n                channelData[ch][i] = read();\n            }\n        }\n    }\n}\n\nclass Reader {\n    pos = 0;\n    dataView: DataView;\n    constructor(dataView: DataView) {\n        this.dataView = dataView;\n    }\n    remain() {\n        return this.dataView.byteLength - this.pos;\n    }\n    skip(n: number) {\n        this.pos += n;\n    }\n    uint8() {\n        const data = this.dataView.getUint8(this.pos);\n        this.pos += 1;\n        return data;\n    }\n    int16() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data;\n    }\n    uint16() {\n        const data = this.dataView.getUint16(this.pos, true);\n        this.pos += 2;\n        return data;\n    }\n    uint32() {\n        const data = this.dataView.getUint32(this.pos, true);\n        this.pos += 4;\n        return data;\n    }\n    string(n: number) {\n        let data = \"\";\n        for (let i = 0; i < n; i++) {\n            data += String.fromCharCode(this.uint8());\n        }\n        return data;\n    }\n    pcm8() {\n        const data = this.dataView.getUint8(this.pos) - 128;\n        this.pos += 1;\n        return data < 0 ? data / 128 : data / 127;\n    }\n    pcm8s() {\n        const data = this.dataView.getUint8(this.pos) - 127.5;\n        this.pos += 1;\n        return data / 127.5;\n    }\n    pcm16() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data < 0 ? data / 32768 : data / 32767;\n    }\n    pcm16s() {\n        const data = this.dataView.getInt16(this.pos, true);\n        this.pos += 2;\n        return data / 32768;\n    }\n    pcm24() {\n        const x0 = this.dataView.getUint8(this.pos + 0);\n        const x1 = this.dataView.getUint8(this.pos + 1);\n        const x2 = this.dataView.getUint8(this.pos + 2);\n        const xx = (x0 + (x1 << 8) + (x2 << 16));\n\n        const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n        this.pos += 3;\n        return data < 0 ? data / 8388608 : data / 8388607;\n    }\n    pcm24s() {\n        const x0 = this.dataView.getUint8(this.pos + 0);\n        const x1 = this.dataView.getUint8(this.pos + 1);\n        const x2 = this.dataView.getUint8(this.pos + 2);\n        const xx = (x0 + (x1 << 8) + (x2 << 16));\n\n        const data = xx > 0x800000 ? xx - 0x1000000 : xx;\n        this.pos += 3;\n        return data / 8388608;\n    }\n    pcm32() {\n        const data = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return data < 0 ? data / 2147483648 : data / 2147483647;\n    }\n    pcm32s() {\n        const data = this.dataView.getInt32(this.pos, true);\n        this.pos += 4;\n        return data / 2147483648;\n    }\n    pcm32f() {\n        const data = this.dataView.getFloat32(this.pos, true);\n        this.pos += 4;\n        return data;\n    }\n    pcm64f() {\n        const data = this.dataView.getFloat64(this.pos, true);\n        this.pos += 8;\n        return data;\n    }\n}\n\nexport default WavDecoder;\n", "import Faust from \"./Faust\";\nimport FaustProcessor from \"./FaustProcessor\";\nimport instantiateLibFaust from \"./instantiateLibFaust\";\nimport WavEncoder from \"./WavEncoder\";\nimport WavDecoder from \"./WavDecoder\";\n\nexport {\n    Faust,\n    instantiateLibFaust,\n    FaustProcessor,\n    WavEncoder,\n    WavDecoder\n};\n\nexport default {\n    Faust,\n    instantiateLibFaust,\n    FaustProcessor,\n    WavEncoder,\n    WavDecoder\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AASA,IAAC,YAAY;AACX;AAEA,UAAI,QAAQ;AACZ,UAAI,SAAS,OAAO,WAAW;AAC/B,UAAI,OAAO,SAAS,SAAS;AAC7B,UAAI,KAAK,qBAAqB;AAC5B,iBAAS;AAAA;AAEX,UAAI,aAAa,CAAC,UAAU,OAAO,SAAS;AAC5C,UAAI,UAAU,CAAC,KAAK,wBAAwB,OAAO,YAAY,YAAY,QAAQ,YAAY,QAAQ,SAAS;AAChH,UAAI,SAAS;AACX,eAAO;AAAA,iBACE,YAAY;AACrB,eAAO;AAAA;AAET,UAAI,YAAY,CAAC,KAAK,0BAA0B,OAAO,WAAW,YAAY,OAAO;AACrF,UAAI,MAAM,OAAO,WAAW,cAAc,OAAO;AACjD,UAAI,eAAe,CAAC,KAAK,6BAA6B,OAAO,gBAAgB;AAC7E,UAAI,YAAY,mBAAmB,MAAM;AACzC,UAAI,QAAQ,CAAC,aAAa,SAAS,OAAO;AAC1C,UAAI,QAAQ,CAAC,IAAI,IAAI,GAAG;AACxB,UAAI,IAAI;AAAA,QACN;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QACpF;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QACpF;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QACpF;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QACpF;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QACpF;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QACpF;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QACpF;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA,QAAY;AAAA;AAEtF,UAAI,eAAe,CAAC,OAAO,SAAS,UAAU;AAE9C,UAAI,SAAS;AAEb,UAAI,KAAK,wBAAwB,CAAC,MAAM,SAAS;AAC/C,cAAM,UAAU,SAAU,KAAK;AAC7B,iBAAO,OAAO,UAAU,SAAS,KAAK,SAAS;AAAA;AAAA;AAInD,UAAI,gBAAiB,MAAK,qCAAqC,CAAC,YAAY,SAAS;AACnF,oBAAY,SAAS,SAAU,KAAK;AAClC,iBAAO,OAAO,QAAQ,YAAY,IAAI,UAAU,IAAI,OAAO,gBAAgB;AAAA;AAAA;AAI/E,UAAI,qBAAqB,SAAU,YAAY,QAAO;AACpD,eAAO,SAAU,SAAS;AACxB,iBAAO,IAAI,OAAO,QAAO,MAAM,OAAO,SAAS;AAAA;AAAA;AAInD,UAAI,eAAe,SAAU,QAAO;AAClC,YAAI,UAAS,mBAAmB,OAAO;AACvC,YAAI,SAAS;AACX,oBAAS,SAAS,SAAQ;AAAA;AAE5B,gBAAO,SAAS,WAAY;AAC1B,iBAAO,IAAI,OAAO;AAAA;AAEpB,gBAAO,SAAS,SAAU,SAAS;AACjC,iBAAO,QAAO,SAAS,OAAO;AAAA;AAEhC,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,EAAE,GAAG;AAC5C,cAAI,OAAO,aAAa;AACxB,kBAAO,QAAQ,mBAAmB,MAAM;AAAA;AAE1C,eAAO;AAAA;AAGT,UAAI,WAAW,SAAU,QAAQ,OAAO;AACtC,YAAI,SAAS,KAAK;AAClB,YAAI,SAAS,KAAK;AAClB,YAAI,YAAY,QAAQ,WAAW;AACnC,YAAI,aAAa,SAAU,SAAS;AAClC,cAAI,OAAO,YAAY,UAAU;AAC/B,mBAAO,OAAO,WAAW,WAAW,OAAO,SAAS,QAAQ,OAAO;AAAA,iBAC9D;AACL,gBAAI,YAAY,QAAQ,YAAY,QAAW;AAC7C,oBAAM,IAAI,MAAM;AAAA,uBACP,QAAQ,gBAAgB,aAAa;AAC9C,wBAAU,IAAI,WAAW;AAAA;AAAA;AAG7B,cAAI,MAAM,QAAQ,YAAY,YAAY,OAAO,YAC/C,QAAQ,gBAAgB,QAAQ;AAChC,mBAAO,OAAO,WAAW,WAAW,OAAO,IAAI,OAAO,UAAU,OAAO;AAAA,iBAClE;AACL,mBAAO,OAAO;AAAA;AAAA;AAGlB,eAAO;AAAA;AAGT,UAAI,yBAAyB,SAAU,YAAY,QAAO;AACxD,eAAO,SAAU,KAAK,SAAS;AAC7B,iBAAO,IAAI,WAAW,KAAK,QAAO,MAAM,OAAO,SAAS;AAAA;AAAA;AAI5D,UAAI,mBAAmB,SAAU,QAAO;AACtC,YAAI,UAAS,uBAAuB,OAAO;AAC3C,gBAAO,SAAS,SAAU,KAAK;AAC7B,iBAAO,IAAI,WAAW,KAAK;AAAA;AAE7B,gBAAO,SAAS,SAAU,KAAK,SAAS;AACtC,iBAAO,QAAO,OAAO,KAAK,OAAO;AAAA;AAEnC,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,EAAE,GAAG;AAC5C,cAAI,OAAO,aAAa;AACxB,kBAAO,QAAQ,uBAAuB,MAAM;AAAA;AAE9C,eAAO;AAAA;AAGT,sBAAgB,QAAO,cAAc;AACnC,YAAI,cAAc;AAChB,iBAAO,KAAK,OAAO,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO,KACtD,OAAO,KAAK,OAAO,KAAK,OAAO,KAAK,OAAO,KAC3C,OAAO,KAAK,OAAO,KAAK,OAAO,MAAM,OAAO,MAC5C,OAAO,MAAM,OAAO,MAAM,OAAO,MAAM,OAAO,MAAM;AACtD,eAAK,SAAS;AAAA,eACT;AACL,eAAK,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA;AAGjE,YAAI,QAAO;AACT,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AAAA,eACL;AACL,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AACV,eAAK,KAAK;AAAA;AAGZ,aAAK,QAAQ,KAAK,QAAQ,KAAK,QAAQ,KAAK,SAAS;AACrD,aAAK,YAAY,KAAK,SAAS;AAC/B,aAAK,QAAQ;AACb,aAAK,QAAQ;AAAA;AAGf,aAAO,UAAU,SAAS,SAAU,SAAS;AAC3C,YAAI,KAAK,WAAW;AAClB;AAAA;AAEF,YAAI,WAAW,OAAO,OAAO;AAC7B,YAAI,SAAS,UAAU;AACrB,cAAI,SAAS,UAAU;AACrB,gBAAI,YAAY,MAAM;AACpB,oBAAM,IAAI,MAAM;AAAA,uBACP,gBAAgB,QAAQ,gBAAgB,aAAa;AAC9D,wBAAU,IAAI,WAAW;AAAA,uBAChB,CAAC,MAAM,QAAQ,UAAU;AAClC,kBAAI,CAAC,gBAAgB,CAAC,YAAY,OAAO,UAAU;AACjD,sBAAM,IAAI,MAAM;AAAA;AAAA;AAAA,iBAGf;AACL,kBAAM,IAAI,MAAM;AAAA;AAElB,sBAAY;AAAA;AAEd,YAAI,MAAM,QAAQ,GAAG,GAAG,SAAS,QAAQ,QAAQ,UAAS,KAAK;AAE/D,eAAO,QAAQ,QAAQ;AACrB,cAAI,KAAK,QAAQ;AACf,iBAAK,SAAS;AACd,oBAAO,KAAK,KAAK;AACjB,oBAAO,MAAM,QAAO,KAAK,QAAO,KAAK,QAAO,KAC1C,QAAO,KAAK,QAAO,KAAK,QAAO,KAAK,QAAO,KAC3C,QAAO,KAAK,QAAO,KAAK,QAAO,MAAM,QAAO,MAC5C,QAAO,MAAM,QAAO,MAAM,QAAO,MAAM,QAAO,MAAM;AAAA;AAGxD,cAAI,WAAW;AACb,iBAAK,IAAI,KAAK,OAAO,QAAQ,UAAU,IAAI,IAAI,EAAE,OAAO;AACtD,sBAAO,KAAK,MAAM,QAAQ,UAAU,MAAM,MAAM;AAAA;AAAA,iBAE7C;AACL,iBAAK,IAAI,KAAK,OAAO,QAAQ,UAAU,IAAI,IAAI,EAAE,OAAO;AACtD,qBAAO,QAAQ,WAAW;AAC1B,kBAAI,OAAO,KAAM;AACf,wBAAO,KAAK,MAAM,QAAQ,MAAM,MAAM;AAAA,yBAC7B,OAAO,MAAO;AACvB,wBAAO,KAAK,MAAO,OAAQ,QAAQ,MAAO,MAAM,MAAM;AACtD,wBAAO,KAAK,MAAO,OAAQ,OAAO,OAAU,MAAM,MAAM;AAAA,yBAC/C,OAAO,SAAU,QAAQ,OAAQ;AAC1C,wBAAO,KAAK,MAAO,OAAQ,QAAQ,OAAQ,MAAM,MAAM;AACvD,wBAAO,KAAK,MAAO,OAAS,QAAQ,IAAK,OAAU,MAAM,MAAM;AAC/D,wBAAO,KAAK,MAAO,OAAQ,OAAO,OAAU,MAAM,MAAM;AAAA,qBACnD;AACL,uBAAO,QAAa,SAAO,SAAU,KAAO,QAAQ,WAAW,EAAE,SAAS;AAC1E,wBAAO,KAAK,MAAO,OAAQ,QAAQ,OAAQ,MAAM,MAAM;AACvD,wBAAO,KAAK,MAAO,OAAS,QAAQ,KAAM,OAAU,MAAM,MAAM;AAChE,wBAAO,KAAK,MAAO,OAAS,QAAQ,IAAK,OAAU,MAAM,MAAM;AAC/D,wBAAO,KAAK,MAAO,OAAQ,OAAO,OAAU,MAAM,MAAM;AAAA;AAAA;AAAA;AAK9D,eAAK,gBAAgB;AACrB,eAAK,SAAS,IAAI,KAAK;AACvB,cAAI,KAAK,IAAI;AACX,iBAAK,QAAQ,QAAO;AACpB,iBAAK,QAAQ,IAAI;AACjB,iBAAK;AACL,iBAAK,SAAS;AAAA,iBACT;AACL,iBAAK,QAAQ;AAAA;AAAA;AAGjB,YAAI,KAAK,QAAQ,YAAY;AAC3B,eAAK,UAAU,KAAK,QAAQ,cAAc;AAC1C,eAAK,QAAQ,KAAK,QAAQ;AAAA;AAE5B,eAAO;AAAA;AAGT,aAAO,UAAU,WAAW,WAAY;AACtC,YAAI,KAAK,WAAW;AAClB;AAAA;AAEF,aAAK,YAAY;AACjB,YAAI,UAAS,KAAK,QAAQ,IAAI,KAAK;AACnC,gBAAO,MAAM,KAAK;AAClB,gBAAO,KAAK,MAAM,MAAM,IAAI;AAC5B,aAAK,QAAQ,QAAO;AACpB,YAAI,KAAK,IAAI;AACX,cAAI,CAAC,KAAK,QAAQ;AAChB,iBAAK;AAAA;AAEP,kBAAO,KAAK,KAAK;AACjB,kBAAO,MAAM,QAAO,KAAK,QAAO,KAAK,QAAO,KAC1C,QAAO,KAAK,QAAO,KAAK,QAAO,KAAK,QAAO,KAC3C,QAAO,KAAK,QAAO,KAAK,QAAO,MAAM,QAAO,MAC5C,QAAO,MAAM,QAAO,MAAM,QAAO,MAAM,QAAO,MAAM;AAAA;AAExD,gBAAO,MAAM,KAAK,UAAU,IAAI,KAAK,UAAU;AAC/C,gBAAO,MAAM,KAAK,SAAS;AAC3B,aAAK;AAAA;AAGP,aAAO,UAAU,OAAO,WAAY;AAClC,YAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IACzF,IAAI,KAAK,IAAI,UAAS,KAAK,QAAQ,GAAG,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAE7E,aAAK,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG;AAExB,eAAK,QAAO,IAAI;AAChB,eAAO,QAAO,IAAM,MAAM,MAAS,QAAO,KAAO,MAAM,MAAQ,OAAO;AACtE,eAAK,QAAO,IAAI;AAChB,eAAO,QAAO,KAAO,MAAM,MAAS,QAAO,KAAO,MAAM,MAAQ,OAAO;AACvE,kBAAO,KAAK,QAAO,IAAI,MAAM,KAAK,QAAO,IAAI,KAAK,MAAM;AAAA;AAG1D,aAAK,IAAI;AACT,aAAK,IAAI,GAAG,IAAI,IAAI,KAAK,GAAG;AAC1B,cAAI,KAAK,OAAO;AACd,gBAAI,KAAK,OAAO;AACd,mBAAK;AACL,mBAAK,QAAO,KAAK;AACjB,kBAAI,KAAK,aAAa;AACtB,kBAAI,KAAK,YAAY;AAAA,mBAChB;AACL,mBAAK;AACL,mBAAK,QAAO,KAAK;AACjB,kBAAI,KAAK,cAAc;AACvB,kBAAI,KAAK,aAAa;AAAA;AAExB,iBAAK,QAAQ;AAAA,iBACR;AACL,iBAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,iBAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,iBAAK,IAAI;AACT,kBAAM,KAAM,IAAI,IAAK;AACrB,iBAAM,IAAI,IAAM,CAAC,IAAI;AACrB,iBAAK,IAAI,KAAK,KAAK,EAAE,KAAK,QAAO;AACjC,iBAAK,KAAK;AACV,gBAAI,IAAI,MAAM;AACd,gBAAI,KAAK,MAAM;AAAA;AAEjB,eAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,eAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,eAAK,IAAI;AACT,gBAAM,KAAM,IAAI,IAAK;AACrB,eAAM,IAAI,IAAM,CAAC,IAAI;AACrB,eAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,QAAO,IAAI;AACzC,eAAK,KAAK;AACV,cAAI,IAAI,MAAM;AACd,cAAI,KAAK,MAAM;AACf,eAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,eAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,eAAK,IAAI;AACT,gBAAM,KAAM,IAAI,IAAK;AACrB,eAAM,IAAI,IAAM,CAAC,IAAI;AACrB,eAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,QAAO,IAAI;AACzC,eAAK,KAAK;AACV,cAAI,IAAI,MAAM;AACd,cAAI,KAAK,MAAM;AACf,eAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,eAAO,OAAM,IAAM,KAAK,MAAS,OAAM,KAAO,KAAK,MAAS,OAAM,KAAO,KAAK;AAC9E,eAAK,IAAI;AACT,gBAAM,KAAM,IAAI,IAAK;AACrB,eAAM,IAAI,IAAM,CAAC,IAAI;AACrB,eAAK,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,QAAO,IAAI;AACzC,eAAK,KAAK;AACV,cAAI,IAAI,MAAM;AACd,cAAI,KAAK,MAAM;AAAA;AAGjB,aAAK,KAAK,KAAK,KAAK,KAAK;AACzB,aAAK,KAAK,KAAK,KAAK,KAAK;AACzB,aAAK,KAAK,KAAK,KAAK,KAAK;AACzB,aAAK,KAAK,KAAK,KAAK,KAAK;AACzB,aAAK,KAAK,KAAK,KAAK,KAAK;AACzB,aAAK,KAAK,KAAK,KAAK,KAAK;AACzB,aAAK,KAAK,KAAK,KAAK,KAAK;AACzB,aAAK,KAAK,KAAK,KAAK,KAAK;AAAA;AAG3B,aAAO,UAAU,MAAM,WAAY;AACjC,aAAK;AAEL,YAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAClF,KAAK,KAAK,IAAI,KAAK,KAAK;AAE1B,YAAI,MAAM,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MAC9D,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK,MAC7C,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK,MAC7C,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK,MAC7C,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK,MAC7C,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK,MAC7C,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK,MAC7C,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK;AAC/C,YAAI,CAAC,KAAK,OAAO;AACf,iBAAO,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MAC3D,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,KAAM,MACtD,UAAW,MAAM,KAAM,MAAQ,UAAW,MAAM,IAAK,MACrD,UAAW,MAAM,IAAK,MAAQ,UAAU,KAAK;AAAA;AAEjD,eAAO;AAAA;AAGT,aAAO,UAAU,WAAW,OAAO,UAAU;AAE7C,aAAO,UAAU,SAAS,WAAY;AACpC,aAAK;AAEL,YAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,IAClF,KAAK,KAAK,IAAI,KAAK,KAAK;AAE1B,YAAI,MAAM;AAAA,UACP,MAAM,KAAM;AAAA,UAAO,MAAM,KAAM;AAAA,UAAO,MAAM,IAAK;AAAA,UAAM,KAAK;AAAA,UAC5D,MAAM,KAAM;AAAA,UAAO,MAAM,KAAM;AAAA,UAAO,MAAM,IAAK;AAAA,UAAM,KAAK;AAAA,UAC5D,MAAM,KAAM;AAAA,UAAO,MAAM,KAAM;AAAA,UAAO,MAAM,IAAK;AAAA,UAAM,KAAK;AAAA,UAC5D,MAAM,KAAM;AAAA,UAAO,MAAM,KAAM;AAAA,UAAO,MAAM,IAAK;AAAA,UAAM,KAAK;AAAA,UAC5D,MAAM,KAAM;AAAA,UAAO,MAAM,KAAM;AAAA,UAAO,MAAM,IAAK;AAAA,UAAM,KAAK;AAAA,UAC5D,MAAM,KAAM;AAAA,UAAO,MAAM,KAAM;AAAA,UAAO,MAAM,IAAK;AAAA,UAAM,KAAK;AAAA,UAC5D,MAAM,KAAM;AAAA,UAAO,MAAM,KAAM;AAAA,UAAO,MAAM,IAAK;AAAA,UAAM,KAAK;AAAA;AAE/D,YAAI,CAAC,KAAK,OAAO;AACf,cAAI,KAAM,MAAM,KAAM,KAAO,MAAM,KAAM,KAAO,MAAM,IAAK,KAAM,KAAK;AAAA;AAExE,eAAO;AAAA;AAGT,aAAO,UAAU,QAAQ,OAAO,UAAU;AAE1C,aAAO,UAAU,cAAc,WAAY;AACzC,aAAK;AAEL,YAAI,SAAS,IAAI,YAAY,KAAK,QAAQ,KAAK;AAC/C,YAAI,WAAW,IAAI,SAAS;AAC5B,iBAAS,UAAU,GAAG,KAAK;AAC3B,iBAAS,UAAU,GAAG,KAAK;AAC3B,iBAAS,UAAU,GAAG,KAAK;AAC3B,iBAAS,UAAU,IAAI,KAAK;AAC5B,iBAAS,UAAU,IAAI,KAAK;AAC5B,iBAAS,UAAU,IAAI,KAAK;AAC5B,iBAAS,UAAU,IAAI,KAAK;AAC5B,YAAI,CAAC,KAAK,OAAO;AACf,mBAAS,UAAU,IAAI,KAAK;AAAA;AAE9B,eAAO;AAAA;AAGT,0BAAoB,KAAK,QAAO,cAAc;AAC5C,YAAI,GAAG,OAAO,OAAO;AACrB,YAAI,SAAS,UAAU;AACrB,cAAI,QAAQ,IAAI,SAAS,IAAI,QAAQ,QAAQ,GAAG;AAChD,eAAK,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC3B,mBAAO,IAAI,WAAW;AACtB,gBAAI,OAAO,KAAM;AACf,oBAAM,WAAW;AAAA,uBACR,OAAO,MAAO;AACvB,oBAAM,WAAY,MAAQ,QAAQ;AAClC,oBAAM,WAAY,MAAQ,OAAO;AAAA,uBACxB,OAAO,SAAU,QAAQ,OAAQ;AAC1C,oBAAM,WAAY,MAAQ,QAAQ;AAClC,oBAAM,WAAY,MAAS,QAAQ,IAAK;AACxC,oBAAM,WAAY,MAAQ,OAAO;AAAA,mBAC5B;AACL,qBAAO,QAAa,SAAO,SAAU,KAAO,IAAI,WAAW,EAAE,KAAK;AAClE,oBAAM,WAAY,MAAQ,QAAQ;AAClC,oBAAM,WAAY,MAAS,QAAQ,KAAM;AACzC,oBAAM,WAAY,MAAS,QAAQ,IAAK;AACxC,oBAAM,WAAY,MAAQ,OAAO;AAAA;AAAA;AAGrC,gBAAM;AAAA,eACD;AACL,cAAI,SAAS,UAAU;AACrB,gBAAI,QAAQ,MAAM;AAChB,oBAAM,IAAI,MAAM;AAAA,uBACP,gBAAgB,IAAI,gBAAgB,aAAa;AAC1D,oBAAM,IAAI,WAAW;AAAA,uBACZ,CAAC,MAAM,QAAQ,MAAM;AAC9B,kBAAI,CAAC,gBAAgB,CAAC,YAAY,OAAO,MAAM;AAC7C,sBAAM,IAAI,MAAM;AAAA;AAAA;AAAA,iBAGf;AACL,kBAAM,IAAI,MAAM;AAAA;AAAA;AAIpB,YAAI,IAAI,SAAS,IAAI;AACnB,gBAAO,IAAI,OAAO,QAAO,MAAO,OAAO,KAAK;AAAA;AAG9C,YAAI,UAAU,IAAI,UAAU;AAC5B,aAAK,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG;AACvB,cAAI,IAAI,IAAI,MAAM;AAClB,kBAAQ,KAAK,KAAO;AACpB,kBAAQ,KAAK,KAAO;AAAA;AAGtB,eAAO,KAAK,MAAM,QAAO;AAEzB,aAAK,OAAO;AACZ,aAAK,UAAU;AACf,aAAK,QAAQ;AACb,aAAK,eAAe;AAAA;AAEtB,iBAAW,YAAY,IAAI;AAE3B,iBAAW,UAAU,WAAW,WAAY;AAC1C,eAAO,UAAU,SAAS,KAAK;AAC/B,YAAI,KAAK,OAAO;AACd,eAAK,QAAQ;AACb,cAAI,YAAY,KAAK;AACrB,iBAAO,KAAK,MAAM,KAAK,OAAO,KAAK;AACnC,eAAK,OAAO,KAAK;AACjB,eAAK,OAAO;AACZ,iBAAO,UAAU,SAAS,KAAK;AAAA;AAAA;AAInC,UAAI,UAAU;AACd,cAAQ,SAAS;AACjB,cAAQ,SAAS,aAAa;AAC9B,cAAQ,OAAO,OAAO;AACtB,cAAQ,OAAO,OAAO,iBAAiB;AAEvC,UAAI,WAAW;AACb,eAAO,UAAU;AAAA,aACZ;AACL,aAAK,SAAS,QAAQ;AACtB,aAAK,SAAS,QAAQ;AACtB,YAAI,KAAK;AACP,iBAAO,WAAY;AACjB,mBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC/ff,qBAAe;AAAA,EAOX,YAAY,UAAwB,YAA2B;AAC3D,SAAK,WAAW;AAChB,SAAK,aAAa;AAAA;AAAA,QAMhB,UAAU;AACZ,UAAM,QAAQ,KAAK;AACnB,SAAK,aAAa,MAAM,YAAY,QAAQ,KAAK,SAAS;AAC1D,QAAI,CAAC,KAAK,YAAY;AAClB,YAAM,IAAI,MAAM;AAAA;AAEpB,UAAM,QAAQ,KAAK;AACnB,YAAQ,IAAI,gCAAiC,SAAQ;AACrD,QAAI;AACA,YAAM,OAAO,KAAK,SAAS,QAAQ,MAAM,0DAA0D,GAAG,QAAQ,QAAQ;AAEtH,YAAM,OAAO,KAAK,MAAM;AACxB,WAAK,WAAW;AAAA,aACX,GAAP;AACE,cAAQ,MAAM,0BAA0B,EAAE;AAC1C,YAAM;AAAA;AAGV,QAAI,CAAC,KAAK;AAAY;AACtB,UAAM,eAAe,IAAI,YAAY,OAAO,KAAK,WAAW;AAC5D,SAAK,eAAe;AAKpB,QAAI;AACA,YAAM,OAAO,KAAK,WAAW,QAAQ,MAAM,0DAA0D,GAAG,QAAQ,QAAQ;AAExH,YAAM,OAAO,KAAK,MAAM;AACxB,WAAK,aAAa;AAAA,aACb,GAAP;AACE,cAAQ,MAAM,0BAA0B,EAAE;AAC1C,YAAM;AAAA;AAAA;AAAA;AAKlB,IAAO,mBAAQ;;;ACpDf,uBAAuB;AAEvB,kBAAY;AAAA,EAmBR,YAAY,UAAuB;AAC/B,SAAK,WAAW;AAChB,SAAK;AACL,SAAK,UAAU,KAAK;AAAA;AAAA,EAEhB,0BAA0B;AAC9B,QAAI,CAAC,KAAK;AAAU;AAEpB,SAAK,kCAAkC,KAAK,SAAS,MAAM,mCAAmC,UAAU,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU;AAC3J,SAAK,6BAA6B,KAAK,SAAS,MAAM,8BAA8B,MAAM;AAC1F,SAAK,uBAAuB,KAAK,SAAS,MAAM,wBAAwB,UAAU,CAAC,UAAU,UAAU,UAAU,UAAU,UAAU;AACrI,SAAK,sBAAsB,KAAK,SAAS,MAAM,uBAAuB,UAAU;AAChF,SAAK,iBAAiB,KAAK,SAAS,MAAM,kBAAkB,UAAU,CAAC;AACvE,SAAK,qBAAqB,KAAK,SAAS,MAAM,sBAAsB,UAAU,CAAC;AAC/E,SAAK,kBAAkB,KAAK,SAAS,MAAM,mBAAmB,UAAU,CAAC;AACzE,SAAK,kBAAkB,KAAK,SAAS,MAAM,mBAAmB,MAAM,CAAC;AACrE,SAAK,cAAc,KAAK,SAAS,MAAM,eAAe,MAAM,CAAC;AAC7D,SAAK,wBAAwB,KAAK,SAAS,MAAM,yBAAyB,MAAM;AAChF,SAAK,yBAAyB,KAAK,SAAS,MAAM,0BAA0B,UAAU;AACtF,SAAK,8BAA8B,KAAK,SAAS,MAAM,+BAA+B,UAAU,CAAC,UAAU,UAAU,UAAU,UAAU;AACzI,SAAK,qBAAqB,MAAM,KAAK,SAAS,aAAa,KAAK;AAAA;AAAA,EAU5D,YAAY,MAAc,OAAiB,IAAI,iBAA0B,MAAM;AACnF,UAAM,WAAW,KAAK,SAAS,gBAAgB,QAAQ;AACvD,UAAM,QAAQ,KAAK,SAAS,QAAQ;AACpC,UAAM,OAAO;AACb,UAAM,WAAW,KAAK,SAAS,gBAAgB,QAAQ;AACvD,UAAM,QAAQ,KAAK,SAAS,QAAQ;AACpC,UAAM,YAAY,KAAK,SAAS,QAAQ;AAExC,SAAK,SAAS,aAAa,MAAM,OAAO;AACxC,SAAK,SAAS,aAAa,MAAM,OAAO;AAGxC,QAAI,CAAC,KAAK,KAAK,OAAK,MAAM,QAAQ;AAC9B,YAAM,OAAO,6BAAO,OAAO,KAAK,KAAK,MAAO,kBAAiB,MAAM;AACnE,WAAK,KAAK,OAAO;AAAA;AAIrB,UAAM,UAAU;AAChB,UAAM,QAAQ,KAAK,SAAS,QAAQ,KAAK,SAAS;AAClD,QAAI,cAAc,IAAI,WAAW,KAAK,SAAS,OAAO,QAAQ,OAAO,KAAK;AAC1E,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAM,WAAW,KAAK,SAAS,gBAAgB,KAAK,MAAM;AAC1D,YAAM,OAAO,KAAK,SAAS,QAAQ;AACnC,WAAK,SAAS,aAAa,KAAK,IAAI,MAAM;AAC1C,kBAAY,KAAK;AAAA;AAErB,QAAI;AACA,YAAM,QAAQ,KAAK;AACnB,YAAM,cAAc,KAAK,gCAAgC,OAAO,OAAO,KAAK,QAAQ,OAAO,WAAW;AACtG,YAAM,QAAQ,KAAK;AACnB,cAAQ,IAAI,iCAAkC,SAAQ;AACtD,YAAM,WAAW,KAAK,SAAS,aAAa;AAC5C,UAAI;AAAU,cAAM,IAAI,MAAM;AAE9B,UAAI,gBAAgB;AAAG,eAAO;AAC9B,YAAM,eAAe,KAAK,eAAe;AACzC,YAAM,kBAAkB,KAAK,mBAAmB;AAEhD,YAAM,cAAc,IAAI,WAAW;AACnC,eAAS,IAAI,GAAG,IAAI,iBAAiB,KAAK;AAEtC,oBAAY,KAAK,KAAK,SAAS,MAAM,eAAe;AAAA;AAExD,YAAM,WAAW,KAAK,gBAAgB;AACtC,YAAM,UAAU,KAAK,SAAS,aAAa;AAE3C,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AAEpB,WAAK,gBAAgB;AAErB,oBAAc,IAAI,WAAW,KAAK,SAAS,OAAO,QAAQ,OAAO,KAAK;AAEtE,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,SAAS,MAAM,YAAY;AAAA;AAEpC,WAAK,SAAS,MAAM;AACpB,aAAO,EAAE,aAAa,MAAM;AAAA,aACvB,GAAP;AAEE,YAAM,WAAW,KAAK,SAAS,aAAa,KAAK;AACjD,WAAK;AAEL,YAAM,WAAW,IAAI,MAAM,YAAY;AAAA;AAAA;AAAA,QAYzC,QAAQ,MAAc,OAAiB,IAAI,iBAA0B,MAAM;AAC7E,YAAQ,IAAI,wBAAwB,KAAK;AAEzC,UAAM,aAAa;AAAA;AAAA,yBAEF;AAAA;AAEjB,UAAM,mBAAmB,KAAK,YAAY,MAAM,MAAM;AACtD,QAAI;AACJ,QAAI;AACA,2BAAqB,KAAK,YAAY,YAAY,MAAM;AAAA,aACnD,GAAP;AAAA;AACF,UAAM,MAAM,IAAI,iBAAS,kBAAkB;AAC3C,UAAM,IAAI;AACV,WAAO;AAAA;AAAA,EAWX,WAAW,MAAc,OAAiB,IAAY;AAClD,YAAQ,IAAI,wBAAwB,KAAK;AACzC,UAAM,WAAW,KAAK,SAAS,gBAAgB,QAAQ;AACvD,UAAM,QAAQ,KAAK,SAAS,QAAQ;AACpC,UAAM,OAAO;AACb,UAAM,WAAW,KAAK,SAAS,gBAAgB,QAAQ;AACvD,UAAM,QAAQ,KAAK,SAAS,QAAQ;AACpC,UAAM,UAAU,KAAK,SAAS,QAAQ;AACtC,UAAM,YAAY,KAAK,SAAS,QAAQ;AAExC,SAAK,SAAS,aAAa,MAAM,OAAO;AACxC,SAAK,SAAS,aAAa,MAAM,OAAO;AAGxC,UAAM,OAAO,CAAC,GAAG,MAAM,SAAS;AAGhC,UAAM,UAAU;AAChB,UAAM,QAAQ,KAAK,SAAS,QAAQ,KAAK,SAAS;AAClD,QAAI,cAAc,IAAI,WAAW,KAAK,SAAS,OAAO,QAAQ,OAAO,KAAK;AAC1E,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAM,WAAW,KAAK,SAAS,gBAAgB,KAAK,MAAM;AAC1D,YAAM,OAAO,KAAK,SAAS,QAAQ;AACnC,WAAK,SAAS,aAAa,KAAK,IAAI,MAAM;AAC1C,kBAAY,KAAK;AAAA;AAErB,QAAI;AACA,YAAM,gBAAgB,KAAK,qBAAqB,OAAO,OAAO,KAAK,QAAQ,OAAO,SAAS;AAC3F,YAAM,eAAe,KAAK,SAAS,aAAa;AAChD,YAAM,WAAW,KAAK,SAAS,aAAa;AAC5C,UAAI;AAAU,gBAAQ,MAAM;AAE5B,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AAEpB,WAAK,YAAY;AAEjB,oBAAc,IAAI,WAAW,KAAK,SAAS,OAAO,QAAQ,OAAO,KAAK;AAEtE,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,SAAS,MAAM,YAAY;AAAA;AAEpC,WAAK,SAAS,MAAM;AACpB,aAAO;AAAA,aACF,GAAP;AAEE,YAAM,WAAW,KAAK,SAAS,aAAa,KAAK;AACjD,WAAK;AAEL,YAAM,WAAW,IAAI,MAAM,YAAY;AAAA;AAAA;AAAA,EAS/C,WAAW,MAAc,OAAiB,IAAI;AAC1C,QAAI;AACA,YAAM,SAAkB,KAAK,SAAS,GAAG,QAAQ;AACjD,aAAM,OAAO,UAAQ,SAAS,OAAO,SAAS,MAAM,QAAQ,UAAQ,KAAK,SAAS,GAAG,OAAO,iBAAiB;AAAA,aACxG,OAAP;AAAA;AACF,UAAM,WAAW,KAAK,SAAS,gBAAgB,QAAQ;AACvD,UAAM,QAAQ,KAAK,SAAS,QAAQ;AACpC,UAAM,OAAO;AACb,UAAM,WAAW,KAAK,SAAS,gBAAgB,QAAQ;AACvD,UAAM,QAAQ,KAAK,SAAS,QAAQ;AACpC,UAAM,YAAY,KAAK,SAAS,QAAQ;AAExC,SAAK,SAAS,aAAa,MAAM,OAAO;AACxC,SAAK,SAAS,aAAa,MAAM,OAAO;AACxC,UAAM,OAAO,CAAC,GAAG,MAAM,SAAS,QAAQ,MAAM,aAAa;AAG3D,UAAM,UAAU;AAChB,UAAM,QAAQ,KAAK,SAAS,QAAQ,KAAK,SAAS;AAClD,QAAI,cAAc,IAAI,WAAW,KAAK,SAAS,OAAO,QAAQ,OAAO,KAAK;AAC1E,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAM,WAAW,KAAK,SAAS,gBAAgB,KAAK,MAAM;AAC1D,YAAM,OAAO,KAAK,SAAS,QAAQ;AACnC,WAAK,SAAS,aAAa,KAAK,IAAI,MAAM;AAC1C,kBAAY,KAAK;AAAA;AAErB,QAAI;AACA,WAAK,4BAA4B,OAAO,OAAO,KAAK,QAAQ,OAAO;AAEnE,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AACpB,WAAK,SAAS,MAAM;AAEpB,oBAAc,IAAI,WAAW,KAAK,SAAS,OAAO,QAAQ,OAAO,KAAK;AAEtE,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,SAAS,MAAM,YAAY;AAAA;AAEpC,WAAK,SAAS,MAAM;AAAA,aACf,GAAP;AAEE,YAAM,WAAW,KAAK,SAAS,aAAa,KAAK;AACjD,WAAK;AAEL,YAAM,WAAW,IAAI,MAAM,YAAY;AAAA;AAE3C,UAAM,MAA8B;AACpC,UAAM,QAAkB,KAAK,SAAS,GAAG,QAAQ;AACjD,UAAM,OAAO,UAAQ,SAAS,OAAO,SAAS,MAAM,QAAQ,UAAQ,IAAI,QAAQ,KAAK,SAAS,GAAG,SAAS,iBAAiB,QAAQ,EAAE,UAAU;AAC/I,WAAO;AAAA;AAAA;AAIf,IAAO,gBAAQ;;;AC1QR,IAAM,aAAa,CAAC,SAAiB,MAAQ,KAAO,SAAO,MAAM;AACjE,IAAM,QAAQ,CAAC,GAAW,KAAa,KAAa,KAAa,QAAiB,KAAI,OAAQ,OAAM,OAAQ,OAAM,OAAO;AACzH,IAAM,WAAW,CAAC,GAAQ,MAAc;AAC3C,MAAI,OAAO,MAAM;AAAU,WAAO;AAClC,MAAI,EAAE,SAAS;AACX,WAAQ,EAAE,YAAY;AAAA;AAE1B,aAAW,KAAK,GAAG;AACf,QAAI,SAAS,EAAE,IAAI;AAAI,aAAO;AAAA;AAElC,SAAO;AAAA;AAGJ,IAAM,mBAAmB,CAAC,QAAgB,WAAgC;AAAA,EAC7E,KAAK;AAAA,IACD,QAAQ,SAAS,SAAS;AAAA,IAAW,YAAY;AAAA,IAAG,WAAW;AAAA,IAC/D,MAAM,KAAK;AAAA,IAEX,QAAQ,KAAK;AAAA,IAAM,QAAQ,KAAK;AAAA,IAAM,QAAQ,KAAK;AAAA,IAAM,SAAS,KAAK;AAAA,IACvE,QAAQ,KAAK;AAAA,IAAM,OAAO,KAAK;AAAA,IAAK,OAAO,KAAK;AAAA,IAAK,SAAS,KAAK;AAAA,IACnE,QAAQ,CAAC,GAAW,MAAc,IAAI;AAAA,IACtC,OAAO,KAAK;AAAA,IAAK,SAAS,KAAK;AAAA,IAAO,QAAQ,KAAK;AAAA,IAAK,QAAQ,KAAK;AAAA,IACrE,aAAa,CAAC,GAAW,MAAc,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,IAC/D,OAAO,KAAK;AAAA,IAAK,SAAS,KAAK;AAAA,IAAQ,OAAO,KAAK;AAAA,IAAK,QAAQ,KAAK;AAAA,IAAM,OAAO,KAAK;AAAA,IACvF,SAAS,KAAK;AAAA,IAAO,SAAS,KAAK;AAAA,IAAO,SAAS,KAAK;AAAA,IACxD,QAAQ,KAAK;AAAA,IAAM,QAAQ,KAAK;AAAA,IAAM,QAAQ,KAAK;AAAA,IACnD,SAAS,OAAO;AAAA,IAAO,SAAS,CAAC,MAAc,CAAC,SAAS;AAAA,IACzD,YAAY,CAAC,GAAW,MAAe,KAAK,KAAK,OAAO,KAAK,KAAK,KAAK,IAAI,CAAC;AAAA,IAG5E,OAAO,KAAK;AAAA,IAAM,OAAO,KAAK;AAAA,IAAM,OAAO,KAAK;AAAA,IAAM,QAAQ,KAAK;AAAA,IACnE,OAAO,KAAK;AAAA,IAAM,MAAM,KAAK;AAAA,IAAK,MAAM,KAAK;AAAA,IAAK,QAAQ,KAAK;AAAA,IAC/D,OAAO,CAAC,GAAW,MAAc,IAAI;AAAA,IACrC,MAAM,KAAK;AAAA,IAAK,QAAQ,KAAK;AAAA,IAAO,OAAO,KAAK;AAAA,IAAK,OAAO,KAAK;AAAA,IACjE,YAAY,CAAC,GAAW,MAAc,IAAI,KAAK,MAAM,IAAI,KAAK;AAAA,IAC9D,MAAM,KAAK;AAAA,IAAK,QAAQ,KAAK;AAAA,IAAQ,MAAM,KAAK;AAAA,IAAK,OAAO,KAAK;AAAA,IAAM,MAAM,KAAK;AAAA,IAClF,QAAQ,KAAK;AAAA,IAAO,QAAQ,KAAK;AAAA,IAAO,QAAQ,KAAK;AAAA,IACrD,OAAO,KAAK;AAAA,IAAM,OAAO,KAAK;AAAA,IAAM,OAAO,KAAK;AAAA,IAChD,QAAQ,OAAO;AAAA,IAAO,QAAQ,CAAC,MAAc,CAAC,SAAS;AAAA,IACvD,WAAW,CAAC,GAAW,MAAe,KAAK,KAAK,OAAO,KAAK,KAAK,KAAK,IAAI,CAAC;AAAA,IAE3E,OAAO,IAAI,YAAY,MAAM,EAAE,SAAS,GAAG,SAAS;AAAA;AAAA;AAGrD,IAAM,mBAAmB,CAAC,UAAkB,SAAuB,YAA0B,eAAuB;AAEvH,QAAM,SAAS,KAAK,IAAI,GAAG;AAE3B,QAAM,UAAU;AAChB,QAAM,aAAa;AACnB,QAAM,YAAY,CAAC,MAAc;AAC7B,QAAI,IAAI;AACR,WAAO,IAAI,GAAG;AAAE,WAAK;AAAA;AACrB,WAAO;AAAA;AAEX,QAAM,aAAa,aAAa,WAAW,OAAO;AAClD,MAAI,aAAa,UACb,aACE,QAAQ,OAAO,SACd,SAAQ,SAAS,QAAQ,UAAU,KACnC,WAAU,aAAa,eAC1B;AACJ,eAAa,KAAK,IAAI,GAAG;AACzB,SAAO,IAAI,YAAY,OAAO,EAAE,SAAS,YAAY,SAAS;AAAA;;;AC7DlE,2BAAqB;AAAA,EA+DjB,YAAY,SAAyH;AACjI,UAAM,EAAE,KAAK,aAAa,YAAY,YAAY,WAAW;AAC7D,QAAI,CAAC;AAAK,YAAM,IAAI,MAAM;AAC1B,QAAI,KAAK;AAAS,YAAM,IAAI,MAAM;AAElC,SAAK,MAAM;AACX,UAAM,EAAE,UAAU,YAAY,YAAY,iBAAiB;AAC3D,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,eAAe;AACpB,SAAK,cAAc;AAEnB,SAAK,aAAa,cAAc;AAChC,SAAK,aAAa,cAAc;AAChC,SAAK,SAAS,UAAU;AAAA;AAAA,QAItB,aAAa;AACf,SAAK,OAAO;AACZ,SAAK,QAAQ;AAEb,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AAEvB,SAAK,mBAAmB;AACxB,SAAK,aAAa,IAAI,MAAM,KAAK,KAAK,MAAM,IAAI,MAAM;AAEtD,SAAK,QAAQ,KAAK,QAAQ;AAC1B,SAAK,SAAS,KAAK,QAAQ;AAG3B,SAAK,UAAU;AACf,SAAK,aAAa;AAGlB,UAAM,KAAK,gBAAgB,KAAK,KAAK,KAAK;AAC1C,SAAK,UAAU,KAAK,YAAY;AAChC,SAAK,OAAO,KAAK,SAAS,KAAK,OAAO,SAAS,KAAK,QAAQ,OAAO;AACnE,SAAK,SAAS,IAAI,WAAW,KAAK;AAClC,SAAK,UAAU,IAAI,aAAa,KAAK;AAErC,SAAK,SAAS,IAAI,MAAM,KAAK,QAAQ,KAAK,MAAM,IAAI,MAAM,IAAI,aAAa,KAAK;AAGhF,SAAK,cAAc;AAGnB,SAAK,aAAa,KAAK,QAAQ;AAG/B,SAAK,oBAAoB,KAAK;AAC9B,SAAK,qBAAqB,KAAK,oBAAoB,KAAK,QAAQ,KAAK;AAGrE,SAAK,mBAAmB,KAAK,qBAAsB,KAAK,SAAS,KAAK;AACtE,SAAK,oBAAoB,KAAK,mBAAoB,KAAK,QAAQ,KAAK,aAAa,KAAK;AACtF,QAAI,KAAK,QAAQ;AACb,WAAK,oBAAoB,KAAK,qBAAqB,KAAK,SAAS,KAAK;AAEtE,WAAK,mBAAmB,KAAK,oBAAoB,KAAK,SAAS,KAAK;AACpE,WAAK,oBAAoB,KAAK,mBAAmB,KAAK,QAAQ,KAAK,aAAa,KAAK;AACrF,WAAK,mBAAmB,KAAK,oBAAoB,KAAK,SAAS,KAAK,aAAa,KAAK;AACtF,WAAK,OAAO,KAAK,mBAAmB,KAAK,SAAS,KAAK,aAAa,KAAK;AAAA,WACtE;AACH,WAAK,mBAAmB,KAAK,qBAAqB,KAAK,SAAS,KAAK;AACrE,WAAK,oBAAoB,KAAK,mBAAmB,KAAK,QAAQ,KAAK,aAAa,KAAK;AAErF,WAAK,OAAO;AAAA;AAGhB,QAAI,KAAK,QAAQ;AACb,WAAK,aAAa,KAAK;AACvB,WAAK,UAAU;AACf,WAAK,cAAc;AACnB,WAAK,cAAc;AACnB,WAAK,cAAc;AACnB,WAAK,QAAQ;AAEb,WAAK,QAAQ,KAAK,cAAc;AAChC,WAAK,SAAS,KAAK,iBAAiB,KAAK,eAAe,UAAqC;AAG7F,WAAK,aAAa;AAClB,WAAK,iBAAiB;AACtB,WAAK,iBAAiB;AACtB,WAAK,gBAAgB;AAErB,WAAK,eAAe;AACpB,WAAK,aAAa;AAClB,WAAK,gBAAgB;AACrB,WAAK,WAAW;AAEhB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,WAAW,KAAK,KAAK,OAAO,IAAI,KAAK,QAAQ;AAClD,aAAK,eAAe,KAAK,KAAK;AAC9B,aAAK,eAAe,KAAK;AACzB,aAAK,cAAc,KAAK;AAAA;AAG5B,WAAK,UAAU,KAAK,WAAW,KAAK,SAAS,KAAK,KAAK,QAAQ;AAAA;AAGnE,SAAK,aAAa;AAElB,SAAK,UAAU;AAEf,SAAK;AAAA;AAAA,EAED,QAAQ;AACZ,QAAI,KAAK,QAAQ,GAAG;AAChB,WAAK,OAAO,KAAK;AACjB,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,KAAK;AACjC,aAAK,OAAQ,MAAK,QAAQ,KAAK,KAAK,KAAK,mBAAmB,KAAK,aAAa,KAAK,aAAa;AAAA;AAGpG,YAAM,aAAa,KAAK,OAAO,SAAS,KAAK,QAAQ,GAAI,KAAK,OAAO,KAAK,QAAQ,KAAK,WAAY;AACnG,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,KAAK;AACjC,aAAK,eAAe,KAAK,KAAK,QAAQ,SAAS,WAAW,MAAM,GAAI,WAAW,KAAK,KAAK,aAAa,KAAK,cAAe;AAAA;AAAA;AAGlI,QAAI,KAAK,SAAS,GAAG;AACjB,WAAK,QAAQ,KAAK;AAClB,UAAI,KAAK;AAAQ,aAAK,UAAU,KAAK;AACrC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,OAAQ,MAAK,SAAS,KAAK,KAAK,KAAK,oBAAoB,KAAK,aAAa,KAAK,aAAa;AAClG,YAAI,KAAK;AAAQ,eAAK,OAAQ,MAAK,WAAW,KAAK,KAAK,KAAK,mBAAmB,KAAK,aAAa,KAAK,aAAa;AAAA;AAGxH,YAAM,cAAc,KAAK,OAAO,SAAS,KAAK,SAAS,GAAI,KAAK,QAAQ,KAAK,SAAS,KAAK,WAAY;AACvG,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,gBAAgB,KAAK,KAAK,QAAQ,SAAS,YAAY,MAAM,GAAI,YAAY,KAAK,KAAK,aAAa,KAAK,cAAe;AAAA;AAAA;AAIrI,SAAK,QAAQ,KAAK,QAAQ;AAC1B,QAAI,KAAK;AAAQ,WAAK,QAAQ,KAAK,WAAW;AAG9C,QAAI,KAAK,QAAQ;AACb,WAAK,YAAY,QAAQ,CAAC,SAAS;AAC/B,YAAI,KAAK,SAAS;AAAU,eAAK,YAAY,KAAK,KAAK,WAAW;AAAA,iBACzD,KAAK,SAAS;AAAU,eAAK,YAAY,KAAK,KAAK,WAAW;AAAA,iBAC9D,KAAK,SAAS;AAAU,eAAK,YAAY,KAAK,KAAK,WAAW;AAAA;AAG3E,WAAK,WAAW,QAAQ,YAAU,KAAK,QAAQ,KAAK,QAAQ,KAAK;AAEjE,UAAI,KAAK;AAAQ,aAAK,OAAO,KAAK,KAAK,SAAS,KAAK;AAAA,WAClD;AAEH,WAAK,QAAQ,KAAK,KAAK,MAAM,KAAK;AAAA;AAAA;AAAA,QAG5B,gBAAgB,KAAe,aAAkC;AAC3E,UAAM,SAAS,iBAAiB,KAAK,QAAQ,KAAK,SAAS,KAAK,YAAY,KAAK;AACjF,SAAK,SAAS;AACd,UAAM,UAAU,iBAAiB,KAAK,QAAQ;AAC9C,SAAK,cAAc,MAAM,YAAY,YAAY,IAAI,YAAY;AACjE,QAAI,IAAI,cAAc;AAClB,WAAK,iBAAiB,MAAM,YAAY,YAAY,IAAI,cAAc;AAAA;AAE1E,QAAI,KAAK,QAAQ;AACb,YAAM,eAAe,EAAE,SAAS,EAAE,OAAO,QAAQ,OAAO,QAAQ,EAAE;AAClE,WAAK,gBAAgB,MAAM,IAAI,YAAY,SAAS,aAAa;AAAA;AAAA;AAAA,EAGjE,QAAQ,IAAuB;AACnC,OAAG,QAAQ,WAAS,KAAK,WAAW;AAAA;AAAA,EAEhC,WAAW,OAAsB;AACrC,QAAI,MAAM;AAAO,WAAK,WAAW,MAAM;AAAA;AAAA,EAEnC,WAAW,OAAuB;AACtC,UAAM,QAAQ,UAAQ,KAAK,UAAU;AAAA;AAAA,EAEjC,UAAU,MAAoB;AAClC,QAAI,KAAK,SAAS,YAAY,KAAK,SAAS,YAAY,KAAK,SAAS,UAAU;AAC5E,WAAK,WAAW,KAAK;AAAA,eACd,KAAK,SAAS,eAAe,KAAK,SAAS,aAAa;AAE/D,WAAK,aAAa,KAAK,KAAK;AAAA,eACrB,KAAK,SAAS,aAAa,KAAK,SAAS,aAAa,KAAK,SAAS,YAAY,KAAK,SAAS,cAAc,KAAK,SAAS,UAAU;AAE3I,WAAK,YAAY,KAAK,KAAK;AAC3B,UAAI,CAAC,KAAK;AAAM;AAChB,WAAK,KAAK,QAAQ,CAAC,SAAS;AACxB,cAAM,EAAE,SAAS;AACjB,YAAI,CAAC;AAAM;AACX,cAAM,UAAU,KAAK;AACrB,YAAI,YAAY,cAAc;AAC1B,eAAK,iBAAiB,KAAK,EAAE,MAAM,KAAK,SAAS,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA,eACvE;AACH,gBAAM,UAAU,QAAQ,MAAM;AAC9B,cAAI,CAAC;AAAS;AACd,eAAK,WAAW,SAAS,QAAQ,KAAK,KAAK,EAAE,MAAM,KAAK,SAAS,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,EAK1G,cAAc,MAAc,KAAa;AACrC,QAAI,KAAK,QAAQ;AACb,UAAI,KAAK,UAAU,SAAS,KAAK,WAAW,IAAI;AAAO,aAAK,OAAO,cAAc,KAAK,SAAS,KAAK,WAAW,OAAO;AAAA;AACjH,aAAK,WAAW,QAAQ,YAAU,KAAK,QAAQ,cAAc,QAAQ,KAAK,WAAW,OAAO;AAAA,WAC9F;AACH,WAAK,QAAQ,cAAc,KAAK,MAAM,KAAK,WAAW,OAAO;AAAA;AAAA;AAAA,EAGrE,cAAc,MAAc;AACxB,QAAI,KAAK,QAAQ;AACb,UAAI,KAAK,UAAU,SAAS,KAAK,WAAW,IAAI;AAAO,eAAO,KAAK,OAAO,cAAc,KAAK,SAAS,KAAK,WAAW;AACtH,aAAO,KAAK,QAAQ,cAAc,KAAK,WAAW,IAAI,KAAK,WAAW;AAAA;AAE1E,WAAO,KAAK,QAAQ,cAAc,KAAK,MAAM,KAAK,WAAW;AAAA;AAAA,EAGzD,gBAAgB,OAAe;AACnC,QAAI,CAAC,KAAK;AAAQ,aAAO;AACzB,QAAI,QAAQ,KAAK;AACjB,QAAI,oBAAoB,OAAO;AAC/B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,UAAI,KAAK,eAAe,OAAO,OAAO;AAElC,YAAI,KAAK,cAAc,KAAK,mBAAmB;AAC3C,8BAAoB,KAAK,cAAc;AACvC,kBAAQ;AAAA;AAAA;AAAA;AAIpB,WAAO;AAAA;AAAA,EAEH,WAAW,OAAe;AAC9B,QAAI,CAAC,KAAK;AAAQ,aAAO;AAEzB,SAAK,QAAQ,cAAc,KAAK,WAAW;AAC3C,SAAK,cAAc,SAAS,KAAK;AACjC,SAAK,eAAe,SAAS,KAAK;AAClC,WAAO;AAAA;AAAA,EAEH,eAAe;AACnB,QAAI,CAAC,KAAK;AAAQ,aAAO;AACzB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,UAAI,KAAK,eAAe,OAAO,KAAK;AAAY,eAAO,KAAK,WAAW;AAAA;AAE3E,QAAI,eAAe,KAAK;AACxB,QAAI,eAAe,KAAK;AACxB,QAAI,oBAAoB,OAAO;AAC/B,QAAI,oBAAoB,OAAO;AAC/B,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAElC,UAAI,KAAK,eAAe,OAAO,KAAK,eAAe;AAE/C,YAAI,KAAK,cAAc,KAAK,mBAAmB;AAC3C,8BAAoB,KAAK,cAAc;AACvC,yBAAe;AAAA;AAAA,iBAEZ,KAAK,cAAc,KAAK,mBAAmB;AAClD,4BAAoB,KAAK,cAAc;AACvC,uBAAe;AAAA;AAAA;AAIvB,QAAI,sBAAsB,OAAO,WAAW;AAExC,aAAO,KAAK,WAAW;AAAA;AAE3B,QAAI,sBAAsB,OAAO,WAAW;AAExC,aAAO,KAAK,WAAW;AAAA;AAE3B,WAAO,KAAK;AAAA;AAAA,EAEhB,MAAM,SAAiB,OAAe,UAAkB;AACpD,QAAI,CAAC,KAAK;AAAQ;AAClB,UAAM,QAAQ,KAAK;AAEnB,SAAK,YAAY,QAAQ,OAAK,KAAK,QAAQ,cAAc,KAAK,WAAW,QAAQ,GAAG,WAAW;AAC/F,SAAK,YAAY,QAAQ,OAAK,KAAK,QAAQ,cAAc,KAAK,WAAW,QAAQ,GAAG;AACpF,SAAK,YAAY,QAAQ,OAAK,KAAK,QAAQ,cAAc,KAAK,WAAW,QAAQ,GAAG,WAAW;AAC/F,SAAK,eAAe,SAAS;AAAA;AAAA,EAEjC,OAAO,SAAiB,OAAe,UAAkB;AACrD,QAAI,CAAC,KAAK;AAAQ;AAClB,UAAM,QAAQ,KAAK,gBAAgB;AACnC,QAAI,UAAU,KAAK;AAAU;AAE7B,SAAK,YAAY,QAAQ,OAAK,KAAK,QAAQ,cAAc,KAAK,WAAW,QAAQ,GAAG;AACpF,SAAK,eAAe,SAAS,KAAK;AAAA;AAAA,EAEtC,cAAc;AACV,QAAI,CAAC,KAAK;AAAQ;AAClB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,WAAK,YAAY,QAAQ,WAAS,KAAK,QAAQ,cAAc,KAAK,WAAW,IAAI,OAAO;AACxF,WAAK,eAAe,KAAK,KAAK;AAAA;AAAA;AAAA,EAItC,YAAY,MAA6B;AACrC,UAAM,MAAM,KAAK,MAAM;AACvB,UAAM,UAAU,KAAK,KAAK;AAC1B,UAAM,QAAQ,KAAK;AACnB,UAAM,QAAQ,KAAK;AACnB,QAAI,YAAY;AAAG;AACnB,QAAI,QAAQ,KAAM,QAAQ,KAAK,UAAU;AAAI,WAAK,OAAO,SAAS,OAAO;AAAA,aAChE,QAAQ;AAAG,WAAK,MAAM,SAAS,OAAO;AAAA,aACtC,QAAQ;AAAI,WAAK,WAAW,SAAS,OAAO;AAAA,aAC5C,QAAQ;AAAI,WAAK,WAAW,SAAS,QAAQ,MAAQ;AAAA;AAAA,EAElE,WAAW,SAAiB,MAAc,OAAe;AACrD,QAAI,SAAS,OAAO,SAAS,KAAK;AAC9B,WAAK;AAAA;AAET,QAAI,CAAC,KAAK,WAAW,MAAM;AAAQ;AACnC,SAAK,WAAW,MAAM,QAAQ,CAAC,UAAS;AACpC,YAAM,EAAE,SAAS;AACjB,WAAK,cAAc,MAAM,MAAM,OAAO,GAAG,KAAK,MAAK,KAAK,MAAK;AAAA;AAAA;AAAA,EAGrE,WAAW,SAAiB,OAAe;AACvC,SAAK,iBAAiB,QAAQ,CAAC,OAAO;AAClC,WAAK,cAAc,GAAG,MAAM,MAAM,OAAO,GAAG,OAAO,GAAG,KAAK,GAAG;AAAA;AAAA;AAAA,EAGtE,QAAQ,SAAyB,IAAI;AACjC,QAAI,CAAC,KAAK;AAAS,aAAO,KAAK;AAC/B,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,KAAK;AACjC,WAAK,eAAe,GAAG,KAAK;AAC5B,UAAI,OAAO;AAAI,aAAK,eAAe,GAAG,IAAI,OAAO;AAAA;AAErD,QAAI,KAAK,QAAQ;AACb,WAAK,MAAM,YAAY,KAAK,YAAY,KAAK,QAAQ,KAAK;AAC1D,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,QAAQ,QAAQ,KAAK,WAAW,IAAI,KAAK,YAAY,KAAK,MAAM,KAAK;AAC1E,aAAK,MAAM,SAAS,KAAK,YAAY,KAAK,QAAQ,KAAK,SAAS,KAAK;AAAA;AAEzE,UAAI,KAAK;AAAQ,aAAK,OAAO,QAAQ,KAAK,SAAS,KAAK,YAAY,KAAK,OAAO,KAAK;AAAA,WAClF;AACH,WAAK,QAAQ,QAAQ,KAAK,MAAM,KAAK,YAAY,KAAK,MAAM,KAAK;AAAA;AAGrE,QAAI,KAAK,WAAW,QAAW;AAC3B,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,OAAO,GAAG,IAAI,KAAK,gBAAgB;AAAA;AAAA;AAGhD,SAAK,WAAW,KAAK;AACrB,WAAO,KAAK;AAAA;AAAA,EAEhB,SAAS,SAAyB,IAAI,SAAS,KAAK,YAAY,UAAoC;AAChG,QAAI,IAAI;AACR,UAAM,UAAU,IAAI,MAAM,KAAK,QAAQ,KAAK,MAAM,IAAI,MAAM,IAAI,aAAa;AAC7E,WAAO,IAAI,QAAQ;AACf,YAAM,cAAc,KAAK,IAAI,SAAS,GAAG,KAAK;AAC9C,YAAM,gBAAgC;AACtC,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,KAAK;AACjC,YAAI;AACJ,YAAI,OAAO,IAAI;AACX,cAAI,OAAO,GAAG,UAAU,GAAG;AACvB,oBAAQ,IAAI,aAAa;AAAA,qBAClB,OAAO,GAAG,SAAS,IAAI,aAAa;AAC3C,oBAAQ,OAAO,GAAG,SAAS,GAAG,IAAI;AAAA,iBAC/B;AACH,oBAAQ,OAAO,GAAG,SAAS,GAAG,OAAO,GAAG;AAAA;AAAA;AAGhD,sBAAc,KAAK;AAAA;AAEvB,YAAM,kBAAkB,KAAK,QAAQ;AACrC,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,cAAM,SAAS,gBAAgB;AAC/B,YAAI,cAAc,KAAK,YAAY;AAC/B,kBAAQ,GAAG,IAAI,OAAO,SAAS,GAAG,cAAc;AAAA,eAC7C;AACH,kBAAQ,GAAG,IAAI,QAAQ;AAAA;AAAA;AAG/B,WAAK,KAAK;AACV,iBAAW;AAAA;AAEf,WAAO;AAAA;AAAA;AAIf,IAAO,yBAAQ;;;ACncf,IAAM,UAAsF;AAE5F,IAAM,QAAQ,QAAO,oBAAoB,IAAI;AAE7C,IAAM,cAAc,OAAO,QAAgB;AAC1C,QAAM,cAAc,IAAI,IAAI,KAAK,SAAS,MAAM;AAChD,MAAI,MAAM,IAAI;AAAc,WAAO,MAAM,IAAI;AAC7C,MAAI;AACJ,QAAM,WAAW;AACjB,UAAO,UAAU;AACjB,UAAO,SAAS,EAAE,SAAS;AAC3B,QAAM,MAAM,MAAM;AAAA;AAAA,IAAgC;AAAA;AAClD,QAAM,UAAU,OAAO,KAAK;AAC5B,MAAI,QAAQ;AAAQ,eAAW;AAAA;AAC1B,eAAW,QAAO,OAAO;AAC9B,SAAO,QAAO;AACd,SAAO,QAAO;AACd,QAAM,IAAI,aAAa;AACvB,SAAO;AAAA;AAGR,IAAI,CAAC,QAAO;AAAkB,UAAO,mBAAmB;AAExD,IAAO,sBAAQ;;;ACpBf,IAAM,sBAAsB,OAAO,QAAgB,WAAW,OAAO,QAAQ,SAAS,SAAS,WAAW,OAAO,QAAQ,SAAS,YAAY;AAe1I,MAAI;AACJ,MAAI;AACA,eAAW,UAAQ;AAAA,WACd,OAAP;AACE,eAAW,MAAM,oBAAY;AAAA;AAEjC,QAAM,aAAa,CAAC,KAAa,oBAA6B;AAAA,IAC1D,sBAAsB;AAAA,IACtB,sBAAsB;AAAA,KACxB,QAAS,kBAAkB;AAC7B,QAAM,WAAW,MAAM,SAAS,EAAE;AAiBlC,SAAO;AAAA;AAGX,IAAO,8BAAQ;;;AC9Bf,uBAAiB;AAAA,SACN,OAAO,aAA6B,SAA4B;AACnE,UAAM,mBAAmB,YAAY;AACrC,UAAM,SAAS,YAAY,GAAG;AAC9B,UAAM,EAAE,QAAQ,UAAU;AAC1B,UAAM,WAAW,QAAQ,KAAO,QAAQ,WAAW,KAAM;AACzD,UAAM,YAAY,YAAY;AAC9B,UAAM,aAAa,SAAS,mBAAmB;AAE/C,UAAM,KAAK,SAAU,WAAW,qBAAqB,WAAW,cAAe,WAAW;AAC1F,UAAM,KAAK,IAAI,GAAI,MAAK,cAAc,WAAW;AACjD,UAAM,WAAW,IAAI,SAAS;AAC9B,UAAM,SAAS,IAAI,OAAO;AAC1B,UAAM,SAAiB;AAAA,MACnB,UAAU,QAAQ,IAAS;AAAA,MAC3B;AAAA,MACA;AAAA,MACA,YAAY,QAAQ;AAAA,MACpB,WAAW,CAAC,CAAC,QAAQ;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA;AAEJ,SAAK,YAAY,QAAQ;AACzB,SAAK,UAAU,QAAQ,aAAa;AACpC,WAAO;AAAA;AAAA,SAEI,YAAY,QAAgB,QAAgB;AACvD,UAAM,EAAE,UAAU,YAAY,UAAU,kBAAkB,QAAQ,cAAc;AAChF,WAAO,OAAO;AACd,WAAO,OAAO,OAAO,SAAS,aAAa;AAC3C,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,OAAO,aAAa,mBAAmB;AAC9C,WAAO,OAAO,mBAAmB;AACjC,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,OAAO,SAAS,mBAAmB;AAC1C,WAAO,OAAO;AAAA;AAAA,SAEH,UAAU,QAAgB,aAA6B,QAAgB;AAClF,UAAM,EAAE,UAAU,OAAO,QAAQ,kBAAkB,cAAc;AACjE,QAAI,aAAa,MAAM,OAAO;AAC1B,YAAM,EAAE,UAAU,QAAQ;AAC1B,YAAM,KAAK,SAAS;AACpB,YAAM,UAAU,IAAI,aAAa,IAAI;AACrC,UAAI,qBAAqB,GAAG;AACxB,gBAAQ,IAAI,YAAY;AACxB;AAAA;AAEJ,eAAS,KAAK,GAAG,KAAK,kBAAkB,MAAM;AAC1C,cAAM,UAAU,YAAY;AAC5B,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,kBAAQ,IAAI,mBAAmB,MAAM,QAAQ;AAAA;AAAA;AAGrD;AAAA;AAEJ,UAAM,gBAAgB,QAAQ,MAAM,YAAY,MAAM;AACtD,UAAM,aAAa,QAAQ,WAAW;AAEtC,QAAI,CAAE,OAAe,aAAa;AAC9B,YAAM,IAAI,UAAU,8BAA8B;AAAA;AAGtD,UAAM,QAAkC,OAAe,YAAY,KAAK;AAExE,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,eAAS,IAAI,GAAG,IAAI,kBAAkB,KAAK;AACvC,cAAM,YAAY,GAAG;AAAA;AAAA;AAAA;AAAA;AAMrC,mBAAa;AAAA,EAGT,YAAY,UAAoB;AAFhC,eAAM;AAGF,SAAK,WAAW;AAAA;AAAA,EAEpB,MAAM,OAAe;AACjB,SAAK,SAAS,SAAS,KAAK,KAAK,OAAO;AACxC,SAAK,OAAO;AAAA;AAAA,EAEhB,OAAO,OAAe;AAClB,SAAK,SAAS,UAAU,KAAK,KAAK,OAAO;AACzC,SAAK,OAAO;AAAA;AAAA,EAEhB,OAAO,OAAe;AAClB,SAAK,SAAS,UAAU,KAAK,KAAK,OAAO;AACzC,SAAK,OAAO;AAAA;AAAA,EAEhB,OAAO,OAAe;AAClB,aAAS,IAAI,GAAG,OAAO,MAAM,QAAQ,IAAI,MAAM,KAAK;AAChD,WAAK,SAAS,SAAS,KAAK,OAAO,MAAM,WAAW;AAAA;AAAA;AAAA,EAG5D,KAAK,SAAiB;AAClB,QAAI,QAAQ;AACZ,YAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,OAAO;AACrC,YAAS,SAAQ,MAAM,OAAO;AAC9B,YAAQ,KAAK,MAAM,SAAS;AAC5B,SAAK,SAAS,SAAS,KAAK,KAAK;AACjC,SAAK,OAAO;AAAA;AAAA,EAEhB,MAAM,SAAiB;AACnB,QAAI,QAAQ;AACZ,YAAQ,KAAK,MAAM,QAAQ,OAAO;AAClC,YAAQ,KAAK,IAAI,GAAG,KAAK,IAAI,OAAO;AACpC,SAAK,SAAS,SAAS,KAAK,KAAK;AACjC,SAAK,OAAO;AAAA;AAAA,EAEhB,MAAM,SAAiB;AACnB,QAAI,QAAQ;AACZ,YAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,OAAO;AACrC,YAAQ,QAAQ,IAAI,QAAQ,QAAQ,QAAQ;AAC5C,YAAQ,KAAK,MAAM,SAAS;AAC5B,SAAK,SAAS,SAAS,KAAK,KAAK,OAAO;AACxC,SAAK,OAAO;AAAA;AAAA,EAEhB,OAAO,SAAiB;AACpB,QAAI,QAAQ;AACZ,YAAQ,KAAK,MAAM,QAAQ;AAC3B,YAAQ,KAAK,IAAI,QAAQ,KAAK,IAAI,OAAO;AACzC,SAAK,SAAS,SAAS,KAAK,KAAK,OAAO;AACxC,SAAK,OAAO;AAAA;AAAA,EAEhB,MAAM,SAAiB;AACnB,QAAI,QAAQ;AACZ,YAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,OAAO;AACrC,YAAQ,QAAQ,IAAI,WAAY,QAAQ,UAAU,QAAQ;AAC1D,YAAQ,KAAK,MAAM,SAAS;AAE5B,UAAM,KAAM,SAAS,IAAK;AAC1B,UAAM,KAAM,SAAS,IAAK;AAC1B,UAAM,KAAM,SAAS,KAAM;AAE3B,SAAK,SAAS,SAAS,KAAK,MAAM,GAAG;AACrC,SAAK,SAAS,SAAS,KAAK,MAAM,GAAG;AACrC,SAAK,SAAS,SAAS,KAAK,MAAM,GAAG;AACrC,SAAK,OAAO;AAAA;AAAA,EAEhB,OAAO,SAAiB;AACpB,QAAI,QAAQ;AACZ,YAAQ,KAAK,MAAM,QAAQ;AAC3B,YAAQ,KAAK,IAAI,UAAU,KAAK,IAAI,OAAO;AAE3C,UAAM,KAAM,SAAS,IAAK;AAC1B,UAAM,KAAM,SAAS,IAAK;AAC1B,UAAM,KAAM,SAAS,KAAM;AAE3B,SAAK,SAAS,SAAS,KAAK,MAAM,GAAG;AACrC,SAAK,SAAS,SAAS,KAAK,MAAM,GAAG;AACrC,SAAK,SAAS,SAAS,KAAK,MAAM,GAAG;AACrC,SAAK,OAAO;AAAA;AAAA,EAEhB,MAAM,SAAiB;AACnB,QAAI,QAAQ;AACZ,YAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,OAAO;AACrC,YAAQ,QAAQ,IAAI,QAAQ,aAAa,QAAQ;AACjD,YAAQ,KAAK,MAAM,SAAS;AAC5B,SAAK,SAAS,SAAS,KAAK,KAAK,OAAO;AACxC,SAAK,OAAO;AAAA;AAAA,EAEhB,OAAO,SAAiB;AACpB,QAAI,QAAQ;AACZ,YAAQ,KAAK,MAAM,QAAQ;AAC3B,YAAQ,KAAK,IAAI,aAAa,KAAK,IAAI,OAAO;AAC9C,SAAK,SAAS,SAAS,KAAK,KAAK,OAAO;AACxC,SAAK,OAAO;AAAA;AAAA,EAEhB,OAAO,OAAe;AAClB,SAAK,SAAS,WAAW,KAAK,KAAK,OAAO;AAC1C,SAAK,OAAO;AAAA;AAAA;AAIpB,IAAO,qBAAQ;;;AC1Lf,uBAAiB;AAAA,SACN,OAAO,QAAqB,SAA6B;AAC5D,UAAM,WAAW,IAAI,SAAS;AAC9B,UAAM,SAAS,IAAI,OAAO;AAC1B,QAAI,OAAO,OAAO,OAAO,QAAQ;AAC7B,YAAM,IAAI,UAAU;AAAA;AAExB,WAAO;AACP,QAAI,OAAO,OAAO,OAAO,QAAQ;AAC7B,YAAM,IAAI,UAAU;AAAA;AAExB,QAAI,SAAiB;AACrB,QAAI,YAKA;AACJ,OAAG;AACC,YAAM,YAAY,OAAO,OAAO;AAChC,YAAM,YAAY,OAAO;AACzB,UAAI,cAAc,QAAQ;AACtB,iBAAS,KAAK,aAAa,QAAQ;AAAA,iBAC5B,cAAc,QAAQ;AAC7B,oBAAY,KAAK,WAAW,QAAQ,WAAW,QAAQ,WAAW;AAAA,aAC/D;AACH,eAAO,KAAK;AAAA;AAAA,aAEX,cAAc;AACvB,WAAO;AAAA;AAAA,SAEI,aAAa,QAAgB,WAAmB;AAC3D,UAAM,UAAU;AAAA,MACZ,GAAQ;AAAA,MACR,GAAQ;AAAA;AAEZ,UAAM,WAAW,OAAO;AACxB,QAAI,CAAC,QAAQ,eAAe,WAAW;AACnC,YAAM,IAAI,UAAU,uCAAuC,SAAS,SAAS;AAAA;AAEjF,UAAM,SAAiB;AAAA,MACnB;AAAA,MACA,OAAO,aAAa;AAAA,MACpB,kBAAkB,OAAO;AAAA,MACzB,YAAY,OAAO;AAAA,MACnB,UAAU,OAAO;AAAA,MACjB,WAAW,OAAO;AAAA,MAClB,UAAU,OAAO;AAAA;AAErB,WAAO,KAAK,YAAY;AACxB,WAAO;AAAA;AAAA,SAEI,WAAW,QAAgB,aAAqB,QAAgB,SAA4B;AACvG,UAAM,YAAY,KAAK,IAAI,aAAa,OAAO;AAC/C,UAAM,SAAS,KAAK,MAAM,YAAY,OAAO;AAC7C,UAAM,mBAAmB,OAAO;AAChC,UAAM,aAAa,OAAO;AAC1B,UAAM,cAA8B,IAAI,MAAM;AAC9C,aAAS,KAAK,GAAG,KAAK,kBAAkB,MAAM;AAC1C,YAAM,KAAK,QAAQ,SAAU,WAAW,qBAAqB,WAAW,cAAe,WAAW;AAClG,YAAM,KAAK,IAAI,GAAG,SAAS,aAAa;AACxC,kBAAY,MAAM,IAAI,aAAa;AAAA;AAEvC,SAAK,QAAQ,QAAQ,aAAa,QAAQ,QAAQ;AAClD,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA,SAGO,QAAQ,QAAgB,aAA6B,QAAgB,QAAgB,SAA4B;AAC5H,UAAM,WAAW,OAAO;AACxB,UAAM,gBAAgB,OAAO,QAAQ,MAAM,QAAQ,YAAY,MAAM;AACrE,UAAM,aAAa,QAAQ,WAAW;AACtC,QAAI,CAAC,OAAO,aAAa;AACrB,YAAM,IAAI,UAAU,8BAA8B,OAAO;AAAA;AAE7D,UAAM,OAAqB,OAAO,YAAY,KAAK;AACnD,UAAM,mBAAmB,OAAO;AAChC,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,eAAS,KAAK,GAAG,KAAK,kBAAkB,MAAM;AAC1C,oBAAY,IAAI,KAAK;AAAA;AAAA;AAAA;AAAA;AAMrC,mBAAa;AAAA,EAGT,YAAY,UAAoB;AAFhC,eAAM;AAGF,SAAK,WAAW;AAAA;AAAA,EAEpB,SAAS;AACL,WAAO,KAAK,SAAS,aAAa,KAAK;AAAA;AAAA,EAE3C,KAAK,GAAW;AACZ,SAAK,OAAO;AAAA;AAAA,EAEhB,QAAQ;AACJ,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK;AACzC,SAAK,OAAO;AACZ,WAAO;AAAA;AAAA,EAEX,QAAQ;AACJ,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK,KAAK;AAC9C,SAAK,OAAO;AACZ,WAAO;AAAA;AAAA,EAEX,SAAS;AACL,UAAM,OAAO,KAAK,SAAS,UAAU,KAAK,KAAK;AAC/C,SAAK,OAAO;AACZ,WAAO;AAAA;AAAA,EAEX,SAAS;AACL,UAAM,OAAO,KAAK,SAAS,UAAU,KAAK,KAAK;AAC/C,SAAK,OAAO;AACZ,WAAO;AAAA;AAAA,EAEX,OAAO,GAAW;AACd,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,cAAQ,OAAO,aAAa,KAAK;AAAA;AAErC,WAAO;AAAA;AAAA,EAEX,OAAO;AACH,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK,OAAO;AAChD,SAAK,OAAO;AACZ,WAAO,OAAO,IAAI,OAAO,MAAM,OAAO;AAAA;AAAA,EAE1C,QAAQ;AACJ,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK,OAAO;AAChD,SAAK,OAAO;AACZ,WAAO,OAAO;AAAA;AAAA,EAElB,QAAQ;AACJ,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK,KAAK;AAC9C,SAAK,OAAO;AACZ,WAAO,OAAO,IAAI,OAAO,QAAQ,OAAO;AAAA;AAAA,EAE5C,SAAS;AACL,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK,KAAK;AAC9C,SAAK,OAAO;AACZ,WAAO,OAAO;AAAA;AAAA,EAElB,QAAQ;AACJ,UAAM,KAAK,KAAK,SAAS,SAAS,KAAK,MAAM;AAC7C,UAAM,KAAK,KAAK,SAAS,SAAS,KAAK,MAAM;AAC7C,UAAM,KAAK,KAAK,SAAS,SAAS,KAAK,MAAM;AAC7C,UAAM,KAAM,KAAM,OAAM,KAAM,OAAM;AAEpC,UAAM,OAAO,KAAK,UAAW,KAAK,WAAY;AAC9C,SAAK,OAAO;AACZ,WAAO,OAAO,IAAI,OAAO,UAAU,OAAO;AAAA;AAAA,EAE9C,SAAS;AACL,UAAM,KAAK,KAAK,SAAS,SAAS,KAAK,MAAM;AAC7C,UAAM,KAAK,KAAK,SAAS,SAAS,KAAK,MAAM;AAC7C,UAAM,KAAK,KAAK,SAAS,SAAS,KAAK,MAAM;AAC7C,UAAM,KAAM,KAAM,OAAM,KAAM,OAAM;AAEpC,UAAM,OAAO,KAAK,UAAW,KAAK,WAAY;AAC9C,SAAK,OAAO;AACZ,WAAO,OAAO;AAAA;AAAA,EAElB,QAAQ;AACJ,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK,KAAK;AAC9C,SAAK,OAAO;AACZ,WAAO,OAAO,IAAI,OAAO,aAAa,OAAO;AAAA;AAAA,EAEjD,SAAS;AACL,UAAM,OAAO,KAAK,SAAS,SAAS,KAAK,KAAK;AAC9C,SAAK,OAAO;AACZ,WAAO,OAAO;AAAA;AAAA,EAElB,SAAS;AACL,UAAM,OAAO,KAAK,SAAS,WAAW,KAAK,KAAK;AAChD,SAAK,OAAO;AACZ,WAAO;AAAA;AAAA,EAEX,SAAS;AACL,UAAM,OAAO,KAAK,SAAS,WAAW,KAAK,KAAK;AAChD,SAAK,OAAO;AACZ,WAAO;AAAA;AAAA;AAIf,IAAO,qBAAQ;;;AC7Lf,IAAO,cAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;",
  "names": []
}
